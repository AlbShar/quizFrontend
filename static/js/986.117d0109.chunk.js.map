{"version":3,"file":"static/js/986.117d0109.chunk.js","mappings":"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","sources":["assets/images/chevrondown.svg","api/getTotalQuestionsNumb.ts","components/Container/Container.styled.ts","components/Container/Container.tsx","config/firebase/firebaseConfig.js","helpers/getIdUser.ts","modules/UserAnswers/UI/Dropdown/Dropdown.Styled.ts","modules/UserAnswers/UI/Dropdown/Dropdown.tsx","modules/UserAnswers/components/FilterByRight/FilterByRight.tsx","modules/UserAnswers/components/FilterByThemes/FilterByThemes.tsx","modules/UserAnswers/api/getAnswerOptions.ts","modules/UserAnswers/api/getUserAnswers.ts","modules/UserAnswers/api/getInfoQuestions.ts","modules/UserAnswers/helpers/getNumberFromKey.ts","modules/UserAnswers/helpers/filterByRightAnswer.ts","modules/UserAnswers/helpers/getThemes.ts","modules/UserAnswers/helpers/getThemesNames.ts","modules/UserAnswers/helpers/filterByThemes.ts","modules/UserAnswers/helpers/getPointsByThemes.ts","modules/UserAnswers/UserAnswers/UserAnswers.Styled.ts","modules/UserAnswers/index.ts","modules/UserAnswers/UserAnswers/UserAnswers.tsx","modules/Doughunt/Doughunt.Styled.ts","components/ChartDoughnut/ChartDoughnut.tsx","modules/Doughunt/index.ts","modules/Doughunt/Doughunt.tsx","modules/FinalResult/FinalResult.Styled.ts","modules/FinalResult/index.ts","modules/FinalResult/FinalResult.tsx","modules/FinalResult/api/getUserAnswers.ts","modules/SpentTime/SpentTime.Styled.ts","modules/SpentTime/helpers/transformSecondsToMinutes.ts","modules/SpentTime/index.ts","modules/SpentTime/SpentTime.tsx","modules/SpentTime/api/getUserInfo.ts","components/BarChart/BarChart.tsx","modules/ChartBar/BarChart.Styled.ts","modules/ChartBar/index.ts","modules/ChartBar/BarChart.tsx","pages/Results/Results.Styled.ts","pages/Results/Results.tsx","styles/Main.Styled.ts"],"sourcesContent":["var _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgChevrondown(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 8,\n    height: 6,\n    viewBox: \"0 0 8 6\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1 1.5L4 4.5L7 1.5\",\n    stroke: \"white\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgChevrondown);\nexport default __webpack_public_path__ + \"static/media/chevrondown.155409e0c48ea57ccaa9ebaf346774a8.svg\";\nexport { ForwardRef as ReactComponent };","import { ref } from 'firebase/database';\r\nimport { onValue } from 'firebase/database';\r\n\r\nimport db from '../config/firebase/firebaseConfig';\r\n\r\n// Fix: 11 строку вынести в отдельную строку\r\nconst getTotalQuestionsNumb = async () => {\r\n  try {\r\n    return await new Promise<number>(function (resolve, reject) {\r\n      onValue(ref(db, 'questions'), (snapshot) => {\r\n        const totalQuestionsNumb: number = Object.entries(\r\n          snapshot.val(),\r\n        ).length;\r\n        resolve(totalQuestionsNumb);\r\n      });\r\n    });\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n\r\nexport { getTotalQuestionsNumb };\r\n","import styled from 'styled-components';\r\n\r\nconst ContainerStyled = styled.div`\r\nmax-width: 85%;\r\nmin-width: 287px;\r\nmargin: 0 auto;\r\npadding: 0 5px;\r\n@media screen and (min-width: 1299.8px) {\r\n  max-width: 1190px;\r\n}\r\n`;\r\n\r\nexport { ContainerStyled };\r\n","import React, { FC } from 'react';\r\n\r\nimport { ContainerStyled } from './Container.styled';\r\n\r\ninterface IContainer {\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst Container: FC<IContainer> = ({ children }) => {\r\n  return <ContainerStyled>{children}</ContainerStyled>;\r\n};\r\n\r\nexport default Container;\r\n","import { initializeApp } from \"firebase/app\";\r\nimport { getDatabase } from \"firebase/database\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: \"quizfrontend-ac9ee.firebaseapp.com\",\r\n    databaseURL:\r\n      \"https://quizfrontend-ac9ee-default-rtdb.europe-west1.firebasedatabase.app\",\r\n    projectId: \"quizfrontend-ac9ee\",\r\n    storageBucket: \"quizfrontend-ac9ee.appspot.com\",\r\n    messagingSenderId: \"598479422146\",\r\n    appId: \"1:598479422146:web:812463d02e2684ad0bf15b\",\r\n  };\r\n  \r\n  const app = initializeApp(firebaseConfig);\r\n  const db = getDatabase(app);\r\n\r\n  export default db;","const getIdUser = <T extends string>(key: T): string => {\r\n  const value = localStorage.getItem(key);\r\n  if (value === null || value === undefined) {\r\n    throw new Error(`Value not found for key '${key}'`);\r\n  }\r\n  try {\r\n    return `${value}`;\r\n  } catch (e: unknown) {\r\n    if (e instanceof Error) {\r\n      throw new Error(`Invalid JSON data for key '${key}': ${e.message}`);\r\n    } else {\r\n      throw new Error(`Unknown error caught: ${e}`);\r\n    }\r\n  }\r\n};\r\n\r\nexport { getIdUser };\r\n","import styled from 'styled-components';\r\n\r\nconst StyleArticleDropdown = styled.article`\r\n  cursor: pointer;\r\n  position: relative;\r\n`;\r\n\r\nconst StyledButton = styled.button`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  background-color: white;\r\n  cursor: pointer;\r\n  border: 1px solid black;\r\n`;\r\n\r\nconst StyledSpan = styled.span`\r\n  color: black;\r\n  font: var(--font-little-text-regular);\r\n\r\n  @media screen and (min-width: 767.8px) {\r\n    font: var(--font-text-regular);\r\n  }\r\n`;\r\n\r\nconst StyledUl = styled.ul`\r\n  z-index: 2;\r\n  left: 0px;\r\n  top: 30px;\r\n  background-color: white;\r\n  position: absolute;\r\n  list-style-type: none;\r\n  font: var(--font-text-bold);\r\n  margin: 0;\r\n  padding: 5px 10px;\r\n  border-radius: 10px 0 0 10px;\r\n`;\r\n\r\nconst StyledImg = styled.img`\r\n  filter: invert(100);\r\n  margin-left: 4px;\r\n`;\r\n\r\nconst StyledLi = styled.li`\r\n  font: var(--font-text-regular);\r\n  &:not(:last-child) {\r\n    margin-bottom: 10px;\r\n  }\r\n`;\r\n\r\nexport {\r\n  StyleArticleDropdown,\r\n  StyledButton,\r\n  StyledUl,\r\n  StyledLi,\r\n  StyledImg,\r\n  StyledSpan,\r\n};\r\n","import { FC, CSSProperties, useEffect } from 'react';\r\nimport chevrondown from \"../../../../assets/images/chevrondown.svg\";\r\nimport {\r\n  StyleArticleDropdown,\r\n  StyledButton,\r\n  StyledUl,\r\n  StyledLi,\r\n  StyledImg,\r\n  StyledSpan,\r\n} from './Dropdown.Styled';\r\n\r\ntype DropdownProps = {\r\n  style?: CSSProperties;\r\n  selected: string;\r\n  isActive: boolean;\r\n  data: string[];\r\n  toggleListThemes?: () => void;\r\n  themeHasChoosen?: (item: string) => void;\r\n  hideListFilters: () => void;\r\n  idWrapper: string;\r\n};\r\n\r\nconst Dropdown = ({\r\n  hideListFilters,\r\n  data,\r\n  selected,\r\n  isActive,\r\n  style,\r\n  themeHasChoosen,\r\n  toggleListThemes,\r\n  idWrapper,\r\n}: DropdownProps) => {\r\n  const elementLanguages = data.map((item: string, index: number) => {\r\n    return (\r\n      <StyledLi\r\n        key={index + 1}\r\n        tabIndex={0}\r\n        onClick={() => themeHasChoosen && themeHasChoosen(item)}\r\n      >\r\n        {item}\r\n      </StyledLi>\r\n    );\r\n  });\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = (e: MouseEvent) => {\r\n      const target = e.target as HTMLElement;\r\n      if (target.tagName !== 'LI') {\r\n        hideListFilters();\r\n      }\r\n    };\r\n\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <StyleArticleDropdown style={style} id={idWrapper}>\r\n      <StyledButton onClick={toggleListThemes}>\r\n        <StyledSpan className='dropdown-btn-text'>\r\n          {selected || data[0]}\r\n        </StyledSpan>\r\n        <StyledImg\r\n          src={chevrondown}\r\n          alt='Кнопка вниз'\r\n        />\r\n      </StyledButton>\r\n      {isActive && <StyledUl>{elementLanguages}</StyledUl>}\r\n    </StyleArticleDropdown>\r\n  );\r\n};\r\n\r\nDropdown.displayName = 'Dropdown';\r\n\r\nexport default Dropdown;\r\n","import { FC, useState } from 'react';\r\n\r\nimport Dropdown from '../../UI/Dropdown/Dropdown';\r\n\r\ntype FilterByRightProps = {\r\n  setFilterByRightAnswer: (newFilter: string) => void;\r\n};\r\n\r\nconst FilterByRight: FC<FilterByRightProps> = ({ setFilterByRightAnswer }) => {\r\n  const data: string[] = ['Все вопросы', 'Верно', 'Неверно'];\r\n\r\n  const [typeAnswer, setTypeAnswer] = useState<string>(data[0]);\r\n  const [isShowList, setIsShowList] = useState<boolean>(false);\r\n\r\n  const toggleListThemes = () => {\r\n    setIsShowList((isShowList) => !isShowList);\r\n  };\r\n\r\n  const themeHasChoosen = (item: string) => {\r\n    toggleListThemes();\r\n    setTypeAnswer(item);\r\n    setFilterByRightAnswer(item);\r\n  };\r\n\r\n  const hideListFilters = () => {\r\n    setIsShowList(false);\r\n  };\r\n\r\n  return (\r\n    <Dropdown\r\n      toggleListThemes={toggleListThemes}\r\n      data={data}\r\n      selected={typeAnswer}\r\n      isActive={isShowList}\r\n      themeHasChoosen={(item: string) => themeHasChoosen(item)}\r\n      hideListFilters={hideListFilters}\r\n      idWrapper='wrapperTypeAnswer'\r\n    />\r\n  );\r\n};\r\n\r\nexport default FilterByRight;\r\n","import { useState, FC } from 'react';\r\n\r\nimport Dropdown from '../../UI/Dropdown/Dropdown';\r\n\r\ntype TFilterByThemesProps = {\r\n  themesNames: string[];\r\n  setFilterByTheme: (item: string) => void;\r\n};\r\n\r\nconst FilterByThemes: FC<TFilterByThemesProps> = ({\r\n  themesNames,\r\n  setFilterByTheme,\r\n}) => {\r\n  const [selectedTheme, setSelectedTheme] = useState<string>(themesNames[0]);\r\n  const [isShowList, setIsShowList] = useState<boolean>(false);\r\n\r\n  const toggleListThemes = () => {\r\n    setIsShowList((isShowList) => !isShowList);\r\n  };\r\n\r\n  const themeHasChoosen = (item: string) => {\r\n    toggleListThemes();\r\n    setSelectedTheme(item);\r\n    setFilterByTheme(item);\r\n  };\r\n\r\n  const hideListFilters = () => {\r\n    setIsShowList(false);\r\n  };\r\n\r\n  return (\r\n    <Dropdown\r\n      toggleListThemes={toggleListThemes}\r\n      data={themesNames}\r\n      selected={selectedTheme}\r\n      isActive={isShowList}\r\n      themeHasChoosen={(item: string) => themeHasChoosen(item)}\r\n      style={{ margin: '0 25px 0 0' }}\r\n      hideListFilters={hideListFilters}\r\n      idWrapper='wrapperThemes'\r\n    />\r\n  );\r\n};\r\n\r\nexport default FilterByThemes;\r\n","import { ref } from 'firebase/database';\r\nimport { onValue } from 'firebase/database';\r\n\r\nimport db from '../../../config/firebase/firebaseConfig';\r\n\r\nconst getAnswerOptions = async () => {\r\n  return await new Promise(function (resolve, reject) {\r\n    onValue(ref(db, 'answers'), (snapshot) => {\r\n      if (snapshot.val()) {\r\n        resolve(snapshot.val());\r\n      } else {\r\n        reject();\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\nexport { getAnswerOptions };\r\n","import { ref } from 'firebase/database';\r\nimport { onValue } from 'firebase/database';\r\n\r\nimport { getIdUser } from '../../../helpers/getIdUser';\r\nimport db from '../../../config/firebase/firebaseConfig';\r\n\r\ntype TAnswersDB = {\r\n  [key: string]: {\r\n    point: number;\r\n    quantityPause: number;\r\n    question: string;\r\n    theme: string;\r\n    userAnswer: string;\r\n  };\r\n};\r\n\r\nconst getUserAnswers = () => {\r\n  return new Promise<TAnswersDB>(function (resolve, reject) {\r\n    onValue(ref(db, `users/user${getIdUser('idUser')}/answers/`), (snapshot) => {\r\n      resolve(snapshot.val());\r\n      \r\n    });\r\n  });\r\n};\r\n\r\nexport { getUserAnswers };\r\n","import { ref } from 'firebase/database';\r\nimport { onValue } from 'firebase/database';\r\n\r\nimport db from '../../../config/firebase/firebaseConfig';\r\n\r\nconst getInfoQuestions = async () => {\r\n  return await new Promise(function (resolve, reject) {\r\n    onValue(ref(db, 'questions'), (snapshot) => {\r\n      if (snapshot.val()) {\r\n        resolve(snapshot.val());\r\n      } else {\r\n        reject();\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\nexport { getInfoQuestions };\r\n","const getNumberFromKey = (key: string): number | undefined => {\r\n  const matches = key.match(/\\d+/);\r\n  if (matches !== null) {\r\n    return parseInt(matches[0]);\r\n  }\r\n};\r\n\r\nexport { getNumberFromKey };\r\n","import type { TInfoQuestionsAndAnswers } from '../types/types';\r\n\r\nconst filterByRightAnswer = (\r\n  data: TInfoQuestionsAndAnswers,\r\n  typeAnswer: string,\r\n) => {\r\n  const transformData = Object.values(data);\r\n\r\n  switch (typeAnswer) {\r\n    case 'Верно':\r\n      return transformData.filter(\r\n        (question) => question?.userAnswer?.point === 1,\r\n      );\r\n    case 'Неверно':\r\n      return transformData.filter(\r\n        (question) => question?.userAnswer?.point === 0,\r\n      );\r\n    default:\r\n      return transformData;\r\n  }\r\n};\r\n\r\nexport default filterByRightAnswer;\r\n","import { getThemesNames } from './getThemesNames';\r\n\r\nimport type { TInfoQuestionsAndAnswers } from '../types/types';\r\n\r\nconst getThemes = (\r\n  infoQuestionsAndAnswers: TInfoQuestionsAndAnswers,\r\n): [string, ...string[]] => {\r\n  if (infoQuestionsAndAnswers) {\r\n    return getThemesNames(infoQuestionsAndAnswers);\r\n  } else {\r\n    return ['Все тематики'];\r\n  }\r\n};\r\n\r\nexport default getThemes;\r\n","type TUserAnswer = {\r\n  point: number;\r\n  userAnswer: string;\r\n};\r\n\r\ntype TAnswerOption = {\r\n  [key: string]: string;\r\n};\r\n\r\ntype TQuestionAndAnswer = {\r\n  descr: string;\r\n  name: string;\r\n  rightAnswer: string;\r\n  theme: string;\r\n  img: string;\r\n  answerOptions: TAnswerOption;\r\n  userAnswer: TUserAnswer;\r\n};\r\n\r\ntype TInfoQuestionsAndAnswers = {\r\n  [key: number]: TQuestionAndAnswer;\r\n};\r\n\r\nconst getThemesNames = (\r\n  infoQuestionsAndAnswers: TInfoQuestionsAndAnswers,\r\n): [string, ...string[]] => {\r\n  const themesNames = new Set(['Все тематики']);\r\n  const allThemes = Object.values(infoQuestionsAndAnswers).map(\r\n    (infoQuestion) => infoQuestion.theme,\r\n  );\r\n  allThemes.forEach((theme) => themesNames.add(theme));\r\n\r\n  return Array.from(themesNames) as [string, ...string[]];\r\n};\r\n\r\nexport { getThemesNames };\r\n","import getThemes from './getThemes';\r\n\r\nimport type { TInfoQuestionsAndAnswers } from '../types/types';\r\n\r\nconst filterByThemes = (\r\n  data: TInfoQuestionsAndAnswers,\r\n  filter: string,\r\n): TInfoQuestionsAndAnswers => {\r\n  const transformData = Object.values(data);\r\n  const themes = getThemes(data).filter((item, index) => index > 0);\r\n\r\n  for (let i = 0; i < themes.length; i++) {\r\n    if (filter === themes[i]) {\r\n      return transformData.filter((question) => question.theme === themes[i]);\r\n    }\r\n  }\r\n\r\n  return transformData;\r\n};\r\n\r\nexport default filterByThemes;\r\n","import getThemes from './getThemes';\r\n\r\nimport type { TInfoQuestionsAndAnswers } from '../types/types';\r\nimport type { TPointsByThemes } from '../../../types/types';\r\n\r\nconst getPointsByThemes = (data: TInfoQuestionsAndAnswers): TPointsByThemes => {\r\n  const themes = getThemes(data).filter((item, i) => i > 0);\r\n  const updateData = Object.values(data).map((item) => ({\r\n    theme: item.theme,\r\n    point: item.userAnswer.point,\r\n  }));\r\n  const pointsByThemes = {};\r\n\r\n  for (const theme of themes) {\r\n    for (const key in updateData) {\r\n      if (theme === updateData[key].theme) {\r\n        if (!pointsByThemes[theme]) {\r\n          pointsByThemes[theme] = { totalPoints: 0, totalQuantityQuestions: 0 };\r\n        }\r\n        pointsByThemes[theme].totalPoints += updateData[key].point;\r\n        pointsByThemes[theme].totalQuantityQuestions += 1;\r\n      }\r\n    }\r\n  }\r\n  return pointsByThemes;\r\n};\r\n\r\nexport default getPointsByThemes;\r\n","import styled from 'styled-components';\r\n\r\ninterface ISpan {\r\n  isRight: boolean;\r\n}\r\n\r\nconst StyledLi = styled.li`\r\n  box-sizing: border-box;\r\n  list-style-type: none;\r\n  font: var(--font-little-text-regular);\r\n\r\n  &:not(:last-child) {\r\n    margin-bottom: 10px;\r\n  }\r\n  @media screen and (min-width: 767.8px) {\r\n    font: var(--font-text-regular);\r\n\r\n    &:not(:last-child) {\r\n      margin-bottom: 20px;\r\n    }\r\n  }\r\n`;\r\nconst StyledListAnswers = styled.li`\r\n  box-sizing: border-box;\r\n  word-wrap: break-word;\r\n  list-style-type: none;\r\n  font: var(--font-little-text-regular);\r\n  padding: 0 10px;\r\n\r\n  &:not(:last-child) {\r\n    margin-bottom: 10px;\r\n  }\r\n  @media screen and (min-width: 767.8px) {\r\n    font: var(--font-text-regular);\r\n\r\n    &:not(:last-child) {\r\n      margin-bottom: 20px;\r\n    }\r\n  }\r\n`;\r\n\r\nconst StyledUl = styled.ul`\r\n  width: 100%;\r\n  box-sizing: border-box;\r\n  margin: 0;\r\n  padding: 8px 0 17px 0;\r\n  position: relative;\r\n`;\r\n\r\nconst StyledSum = styled.summary`\r\n  box-sizing: border-box;\r\n  width: 100%;\r\n  background-color: var(--color-title-background);\r\n  font: var(--font-little-text-regular);\r\n  color: #fff;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 10px 0;\r\n  margin: 0 0 10px 0;\r\n\r\n  @media screen and (min-width: 459.8px) {\r\n    font: var(--font-title4);\r\n    justify-content: flex-start;\r\n    padding: 10px 0 10px 40px;\r\n  }\r\n`;\r\n\r\nconst StyledSpan = styled.span`\r\n  font: var(--font-little-text-bold);\r\n\r\n  @media screen and (min-width: 767.8px) {\r\n    font: var(--font-text-bold);\r\n  }\r\n`;\r\n\r\nconst StyledSection = styled.section`\r\n  margin: 24px 0 18px 0;\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: start;\r\n`;\r\n\r\nconst StyledSpanResult = styled.span<ISpan>`\r\n  position: absolute;\r\n  color: ${({ isRight }) => (isRight ? 'green' : 'red')};\r\n  top: 5px;\r\n  right: 0;\r\n\r\n  font: var(--font-little-text-bold);\r\n\r\n  @media screen and (min-width: 767.8px) {\r\n    font: var(--font-text-bold);\r\n  }\r\n`;\r\n\r\nexport {\r\n  StyledLi,\r\n  StyledUl,\r\n  StyledSpan,\r\n  StyledListAnswers,\r\n  StyledSpanResult,\r\n  StyledSum,\r\n  StyledSection,\r\n};\r\n","import UserAnswers from './UserAnswers/UserAnswers';\r\n\r\nexport default UserAnswers;\r\n","import { useState, FC, useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport Container from '../../../components/Container/Container';\r\nimport FilterByRight from '../components/FilterByRight/FilterByRight';\r\nimport FilterByThemes from '../components/FilterByThemes/FilterByThemes';\r\nimport { getAnswerOptions } from '../api/getAnswerOptions';\r\nimport { getUserAnswers } from '../api/getUserAnswers';\r\nimport { getInfoQuestions } from '../api/getInfoQuestions';\r\nimport Spinner from '../../../UI/Spinner/Spinner';\r\nimport { getNumberFromKey } from '../helpers/getNumberFromKey';\r\nimport filterByRightAnswer from '../helpers/filterByRightAnswer';\r\nimport filterByThemes from '../helpers/filterByThemes';\r\nimport getThemes from '../helpers/getThemes';\r\nimport getPointsByThemes from '../helpers/getPointsByThemes';\r\n\r\nimport {\r\n  StyledLi,\r\n  StyledListAnswers,\r\n  StyledUl,\r\n  StyledSpan,\r\n  StyledSpanResult,\r\n  StyledSum,\r\n  StyledSection,\r\n} from './UserAnswers.Styled';\r\n\r\nimport type {\r\n  TInfoQuestionsAndAnswers,\r\n  TAnswersDB,\r\n  TAnswerOptionsLangDB,\r\n  TInfoQuiestionsDB,\r\n  TQuestionAndAnswer,\r\n} from '../types/types';\r\nimport type { TPointsByThemes } from '../../../types/types';\r\n\r\ntype UserAnwersProps = {\r\n  setPointsByTheme: (themes: TPointsByThemes) => void;\r\n  lang: string,\r\n};\r\nconst UserAnswers: FC<UserAnwersProps> = ({ setPointsByTheme, lang }) => {\r\n  const { t } = useTranslation();\r\n  const [infoQuestionsAndAnswers, setInfoQuestionsAndAnswers] =\r\n    useState<null | TInfoQuestionsAndAnswers>(null);\r\n  const [isError, setIsError] = useState<boolean>(false);\r\n  const [isLoading, setIsLoading] = useState<boolean>(true);\r\n  const [filterTheme, setFilterTheme] = useState<string>('');\r\n  const [filterRight, setFilterRight] = useState<string>('');\r\n\r\n  const errorMessage = 'ERORR!';\r\n  const loading = isLoading ? (\r\n    <Spinner width={50} height={50} color={'#1f2ce0'} margin='0 auto' />\r\n  ) : (\r\n    false\r\n  );\r\n  const error = isError ? errorMessage : false;\r\n  const view = () => {\r\n    if (infoQuestionsAndAnswers) {\r\n      const visibleData: TInfoQuestionsAndAnswers = filterByRightAnswer(\r\n        filterByThemes(infoQuestionsAndAnswers, filterTheme),\r\n        filterRight,\r\n      );\r\n      return (\r\n        <StyledUl>\r\n          {Object.entries(visibleData as TQuestionAndAnswer[]).map(\r\n            (userAnswerArr, index) => {\r\n              const {\r\n                descr,\r\n                img,\r\n                id,\r\n                name,\r\n                rightAnswer,\r\n                theme,\r\n                answerOptions,\r\n                userAnswer,\r\n              } = userAnswerArr[1];\r\n              const isRight = userAnswer.point ? true : false;\r\n              const color = isRight ? 'green' : 'red';\r\n              const className = {\r\n                borderRadius: 10,\r\n                border: `1px solid ${color}`,\r\n              };\r\n\r\n              return (\r\n                <StyledListAnswers style={className} key={index + 1}>\r\n                  <StyledUl>\r\n                    <StyledSpanResult isRight={isRight}>\r\n                      {isRight ? '\\u2714' : '\\u2718'}\r\n                    </StyledSpanResult>\r\n                    <StyledLi>\r\n                      <StyledSpan>{`Вопрос № ${id}: `}</StyledSpan>\r\n                      {`${name} (${theme})`}\r\n                    </StyledLi>\r\n                    {img === 'No' ? (\r\n                      false\r\n                    ) : (\r\n                      <StyledLi>\r\n                        <img\r\n                          style={{ maxWidth: '100%' }}\r\n                          src={img}\r\n                          alt='code'\r\n                        />\r\n                      </StyledLi>\r\n                    )}\r\n                    <StyledLi>\r\n                      <StyledSpan>{`${t('Варианты_ответов')}: `}</StyledSpan>\r\n                      {Object.entries(answerOptions)\r\n                        .map(([key, value]) => `${key}: ${value}`)\r\n                        .join(', ')}\r\n                    </StyledLi>\r\n                    <StyledLi>\r\n                      <StyledSpan>{`${t('Ваш_ответ')}: `}</StyledSpan>{' '}\r\n                      {userAnswer.userAnswer}\r\n                    </StyledLi>\r\n                    {isRight ? (\r\n                      false\r\n                    ) : (\r\n                      <StyledLi>\r\n                        <StyledSpan>{`${t('Правильный_ответ')}: `}</StyledSpan>\r\n                        {rightAnswer}\r\n                      </StyledLi>\r\n                    )}\r\n                    <StyledLi>\r\n                      <StyledSpan>{`${t('Объяснение')}: `} </StyledSpan>\r\n                      {descr}\r\n                    </StyledLi>\r\n                  </StyledUl>\r\n                </StyledListAnswers>\r\n              );\r\n            },\r\n          )}\r\n        </StyledUl>\r\n      );\r\n    }\r\n  };\r\n  const content = !(isLoading || isError) ? view() : null;\r\n\r\n  const transformUserAnswers = (res: TAnswersDB) => {\r\n    const updateUserAnswers = Object.fromEntries(\r\n      Object.entries(res).map(([key, value]) => [\r\n        getNumberFromKey(key),\r\n        { point: value.point, userAnswer: value.userAnswer },\r\n      ]),\r\n    );\r\n    return updateUserAnswers;\r\n  };\r\n\r\n  const transformData = (res: TAnswerOptionsLangDB | TInfoQuiestionsDB, lang: string) => {\r\n     const updateAnswerOptions = Object.fromEntries(\r\n      Object.entries(res).map(([key, value]) => [\r\n        \r\n        getNumberFromKey(key),\r\n        value[`${lang}`],\r\n      ]),\r\n    );\r\n    return updateAnswerOptions;\r\n  };\r\n\r\n  const transformQuestionsAndAnswersDB = (\r\n    res: (TAnswersDB | TAnswerOptionsLangDB | TInfoQuiestionsDB)[],\r\n  ) => {\r\n    const [userAnswers, answerOptions, infoQuestions] = res;\r\n\r\n    const data = {\r\n      userAnswers: transformUserAnswers(userAnswers as TAnswersDB),\r\n      answerOptions: transformData(answerOptions as TAnswerOptionsLangDB, lang),\r\n      infoQuestions: transformData(infoQuestions as TInfoQuiestionsDB, lang),\r\n    };\r\n\r\n    const generalInfo = {};\r\n\r\n    for (const key in data.infoQuestions) {\r\n      generalInfo[key] = {\r\n        ...data.infoQuestions[key],\r\n        userAnswer: data.userAnswers[key],\r\n        answerOptions: data.answerOptions[key],\r\n      };\r\n    }\r\n\r\n    setInfoQuestionsAndAnswers(generalInfo);\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const onError = (error: any): never => {\r\n    setIsError((isError) => !isError);\r\n    throw new Error(error);\r\n  };\r\n\r\n  const setFilterByTheme = (newFilter: string): void => {\r\n    setFilterTheme(newFilter);\r\n  };\r\n\r\n  const setFilterByRightAnswer = (newFilter: string): void => {\r\n    setFilterRight(newFilter);\r\n  };\r\n\r\n  useEffect(() => {\r\n    Promise.all([getUserAnswers(), getAnswerOptions(), getInfoQuestions()])\r\n      .then((value) =>\r\n        transformQuestionsAndAnswersDB(\r\n          value as (TAnswersDB | TAnswerOptionsLangDB | TInfoQuiestionsDB)[],\r\n        ),\r\n      )\r\n      .catch(onError);\r\n  }, [lang]);\r\n\r\n  useEffect(() => {\r\n    if (infoQuestionsAndAnswers) {\r\n      setPointsByTheme(getPointsByThemes(infoQuestionsAndAnswers));\r\n    }\r\n  }, [infoQuestionsAndAnswers]);\r\n\r\n  return (\r\n    <Container>\r\n      <details open>\r\n        <StyledSum>{t('Ответы')}</StyledSum>\r\n        <StyledSection>\r\n          <FilterByThemes\r\n            themesNames={getThemes(\r\n              infoQuestionsAndAnswers as TInfoQuestionsAndAnswers,\r\n            )}\r\n            setFilterByTheme={setFilterByTheme}\r\n          />\r\n          <FilterByRight setFilterByRightAnswer={setFilterByRightAnswer} />\r\n        </StyledSection>\r\n        {loading} {error} {content}\r\n      </details>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default UserAnswers;\r\n","import styled from 'styled-components';\r\n\r\nconst StyledArticle = styled.article`\r\n  box-sizing: border-box;\r\n  background-color: #ffffff;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 16px 8px 9px 8px;\r\n  max-height: 520px;\r\n\r\n  &:not(list-child) {\r\n    margin: 0 0 24px 0;\r\n  }\r\n\r\n  @media screen and (min-width: 767.8px) {\r\n    &:not(list-child) {\r\n      margin: 0;\r\n    }\r\n  }\r\n`;\r\n\r\nconst StyledP = styled.article`\r\n  font: var(--font-little-text-regular);\r\n  color: #29313c;\r\n  text-align: justify;\r\n  margin: 12px 0 0 0;\r\n\r\n  @media screen and (min-width: 767.8px) {\r\n    margin: 12px 0 42px 0;\r\n  }\r\n\r\n  @media screen and (min-width: 1023.8px) {\r\n    margin: 12px 0 33px 0;\r\n  }\r\n\r\n  @media screen and (min-width: 1265.8px) {\r\n    margin: 12px 0 15px 0;\r\n  }\r\n`;\r\n\r\nconst StyledDoughuntWrapper = styled.div`\r\n  position: relative;\r\n  width: 265px;\r\n  height: 265px;\r\n\r\n  @media screen and (min-width: 767.8px) {\r\n    // width: 200px;\r\n    // height: 200px;\r\n  }\r\n`;\r\n\r\nconst StyledSpan = styled.span`\r\n  position: absolute;\r\n  left: 50%;\r\n  top: 50%;\r\n  transform: translate(-50%, -25%);\r\n  font-family: 'Inter';\r\n  font-style: normal;\r\n  font-weight: 800;\r\n  font-size: 39px;\r\n  line-height: 60px;\r\n  color: #6768d7;\r\n`;\r\n\r\nexport { StyledArticle, StyledP, StyledSpan, StyledDoughuntWrapper };\r\n","import { FC } from 'react';\r\nimport {\r\n  Chart as ChartJS,\r\n  ArcElement,\r\n  Tooltip,\r\n  Legend,\r\n  LinearScale,\r\n} from 'chart.js';\r\nimport { Doughnut } from 'react-chartjs-2';\r\n\r\nChartJS.register(ArcElement, Tooltip, Legend, LinearScale);\r\n\r\ntype PiechartProps = {\r\n  dataPieChart: number[];\r\n};\r\n\r\nconst ChartDoughnut: FC<PiechartProps> = ({ dataPieChart }) => {\r\n  const data = {\r\n    labels: ['Верно', 'Неверно'],\r\n    datasets: [\r\n      {\r\n        label: '%',\r\n        data: dataPieChart,\r\n        backgroundColor: ['green', 'red'],\r\n        borderColor: ['green', 'red'],\r\n        cutout: '75%',\r\n        borderWidth: 1,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return <Doughnut data={data}></Doughnut>;\r\n};\r\n\r\nexport default ChartDoughnut;\r\n","import Doughunt from './Doughunt';\r\n\r\nexport default Doughunt;\r\n","import { FC, useState, useEffect } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\n\r\nimport {\r\n  StyledArticle,\r\n  StyledP,\r\n  StyledSpan,\r\n  StyledDoughuntWrapper,\r\n} from './Doughunt.Styled';\r\n\r\nimport { getTotalQuestionsNumb } from '../../api/getTotalQuestionsNumb';\r\nimport ChartDoughnut from '../../components/ChartDoughnut/ChartDoughnut';\r\nimport Spinner from '../../UI/Spinner/Spinner';\r\n\r\ntype DoughnutProps = {\r\n  rightAnswers: number;\r\n};\r\n\r\nconst Doughnut: FC<DoughnutProps> = ({ rightAnswers }) => {\r\n  const { t } = useTranslation();\r\n\r\n  const [totalQuestionNumbers, setTotalQuestionNumbers] = useState<number>(0);\r\n  const percentRightQuestions = +(\r\n    (100 * rightAnswers) /\r\n    totalQuestionNumbers\r\n  ).toFixed(1);\r\n  const percentWrongQuestions = +(100 - percentRightQuestions).toFixed(1);\r\n  const [isLoading, setIsLoading] = useState<boolean>(true);\r\n\r\n  const view = () => {\r\n    return (\r\n      <StyledArticle>\r\n        <StyledDoughuntWrapper>\r\n          <ChartDoughnut\r\n            dataPieChart={[percentRightQuestions, percentWrongQuestions]}\r\n          />\r\n          <StyledSpan>{`${percentRightQuestions} %`}</StyledSpan>\r\n        </StyledDoughuntWrapper>\r\n        <StyledP>\r\n          {t(\"Подпись_круговая_диаграмма\")}\r\n        </StyledP>\r\n      </StyledArticle>\r\n    );\r\n  };\r\n  const spinner = isLoading ? (\r\n    <Spinner width={50} height={50} color={'#1f2ce0'} margin='0 auto' />\r\n  ) : null;\r\n  const content = !isLoading ? view() : null;\r\n\r\n  useEffect(() => {\r\n    getTotalQuestionsNumb().then((res) => {\r\n      if (res) {\r\n        setTotalQuestionNumbers(res);\r\n        setIsLoading(false);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {spinner} {content}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Doughnut;\r\n","import styled from 'styled-components';\r\n\r\nconst StyledSection = styled.section`\r\n  background-color: #ffffff;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 0 20px 3px 20px;\r\n  position: relative;\r\n\r\n  &:after {\r\n    position: absolute;\r\n    content: '';\r\n    height: 1px;\r\n    color: #dfe4e9;\r\n    background-color: #dfe4e9;\r\n    width: 256px;\r\n    transform: translateX(-50%) translateY(-50%);\r\n    top: 50%;\r\n    left: 50%;\r\n  }\r\n\r\n  @media screen and (min-width: 767.8px) {\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    height: 185px;\r\n\r\n    &:after {\r\n      transform: rotate(90deg);\r\n      width: 102px;\r\n      left: 43%;\r\n    }\r\n  }\r\n\r\n  @media screen and (min-width: 1439.8px) {\r\n    &:after {\r\n      left: 45.5%;\r\n    }\r\n  }\r\n`;\r\n\r\nconst StyledArticle = styled.article`\r\n  text-align: center;\r\n  padding: 16px 0;\r\n\r\n  @media screen and (min-width: 767.8px) {\r\n    flex-basis: 50%;\r\n  }\r\n`;\r\n\r\nconst StyledH3 = styled.h3`\r\n  color: #29313c;\r\n  font: var(--font-title5);\r\n  margin: 0;\r\n  padding: 0;\r\n`;\r\n\r\nconst StyledH2 = styled.h2`\r\n  color: #6768d7;\r\n  font: var(--font-title2);\r\n  margin: 0;\r\n  padding: 0;\r\n`;\r\n\r\nexport { StyledSection, StyledH2, StyledH3, StyledArticle };\r\n","import FinalResult from './FinalResult';\r\n\r\nexport default FinalResult;\r\n","import { FC, useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport Spinner from '../../UI/Spinner/Spinner';\r\nimport { getTotalQuestionsNumb } from '../../api/getTotalQuestionsNumb';\r\n\r\nimport { getUserAnswers } from './api/getUserAnswers';\r\nimport { StyledH2, StyledH3, StyledArticle } from './FinalResult.Styled';\r\n\r\ntype FinalResultProps = {\r\n  setRightAnswers: (points: number) => void;\r\n};\r\n\r\nconst FinalResult: FC<FinalResultProps> = ({ setRightAnswers }) => {\r\n  const { t } = useTranslation();\r\n\r\n  type TState = {\r\n    points:\r\n      | {\r\n          [key: string]: number;\r\n        }\r\n      | false\r\n      | null;\r\n    error: boolean;\r\n    loading: boolean;\r\n    totalQuestionNumbers: number | false | null;\r\n  };\r\n\r\n  type TAnswersDB = {\r\n    [key: string]: {\r\n      point: number;\r\n      quantityPause: number;\r\n      question: string;\r\n      theme: string;\r\n      userAnswer: string;\r\n    };\r\n  };\r\n\r\n  const [state, setState] = useState<TState>({\r\n    error: false,\r\n    loading: true,\r\n    points: false,\r\n    totalQuestionNumbers: false,\r\n  });\r\n\r\n  const ansewrsTransform = (\r\n    response: TAnswersDB | null,\r\n  ): TState['points'] | null => {\r\n    if (response) {\r\n      const points = Object.fromEntries(\r\n        Object.entries({ ...response }).map(([key, value]) => [\r\n          key,\r\n          value.point,\r\n        ]),\r\n      );\r\n      return points;\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const getTotalPoints = (points: false | TState['points'] | null): number => {\r\n    if (points) {\r\n      return Object.values(points).reduce((sum, curr) => sum + curr, 0);\r\n    } else return 0;\r\n  };\r\n\r\n  const dataHasLoaded = (data: any) => {\r\n    type TdataInfo = {\r\n      points: TState['points'];\r\n      totalQuestionNumbers: TState['totalQuestionNumbers'];\r\n    };\r\n\r\n    const dataInfo: TdataInfo = {\r\n      points: false,\r\n      totalQuestionNumbers: false,\r\n    };\r\n\r\n    const [totalQuestionNumbers, answers] = data;\r\n\r\n    dataInfo.points = ansewrsTransform(answers.value);\r\n    dataInfo.totalQuestionNumbers = totalQuestionNumbers.value\r\n      ? totalQuestionNumbers.value\r\n      : totalQuestionNumbers.value === false\r\n      ? false\r\n      : null;\r\n\r\n    setState(function (state) {\r\n      const { totalQuestionNumbers, points } = dataInfo;\r\n\r\n      return {\r\n        ...state,\r\n        totalQuestionNumbers,\r\n        points,\r\n        loading: false,\r\n      };\r\n    });\r\n    setRightAnswers(getTotalPoints(dataInfo.points));\r\n\r\n    for (const key in dataInfo) {\r\n      if (dataInfo[key] === null) {\r\n        throw new Error(\r\n          `The value of ${key} is ${dataInfo[key]} in ${dataInfo}`,\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  const onError = (error: any): never => {\r\n    setState((state) => ({ ...state, loading: false, error: true }));\r\n    throw new Error(error);\r\n  };\r\n\r\n  useEffect(() => {\r\n    Promise.allSettled([getTotalQuestionsNumb(), getUserAnswers()])\r\n      .then(dataHasLoaded)\r\n      .catch(onError);\r\n  }, []);\r\n\r\n  const view = () => {\r\n    return (\r\n      <StyledArticle>\r\n        <StyledH3>{t('Ваш_результат')}</StyledH3>\r\n        <StyledH2>\r\n          {`${getTotalPoints(state.points)} ${t('из')} ${ state.totalQuestionNumbers}`}\r\n        </StyledH2>\r\n      </StyledArticle>\r\n    );\r\n  };\r\n\r\n  const spinner = state.loading ? (\r\n    <Spinner width={50} height={50} color={'#1f2ce0'} margin='0 auto' />\r\n  ) : (\r\n    false\r\n  );\r\n  const errorMessage = 'ERROR!';\r\n  const error = state.error ? errorMessage : false;\r\n  const content = !(state.loading || state.error) ? view() : false;\r\n\r\n  return (\r\n    <>\r\n      {spinner} {error} {content}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FinalResult;\r\n","import { ref } from 'firebase/database';\r\nimport { onValue } from 'firebase/database';\r\n\r\nimport { getIdUser } from '../../../helpers/getIdUser';\r\nimport db from '../../../config/firebase/firebaseConfig';\r\n\r\ntype TAnswersDB = {\r\n  [key: string]: {\r\n    point: number;\r\n    quantityPause: number;\r\n    question: string;\r\n    theme: string;\r\n    userAnswer: string;\r\n  };\r\n};\r\n\r\nconst getUserAnswers = () => {\r\n  return new Promise<TAnswersDB>(function (resolve, reject) {\r\n    onValue(ref(db, `users/user${getIdUser('idUser')}/answers`), (snapshot) => {\r\n      resolve(snapshot.val());\r\n    });\r\n  });\r\n};\r\n\r\nexport { getUserAnswers };\r\n","import styled from 'styled-components';\r\n\r\nconst StyledArticle = styled.article`\r\n  text-align: center;\r\n  padding: 16px 0;\r\n\r\n  @media screen and (min-width: 767.8px) {\r\n    flex-basis: 50%;\r\n  }\r\n`;\r\n\r\nconst StyledH3 = styled.h3`\r\n  color: #29313c;\r\n  font: var(--font-title5);\r\n  margin: 0;\r\n  padding: 0;\r\n`;\r\n\r\nconst StyledH2 = styled.h2`\r\n  color: #6768d7;\r\n  font: var(--font-title2);\r\n  margin: 0;\r\n  padding: 0;\r\n`;\r\n\r\nexport { StyledH2, StyledH3, StyledArticle };\r\n","const transformSecondsToMinutes = (seconds: unknown, sec: string, min: string): string | false | null => {\r\n\r\n  let result = '';\r\n\r\n  if (typeof seconds === 'number') {\r\n    if (seconds % 60 === 0) {\r\n      result = `${seconds / 60} ${sec}`;\r\n    } else if (seconds < 60) {\r\n      result = `${seconds}  ${sec}`;\r\n    } else if (seconds > 60) {\r\n      const minutes = Math.floor(seconds / 60);\r\n      const leftSeconds = seconds - minutes * 60;\r\n      result = `${minutes}  ${min} ${leftSeconds}  ${sec}`;\r\n    }\r\n    return result;\r\n  } else if (typeof seconds === 'boolean') {\r\n    return false;\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport { transformSecondsToMinutes };\r\n","import SpentTime from './SpentTime';\r\n\r\nexport default SpentTime;\r\n","import { FC, useEffect, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport {\r\n  StyledH2,\r\n  StyledH3,\r\n  StyledArticle,\r\n} from '../SpentTime/SpentTime.Styled';\r\nimport Spinner from '../../UI/Spinner/Spinner';\r\n\r\nimport { getUserInfo } from './api/getUserInfo';\r\nimport { transformSecondsToMinutes } from './helpers/transformSecondsToMinutes';\r\n\r\nconst SpentTime: FC = () => {\r\n  const { t } = useTranslation();\r\n\r\n  type TState = {\r\n    loading: boolean;\r\n    error: boolean;\r\n    time: number | false | null;\r\n  };\r\n\r\n  type TUserInfoDB = {\r\n    name: string;\r\n    email: string;\r\n    quiantityPause: number;\r\n    time: number;\r\n  };\r\n\r\n  const [state, setState] = useState<TState>({\r\n    loading: true,\r\n    error: false,\r\n    time: 0,\r\n  });\r\n\r\n  const timeHasLoaded = (userInfo: TUserInfoDB) => {\r\n    const { time } = userInfo;\r\n    setState((state) => ({ ...state, loading: false, time }));\r\n  };\r\n\r\n  const view = () => {\r\n    return (\r\n      <StyledArticle>\r\n        <StyledH3>{t(\"Затраченное_время\")}</StyledH3>\r\n        <StyledH2>{transformSecondsToMinutes(state.time, t('сек'), t('мин'))}</StyledH2>\r\n      </StyledArticle>\r\n    );\r\n  };\r\n  const spinner = state.loading ? (\r\n    <Spinner width={50} height={50} color={'#1f2ce0'} margin='0 auto' />\r\n  ) : (\r\n    false\r\n  );\r\n  const errorMessage = 'ERROR!';\r\n  const error = state.error ? errorMessage : false;\r\n  const content = !(state.loading || state.error) ? view() : false;\r\n\r\n  const onError = (error: any): never => {\r\n    setState((state) => ({ ...state, loading: false, error: true }));\r\n    throw new Error(error);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getUserInfo().then(timeHasLoaded).catch(onError);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {spinner} {error} {content}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SpentTime;\r\n","import { ref } from 'firebase/database';\r\nimport { onValue } from 'firebase/database';\r\n\r\nimport { getIdUser } from '../../../helpers/getIdUser';\r\nimport db from '../../../config/firebase/firebaseConfig';\r\n\r\ntype TUserInfoDB = {\r\n  name: string;\r\n  email: string;\r\n  quiantityPause: number;\r\n  time: number;\r\n};\r\n\r\nconst getUserInfo = () => {\r\n  return new Promise<TUserInfoDB>(function (resolve, reject) {\r\n    onValue(\r\n      ref(db, `users/user${getIdUser('idUser')}/userInfo`),\r\n      (snapshot) => {\r\n        resolve(snapshot.val());\r\n      },\r\n    );\r\n  });\r\n};\r\n\r\nexport { getUserInfo };\r\n","import { FC, useState, useEffect, memo } from 'react';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nimport Spinner from '../../UI/Spinner/Spinner';\r\n\r\nimport type { TPointsByThemes } from '../../types/types';\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n);\r\n\r\ntype BarChartProps = {\r\n  pointsByTheme: TPointsByThemes | null;\r\n};\r\n\r\nconst BarChart: FC<BarChartProps> = ({ pointsByTheme }) => {\r\n  const [isLoading, setIsLoading] = useState<boolean>(true);\r\n  const colors = ['black', 'red', 'blue'];\r\n\r\n  const options = {\r\n    maintainAspectRatio: false,\r\n    plugins: {\r\n      legend: {\r\n        position: 'bottom' as const,\r\n        align: 'start' as const,\r\n      },\r\n      title: {\r\n        display: false,\r\n      },\r\n    },\r\n    scales: {\r\n      y: {\r\n        ticks: {\r\n          stepSize: 20,\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  const data = {\r\n    labels: [''],\r\n    datasets: pointsByTheme\r\n      ? Object.entries(pointsByTheme).map((item, index) => {\r\n          const percentOfTheme = +(\r\n            (item[1].totalPoints / item[1].totalQuantityQuestions) *\r\n            100\r\n          ).toFixed();\r\n          const shortNameTheme =\r\n            item[0].length > 25 ? `${item[0].slice(0, 25)}...` : item[0];\r\n\r\n          return {\r\n            label: `${percentOfTheme} % - ${shortNameTheme}`,\r\n            data: [percentOfTheme],\r\n            backgroundColor: colors[index],\r\n          };\r\n        })\r\n      : [],\r\n  };\r\n\r\n  const spinner = isLoading ? (\r\n    <Spinner width={50} height={50} color={'#1f2ce0'} margin='0 auto' />\r\n  ) : null;\r\n  const content = !isLoading ? <Bar options={options} data={data} /> : null;\r\n\r\n  useEffect(() => {\r\n    if (pointsByTheme) {\r\n      setIsLoading(false);\r\n    }\r\n  }, [pointsByTheme]);\r\n\r\n  return (\r\n    <>\r\n      {content} {spinner}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default memo(BarChart);\r\n","import styled from 'styled-components';\r\n\r\nconst StyledArticle = styled.article`\r\n  box-sizing: border-box;\r\n  background-color: #ffffff;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  max-height: 575px;\r\n  width: 100%;\r\n  height: 100%;\r\n  padding: 16px 8px 9px 8px;\r\n\r\n  &:not(list-child) {\r\n    margin: 0 0 24px 0;\r\n  }\r\n\r\n  @media screen and (min-width: 767.8px) {\r\n    max-width: 50%;\r\n\r\n    &:not(list-child) {\r\n      margin: 0;\r\n    }\r\n  }\r\n  @media screen and (min-width: 1023.8px) {\r\n    padding: 25px 8px 15px 8px;\r\n  }\r\n`;\r\n\r\nconst StyledP = styled.article`\r\n  font: var(--font-little-text-regular);\r\n  color: #29313c;\r\n  text-align: justify;\r\n  margin: 12px 0 0 0;\r\n`;\r\n\r\nconst StyledBarChartWrapper = styled.span`\r\n  position: relative;\r\n  width: 100%;\r\n  height: 220px;\r\n  max-width: 525px;\r\n`;\r\n\r\nexport { StyledArticle, StyledP, StyledBarChartWrapper };\r\n","import ChartBar from './BarChart';\r\n\r\nexport default ChartBar;\r\n","import { FC } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport BarChart from '../../components/BarChart/BarChart';\r\n\r\nimport {\r\n  StyledArticle,\r\n  StyledP,\r\n  StyledBarChartWrapper,\r\n} from './BarChart.Styled';\r\n\r\nimport type { TPointsByThemes } from '../../types/types';\r\n\r\ntype ChartBarProps = {\r\n  pointsByTheme: TPointsByThemes | null;\r\n};\r\nconst ChartBar: FC<ChartBarProps> = ({ pointsByTheme }) => {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <StyledArticle>\r\n      <StyledBarChartWrapper>\r\n        <BarChart pointsByTheme={pointsByTheme} />\r\n      </StyledBarChartWrapper>\r\n      <StyledP>\r\n        {t(\"Подпись_столбчатая_диаграмма\")}\r\n        \r\n      </StyledP>\r\n    </StyledArticle>\r\n  );\r\n};\r\n\r\nexport default ChartBar;\r\n","import styled from 'styled-components';\r\n\r\nconst StyledSection = styled.section`\r\n  box-sizing: border-box;\r\n  margin: 18px 0 24px 0;\r\n\r\n  @media screen and (min-width: 767.8px) {\r\n    display: flex;\r\n    align-items: flex-start;\r\n    justify-content: space-between;\r\n    gap: 20px;\r\n  }\r\n`;\r\n\r\nconst StyledSectionResults = styled.section`\r\n  background-color: #ffffff;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 0 20px 3px 20px;\r\n  position: relative;\r\n\r\n  &:after {\r\n    position: absolute;\r\n    content: '';\r\n    height: 1px;\r\n    color: #dfe4e9;\r\n    background-color: #dfe4e9;\r\n    width: 256px;\r\n    transform: translateX(-50%) translateY(-50%);\r\n    top: 50%;\r\n    left: 50%;\r\n  }\r\n\r\n  @media screen and (min-width: 767.8px) {\r\n    flex-direction: row;\r\n    justify-content: space-between;\r\n    height: 185px;\r\n\r\n    &:after {\r\n      transform: rotate(90deg);\r\n      width: 102px;\r\n      left: 43%;\r\n    }\r\n  }\r\n\r\n  @media screen and (min-width: 1439.8px) {\r\n    &:after {\r\n      left: 45.5%;\r\n    }\r\n  }\r\n`;\r\n\r\nexport { StyledSection, StyledSectionResults };\r\n","import { useState, useCallback, FC } from 'react';\r\n\r\nimport HeaderResult from '../../modules/HeaderResult/index';\r\nimport { StyledMain } from '../../styles/Main.Styled';\r\nimport UserAnswers from '../../modules/UserAnswers';\r\nimport Container from '../../components/Container/Container';\r\nimport Doughnut from '../../modules/Doughunt/index';\r\nimport FinalResult from '../../modules/FinalResult/index';\r\nimport SpentTime from '../../modules/SpentTime/index';\r\nimport ChartBar from '../../modules/ChartBar/index';\r\n\r\nimport {\r\n  StyledSection,\r\n  StyledSectionResults,\r\n} from './Results.Styled';\r\n\r\nimport type { TPointsByThemes } from '../../types/types';\r\n\r\ntype ResultsProps = {\r\n  lang: string\r\n};\r\n\r\nconst Results: FC<ResultsProps> = ({lang}) => {\r\n  const [rightAnswers, setRightAnswers] = useState<number>(0);\r\n  const [pointsByTheme, setPointsByTheme] = useState<TPointsByThemes | null>(\r\n    null,\r\n  );\r\n\r\n    const setRightUserAnswers = useCallback((points: number) => {\r\n    setRightAnswers(points);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {/* <HeaderResult /> */}\r\n      <StyledMain>\r\n        <div>\r\n          <Container>\r\n            <StyledSectionResults>\r\n              <FinalResult setRightAnswers={setRightUserAnswers} />\r\n              <SpentTime />\r\n            </StyledSectionResults>\r\n            <StyledSection>\r\n              <ChartBar pointsByTheme={pointsByTheme} />\r\n              <Doughnut rightAnswers={rightAnswers} />\r\n            </StyledSection>\r\n          </Container>\r\n          <UserAnswers setPointsByTheme={setPointsByTheme} lang={lang}/>\r\n        </div>\r\n      </StyledMain>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Results;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledMain = styled.main`\r\n  flex: 1 1 auto;\r\n`;\r\n"],"names":["getTotalQuestionsNumb","async","Promise","resolve","reject","onValue","ref","db","snapshot","totalQuestionsNumb","Object","entries","val","length","error","console","ContainerStyled","styled","children","firebaseConfig","apiKey","process","REACT_APP_API_KEY","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","app","initializeApp","getDatabase","getIdUser","key","value","localStorage","getItem","undefined","Error","e","message","StyleArticleDropdown","StyledButton","StyledSpan","StyledUl","StyledImg","StyledLi","Dropdown","hideListFilters","data","selected","isActive","style","themeHasChoosen","toggleListThemes","idWrapper","elementLanguages","map","item","index","tabIndex","onClick","useEffect","handleClickOutside","target","tagName","document","addEventListener","removeEventListener","id","className","src","chevrondown","alt","displayName","setFilterByRightAnswer","typeAnswer","setTypeAnswer","useState","isShowList","setIsShowList","themesNames","setFilterByTheme","selectedTheme","setSelectedTheme","margin","getAnswerOptions","getInfoQuestions","getNumberFromKey","matches","match","parseInt","transformData","values","filter","question","userAnswer","point","infoQuestionsAndAnswers","Set","infoQuestion","theme","forEach","add","Array","from","getThemesNames","themes","getThemes","i","updateData","pointsByThemes","totalPoints","totalQuantityQuestions","StyledListAnswers","StyledSum","StyledSection","StyledSpanResult","isRight","setPointsByTheme","lang","t","useTranslation","setInfoQuestionsAndAnswers","isError","setIsError","isLoading","setIsLoading","filterTheme","setFilterTheme","filterRight","setFilterRight","loading","Spinner","width","height","color","content","visibleData","filterByRightAnswer","filterByThemes","userAnswerArr","descr","img","name","rightAnswer","answerOptions","borderRadius","border","maxWidth","join","view","transformUserAnswers","res","fromEntries","onError","all","then","userAnswers","infoQuestions","generalInfo","transformQuestionsAndAnswersDB","catch","getPointsByThemes","Container","open","newFilter","StyledArticle","StyledP","StyledDoughuntWrapper","ChartJS","ArcElement","Tooltip","Legend","LinearScale","dataPieChart","labels","datasets","label","backgroundColor","borderColor","cutout","borderWidth","rightAnswers","totalQuestionNumbers","setTotalQuestionNumbers","percentRightQuestions","toFixed","percentWrongQuestions","spinner","StyledH3","StyledH2","setRightAnswers","state","setState","points","getTotalPoints","reduce","sum","curr","dataHasLoaded","dataInfo","answers","response","ansewrsTransform","allSettled","transformSecondsToMinutes","seconds","sec","min","result","minutes","Math","floor","time","timeHasLoaded","userInfo","CategoryScale","BarElement","Title","BarChart","pointsByTheme","colors","percentOfTheme","slice","options","maintainAspectRatio","plugins","legend","position","align","title","display","scales","y","ticks","stepSize","memo","StyledBarChartWrapper","StyledSectionResults","setRightUserAnswers","useCallback","StyledMain"],"sourceRoot":""}