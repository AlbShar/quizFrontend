{"version":3,"file":"static/js/595.4f700f4d.chunk.js","mappings":"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","sources":["../node_modules/@firebase/util/src/constants.ts","../node_modules/@firebase/util/src/assert.ts","../node_modules/@firebase/util/src/crypt.ts","../node_modules/@firebase/util/src/deepCopy.ts","../node_modules/@firebase/util/src/environment.ts","../node_modules/@firebase/util/src/defaults.ts","../node_modules/@firebase/util/src/deferred.ts","../node_modules/@firebase/util/src/emulator.ts","../node_modules/@firebase/util/src/errors.ts","../node_modules/@firebase/util/src/json.ts","../node_modules/@firebase/util/src/jwt.ts","../node_modules/@firebase/util/src/obj.ts","../node_modules/@firebase/util/src/query.ts","../node_modules/@firebase/util/src/sha1.ts","../node_modules/@firebase/util/src/validation.ts","../node_modules/@firebase/util/src/utf8.ts","../node_modules/@firebase/util/src/compat.ts","../node_modules/firebase/app/index.ts","../node_modules/@firebase/database/src/core/version.ts","../node_modules/@firebase/database/src/core/storage/DOMStorageWrapper.ts","../node_modules/@firebase/database/src/core/storage/MemoryStorage.ts","../node_modules/@firebase/database/src/core/storage/storage.ts","../node_modules/@firebase/database/src/core/util/util.ts","../node_modules/@firebase/database/src/core/AppCheckTokenProvider.ts","../node_modules/@firebase/database/src/core/AuthTokenProvider.ts","../node_modules/@firebase/database/src/realtime/Constants.ts","../node_modules/@firebase/database/src/core/RepoInfo.ts","../node_modules/@firebase/database/src/core/stats/StatsCollection.ts","../node_modules/@firebase/database/src/core/stats/StatsManager.ts","../node_modules/@firebase/database/src/realtime/polling/PacketReceiver.ts","../node_modules/@firebase/database/src/realtime/BrowserPollConnection.ts","../node_modules/@firebase/database/src/realtime/WebSocketConnection.ts","../node_modules/@firebase/database/src/realtime/TransportManager.ts","../node_modules/@firebase/database/src/realtime/Connection.ts","../node_modules/@firebase/database/src/core/ServerActions.ts","../node_modules/@firebase/database/src/core/util/EventEmitter.ts","../node_modules/@firebase/database/src/core/util/OnlineMonitor.ts","../node_modules/@firebase/database/src/core/util/Path.ts","../node_modules/@firebase/database/src/core/util/VisibilityMonitor.ts","../node_modules/@firebase/database/src/core/PersistentConnection.ts","../node_modules/@firebase/database/src/core/snap/Node.ts","../node_modules/@firebase/database/src/core/snap/indexes/Index.ts","../node_modules/@firebase/database/src/core/snap/indexes/KeyIndex.ts","../node_modules/@firebase/database/src/core/util/SortedMap.ts","../node_modules/@firebase/database/src/core/snap/comparators.ts","../node_modules/@firebase/database/src/core/snap/snap.ts","../node_modules/@firebase/database/src/core/snap/LeafNode.ts","../node_modules/@firebase/database/src/core/snap/indexes/PriorityIndex.ts","../node_modules/@firebase/database/src/core/snap/childSet.ts","../node_modules/@firebase/database/src/core/snap/IndexMap.ts","../node_modules/@firebase/database/src/core/snap/ChildrenNode.ts","../node_modules/@firebase/database/src/core/snap/nodeFromJSON.ts","../node_modules/@firebase/database/src/core/snap/indexes/PathIndex.ts","../node_modules/@firebase/database/src/core/snap/indexes/ValueIndex.ts","../node_modules/@firebase/database/src/core/util/NextPushId.ts","../node_modules/@firebase/database/src/core/view/Change.ts","../node_modules/@firebase/database/src/core/view/filter/IndexedFilter.ts","../node_modules/@firebase/database/src/core/view/filter/RangedFilter.ts","../node_modules/@firebase/database/src/core/view/filter/LimitedFilter.ts","../node_modules/@firebase/database/src/core/view/QueryParams.ts","../node_modules/@firebase/database/src/core/ReadonlyRestClient.ts","../node_modules/@firebase/database/src/core/SnapshotHolder.ts","../node_modules/@firebase/database/src/core/SparseSnapshotTree.ts","../node_modules/@firebase/database/src/core/stats/StatsListener.ts","../node_modules/@firebase/database/src/core/stats/StatsReporter.ts","../node_modules/@firebase/database/src/core/operation/Operation.ts","../node_modules/@firebase/database/src/core/operation/AckUserWrite.ts","../node_modules/@firebase/database/src/core/operation/ListenComplete.ts","../node_modules/@firebase/database/src/core/operation/Overwrite.ts","../node_modules/@firebase/database/src/core/operation/Merge.ts","../node_modules/@firebase/database/src/core/view/CacheNode.ts","../node_modules/@firebase/database/src/core/view/EventGenerator.ts","../node_modules/@firebase/database/src/core/view/ViewCache.ts","../node_modules/@firebase/database/src/core/util/ImmutableTree.ts","../node_modules/@firebase/database/src/core/CompoundWrite.ts","../node_modules/@firebase/database/src/core/WriteTree.ts","../node_modules/@firebase/database/src/core/view/ChildChangeAccumulator.ts","../node_modules/@firebase/database/src/core/view/CompleteChildSource.ts","../node_modules/@firebase/database/src/core/view/ViewProcessor.ts","../node_modules/@firebase/database/src/core/view/View.ts","../node_modules/@firebase/database/src/core/SyncPoint.ts","../node_modules/@firebase/database/src/core/SyncTree.ts","../node_modules/@firebase/database/src/core/util/ServerValues.ts","../node_modules/@firebase/database/src/core/util/Tree.ts","../node_modules/@firebase/database/src/core/util/validation.ts","../node_modules/@firebase/database/src/core/view/EventQueue.ts","../node_modules/@firebase/database/src/core/Repo.ts","../node_modules/@firebase/database/src/core/util/libs/parser.ts","../node_modules/@firebase/database/src/core/view/Event.ts","../node_modules/@firebase/database/src/core/view/EventRegistration.ts","../node_modules/@firebase/database/src/api/Reference_impl.ts","../node_modules/@firebase/database/src/api/Database.ts","../node_modules/@firebase/database/src/api/test_access.ts","../node_modules/@firebase/database/src/register.ts","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/react-i18next/dist/es/utils.js","../node_modules/react-i18next/dist/es/useTranslation.js","../node_modules/@firebase/app/node_modules/idb/build/wrap-idb-value.js","../node_modules/@firebase/app/node_modules/idb/build/index.js","../node_modules/@firebase/app/src/platformLoggerService.ts","../node_modules/@firebase/app/src/logger.ts","../node_modules/@firebase/app/src/constants.ts","../node_modules/@firebase/app/src/internal.ts","../node_modules/@firebase/app/src/errors.ts","../node_modules/@firebase/app/src/firebaseApp.ts","../node_modules/@firebase/app/src/api.ts","../node_modules/@firebase/app/src/indexeddb.ts","../node_modules/@firebase/app/src/heartbeatService.ts","../node_modules/@firebase/app/src/registerCoreComponents.ts","../node_modules/@firebase/app/src/index.ts","../node_modules/@firebase/component/src/component.ts","../node_modules/@firebase/component/src/constants.ts","../node_modules/@firebase/component/src/provider.ts","../node_modules/@firebase/component/src/component_container.ts","../node_modules/@firebase/logger/src/logger.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\n */\n\nexport const CONSTANTS = {\n  /**\n   * @define {boolean} Whether this is the client Node.js SDK.\n   */\n  NODE_CLIENT: false,\n  /**\n   * @define {boolean} Whether this is the Admin Node.js SDK.\n   */\n  NODE_ADMIN: false,\n\n  /**\n   * Firebase SDK Version\n   */\n  SDK_VERSION: '${JSCORE_VERSION}'\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSTANTS } from './constants';\n\n/**\n * Throws an error if the provided assertion is falsy\n */\nexport const assert = function (assertion: unknown, message: string): void {\n  if (!assertion) {\n    throw assertionError(message);\n  }\n};\n\n/**\n * Returns an Error object suitable for throwing.\n */\nexport const assertionError = function (message: string): Error {\n  return new Error(\n    'Firebase Database (' +\n      CONSTANTS.SDK_VERSION +\n      ') INTERNAL ASSERT FAILED: ' +\n      message\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst stringToByteArray = function (str: string): number[] {\n  // TODO(user): Use native implementations if/when available\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (\n      (c & 0xfc00) === 0xd800 &&\n      i + 1 < str.length &&\n      (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00\n    ) {\n      // Surrogate Pair\n      c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Turns an array of numbers into the string given by the concatenation of the\n * characters to which the numbers correspond.\n * @param bytes Array of numbers representing characters.\n * @return Stringification of the array.\n */\nconst byteArrayToString = function (bytes: number[]): string {\n  // TODO(user): Use native implementations if/when available\n  const out: string[] = [];\n  let pos = 0,\n    c = 0;\n  while (pos < bytes.length) {\n    const c1 = bytes[pos++];\n    if (c1 < 128) {\n      out[c++] = String.fromCharCode(c1);\n    } else if (c1 > 191 && c1 < 224) {\n      const c2 = bytes[pos++];\n      out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\n    } else if (c1 > 239 && c1 < 365) {\n      // Surrogate Pair\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      const c4 = bytes[pos++];\n      const u =\n        (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\n        0x10000;\n      out[c++] = String.fromCharCode(0xd800 + (u >> 10));\n      out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\n    } else {\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      out[c++] = String.fromCharCode(\n        ((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63)\n      );\n    }\n  }\n  return out.join('');\n};\n\ninterface Base64 {\n  byteToCharMap_: { [key: number]: string } | null;\n  charToByteMap_: { [key: string]: number } | null;\n  byteToCharMapWebSafe_: { [key: number]: string } | null;\n  charToByteMapWebSafe_: { [key: string]: number } | null;\n  ENCODED_VALS_BASE: string;\n  readonly ENCODED_VALS: string;\n  readonly ENCODED_VALS_WEBSAFE: string;\n  HAS_NATIVE_SUPPORT: boolean;\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string;\n  encodeString(input: string, webSafe?: boolean): string;\n  decodeString(input: string, webSafe: boolean): string;\n  decodeStringToByteArray(input: string, webSafe: boolean): number[];\n  init_(): void;\n}\n\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\n// Static lookup maps, lazily populated by init_()\nexport const base64: Base64 = {\n  /**\n   * Maps bytes to characters.\n   */\n  byteToCharMap_: null,\n\n  /**\n   * Maps characters to bytes.\n   */\n  charToByteMap_: null,\n\n  /**\n   * Maps bytes to websafe characters.\n   * @private\n   */\n  byteToCharMapWebSafe_: null,\n\n  /**\n   * Maps websafe characters to bytes.\n   * @private\n   */\n  charToByteMapWebSafe_: null,\n\n  /**\n   * Our default alphabet, shared between\n   * ENCODED_VALS and ENCODED_VALS_WEBSAFE\n   */\n  ENCODED_VALS_BASE:\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\n\n  /**\n   * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\n   */\n  get ENCODED_VALS() {\n    return this.ENCODED_VALS_BASE + '+/=';\n  },\n\n  /**\n   * Our websafe alphabet.\n   */\n  get ENCODED_VALS_WEBSAFE() {\n    return this.ENCODED_VALS_BASE + '-_.';\n  },\n\n  /**\n   * Whether this browser supports the atob and btoa functions. This extension\n   * started at Mozilla but is now implemented by many browsers. We use the\n   * ASSUME_* variables to avoid pulling in the full useragent detection library\n   * but still allowing the standard per-browser compilations.\n   *\n   */\n  HAS_NATIVE_SUPPORT: typeof atob === 'function',\n\n  /**\n   * Base64-encode an array of bytes.\n   *\n   * @param input An array of bytes (numbers with\n   *     value in [0, 255]) to encode.\n   * @param webSafe Boolean indicating we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string {\n    if (!Array.isArray(input)) {\n      throw Error('encodeByteArray takes an array as a parameter');\n    }\n\n    this.init_();\n\n    const byteToCharMap = webSafe\n      ? this.byteToCharMapWebSafe_!\n      : this.byteToCharMap_!;\n\n    const output = [];\n\n    for (let i = 0; i < input.length; i += 3) {\n      const byte1 = input[i];\n      const haveByte2 = i + 1 < input.length;\n      const byte2 = haveByte2 ? input[i + 1] : 0;\n      const haveByte3 = i + 2 < input.length;\n      const byte3 = haveByte3 ? input[i + 2] : 0;\n\n      const outByte1 = byte1 >> 2;\n      const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\n      let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\n      let outByte4 = byte3 & 0x3f;\n\n      if (!haveByte3) {\n        outByte4 = 64;\n\n        if (!haveByte2) {\n          outByte3 = 64;\n        }\n      }\n\n      output.push(\n        byteToCharMap[outByte1],\n        byteToCharMap[outByte2],\n        byteToCharMap[outByte3],\n        byteToCharMap[outByte4]\n      );\n    }\n\n    return output.join('');\n  },\n\n  /**\n   * Base64-encode a string.\n   *\n   * @param input A string to encode.\n   * @param webSafe If true, we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeString(input: string, webSafe?: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return btoa(input);\n    }\n    return this.encodeByteArray(stringToByteArray(input), webSafe);\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * @param input to decode.\n   * @param webSafe True if we should use the\n   *     alternative alphabet.\n   * @return string representing the decoded value.\n   */\n  decodeString(input: string, webSafe: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return atob(input);\n    }\n    return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * In base-64 decoding, groups of four characters are converted into three\n   * bytes.  If the encoder did not apply padding, the input length may not\n   * be a multiple of 4.\n   *\n   * In this case, the last group will have fewer than 4 characters, and\n   * padding will be inferred.  If the group has one or two characters, it decodes\n   * to one byte.  If the group has three characters, it decodes to two bytes.\n   *\n   * @param input Input to decode.\n   * @param webSafe True if we should use the web-safe alphabet.\n   * @return bytes representing the decoded value.\n   */\n  decodeStringToByteArray(input: string, webSafe: boolean): number[] {\n    this.init_();\n\n    const charToByteMap = webSafe\n      ? this.charToByteMapWebSafe_!\n      : this.charToByteMap_!;\n\n    const output: number[] = [];\n\n    for (let i = 0; i < input.length; ) {\n      const byte1 = charToByteMap[input.charAt(i++)];\n\n      const haveByte2 = i < input.length;\n      const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\n      ++i;\n\n      const haveByte3 = i < input.length;\n      const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      const haveByte4 = i < input.length;\n      const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\n        throw Error();\n      }\n\n      const outByte1 = (byte1 << 2) | (byte2 >> 4);\n      output.push(outByte1);\n\n      if (byte3 !== 64) {\n        const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\n        output.push(outByte2);\n\n        if (byte4 !== 64) {\n          const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\n          output.push(outByte3);\n        }\n      }\n    }\n\n    return output;\n  },\n\n  /**\n   * Lazy static initialization function. Called before\n   * accessing any of the static map variables.\n   * @private\n   */\n  init_() {\n    if (!this.byteToCharMap_) {\n      this.byteToCharMap_ = {};\n      this.charToByteMap_ = {};\n      this.byteToCharMapWebSafe_ = {};\n      this.charToByteMapWebSafe_ = {};\n\n      // We want quick mappings back and forth, so we precompute two maps.\n      for (let i = 0; i < this.ENCODED_VALS.length; i++) {\n        this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\n        this.charToByteMap_[this.byteToCharMap_[i]] = i;\n        this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\n        this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\n\n        // Be forgiving when decoding and correctly decode both encodings.\n        if (i >= this.ENCODED_VALS_BASE.length) {\n          this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\n          this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\n        }\n      }\n    }\n  }\n};\n\n/**\n * URL-safe base64 encoding\n */\nexport const base64Encode = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  return base64.encodeByteArray(utf8Bytes, true);\n};\n\n/**\n * URL-safe base64 encoding (without \".\" padding in the end).\n * e.g. Used in JSON Web Token (JWT) parts.\n */\nexport const base64urlEncodeWithoutPadding = function (str: string): string {\n  // Use base64url encoding and remove padding in the end (dot characters).\n  return base64Encode(str).replace(/\\./g, '');\n};\n\n/**\n * URL-safe base64 decoding\n *\n * NOTE: DO NOT use the global atob() function - it does NOT support the\n * base64Url variant encoding.\n *\n * @param str To be decoded\n * @return Decoded result, if possible\n */\nexport const base64Decode = function (str: string): string | null {\n  try {\n    return base64.decodeString(str, true);\n  } catch (e) {\n    console.error('base64Decode failed: ', e);\n  }\n  return null;\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Do a deep-copy of basic JavaScript Objects or Arrays.\n */\nexport function deepCopy<T>(value: T): T {\n  return deepExtend(undefined, value) as T;\n}\n\n/**\n * Copy properties from source to target (recursively allows extension\n * of Objects and Arrays).  Scalar values in the target are over-written.\n * If target is undefined, an object of the appropriate type will be created\n * (and returned).\n *\n * We recursively copy all child properties of plain Objects in the source- so\n * that namespace- like dictionaries are merged.\n *\n * Note that the target can be a function, in which case the properties in\n * the source Object are copied onto it as static properties of the Function.\n *\n * Note: we don't merge __proto__ to prevent prototype pollution\n */\nexport function deepExtend(target: unknown, source: unknown): unknown {\n  if (!(source instanceof Object)) {\n    return source;\n  }\n\n  switch (source.constructor) {\n    case Date:\n      // Treat Dates like scalars; if the target date object had any child\n      // properties - they will be lost!\n      const dateValue = source as Date;\n      return new Date(dateValue.getTime());\n\n    case Object:\n      if (target === undefined) {\n        target = {};\n      }\n      break;\n    case Array:\n      // Always copy the array source and overwrite the target.\n      target = [];\n      break;\n\n    default:\n      // Not a plain Object - treat it as a scalar.\n      return source;\n  }\n\n  for (const prop in source) {\n    // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202\n    if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {\n      continue;\n    }\n    (target as Record<string, unknown>)[prop] = deepExtend(\n      (target as Record<string, unknown>)[prop],\n      (source as Record<string, unknown>)[prop]\n    );\n  }\n\n  return target;\n}\n\nfunction isValidKey(key: string): boolean {\n  return key !== '__proto__';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSTANTS } from './constants';\n\n/**\n * Returns navigator.userAgent string or '' if it's not defined.\n * @return user agent string\n */\nexport function getUA(): string {\n  if (\n    typeof navigator !== 'undefined' &&\n    typeof navigator['userAgent'] === 'string'\n  ) {\n    return navigator['userAgent'];\n  } else {\n    return '';\n  }\n}\n\n/**\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\n *\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\n * wait for a callback.\n */\nexport function isMobileCordova(): boolean {\n  return (\n    typeof window !== 'undefined' &&\n    // @ts-ignore Setting up an broadly applicable index signature for Window\n    // just to deal with this case would probably be a bad idea.\n    !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\n    /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA())\n  );\n}\n\n/**\n * Detect Node.js.\n *\n * @return true if Node.js environment is detected.\n */\n// Node detection logic from: https://github.com/iliakan/detect-node/\nexport function isNode(): boolean {\n  try {\n    return (\n      Object.prototype.toString.call(global.process) === '[object process]'\n    );\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Detect Browser Environment\n */\nexport function isBrowser(): boolean {\n  return typeof self === 'object' && self.self === self;\n}\n\n/**\n * Detect browser extensions (Chrome and Firefox at least).\n */\ninterface BrowserRuntime {\n  id?: unknown;\n}\ndeclare const chrome: { runtime?: BrowserRuntime };\ndeclare const browser: { runtime?: BrowserRuntime };\nexport function isBrowserExtension(): boolean {\n  const runtime =\n    typeof chrome === 'object'\n      ? chrome.runtime\n      : typeof browser === 'object'\n      ? browser.runtime\n      : undefined;\n  return typeof runtime === 'object' && runtime.id !== undefined;\n}\n\n/**\n * Detect React Native.\n *\n * @return true if ReactNative environment is detected.\n */\nexport function isReactNative(): boolean {\n  return (\n    typeof navigator === 'object' && navigator['product'] === 'ReactNative'\n  );\n}\n\n/** Detects Electron apps. */\nexport function isElectron(): boolean {\n  return getUA().indexOf('Electron/') >= 0;\n}\n\n/** Detects Internet Explorer. */\nexport function isIE(): boolean {\n  const ua = getUA();\n  return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\n}\n\n/** Detects Universal Windows Platform apps. */\nexport function isUWP(): boolean {\n  return getUA().indexOf('MSAppHost/') >= 0;\n}\n\n/**\n * Detect whether the current SDK build is the Node version.\n *\n * @return true if it's the Node SDK build.\n */\nexport function isNodeSdk(): boolean {\n  return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\n}\n\n/** Returns true if we are running in Safari. */\nexport function isSafari(): boolean {\n  return (\n    !isNode() &&\n    navigator.userAgent.includes('Safari') &&\n    !navigator.userAgent.includes('Chrome')\n  );\n}\n\n/**\n * This method checks if indexedDB is supported by current browser/service worker context\n * @return true if indexedDB is supported by current browser/service worker context\n */\nexport function isIndexedDBAvailable(): boolean {\n  return typeof indexedDB === 'object';\n}\n\n/**\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\n * if errors occur during the database open operation.\n *\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\n * private browsing)\n */\nexport function validateIndexedDBOpenable(): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    try {\n      let preExist: boolean = true;\n      const DB_CHECK_NAME =\n        'validate-browser-context-for-indexeddb-analytics-module';\n      const request = self.indexedDB.open(DB_CHECK_NAME);\n      request.onsuccess = () => {\n        request.result.close();\n        // delete database only when it doesn't pre-exist\n        if (!preExist) {\n          self.indexedDB.deleteDatabase(DB_CHECK_NAME);\n        }\n        resolve(true);\n      };\n      request.onupgradeneeded = () => {\n        preExist = false;\n      };\n\n      request.onerror = () => {\n        reject(request.error?.message || '');\n      };\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\n/**\n *\n * This method checks whether cookie is enabled within current browser\n * @return true if cookie is enabled within current browser\n */\nexport function areCookiesEnabled(): boolean {\n  if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Polyfill for `globalThis` object.\n * @returns the `globalThis` object for the given environment.\n */\nexport function getGlobal(): typeof globalThis {\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n  throw new Error('Unable to locate global object.');\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Decode } from './crypt';\nimport { getGlobal } from './environment';\n\n/**\n * Keys for experimental properties on the `FirebaseDefaults` object.\n * @public\n */\nexport type ExperimentalKey = 'authTokenSyncURL' | 'authIdTokenMaxAge';\n\n/**\n * An object that can be injected into the environment as __FIREBASE_DEFAULTS__,\n * either as a property of globalThis, a shell environment variable, or a\n * cookie.\n *\n * This object can be used to automatically configure and initialize\n * a Firebase app as well as any emulators.\n *\n * @public\n */\nexport interface FirebaseDefaults {\n  config?: Record<string, string>;\n  emulatorHosts?: Record<string, string>;\n  _authTokenSyncURL?: string;\n  _authIdTokenMaxAge?: number;\n  [key: string]: unknown;\n}\n\ndeclare global {\n  // Need `var` for this to work.\n  // eslint-disable-next-line no-var\n  var __FIREBASE_DEFAULTS__: FirebaseDefaults | undefined;\n}\n\nconst getDefaultsFromGlobal = (): FirebaseDefaults | undefined =>\n  getGlobal().__FIREBASE_DEFAULTS__;\n\n/**\n * Attempt to read defaults from a JSON string provided to\n * process.env.__FIREBASE_DEFAULTS__ or a JSON file whose path is in\n * process.env.__FIREBASE_DEFAULTS_PATH__\n */\nconst getDefaultsFromEnvVariable = (): FirebaseDefaults | undefined => {\n  if (typeof process === 'undefined' || typeof process.env === 'undefined') {\n    return;\n  }\n  const defaultsJsonString = process.env.__FIREBASE_DEFAULTS__;\n  if (defaultsJsonString) {\n    return JSON.parse(defaultsJsonString);\n  }\n};\n\nconst getDefaultsFromCookie = (): FirebaseDefaults | undefined => {\n  if (typeof document === 'undefined') {\n    return;\n  }\n  let match;\n  try {\n    match = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);\n  } catch (e) {\n    // Some environments such as Angular Universal SSR have a\n    // `document` object but error on accessing `document.cookie`.\n    return;\n  }\n  const decoded = match && base64Decode(match[1]);\n  return decoded && JSON.parse(decoded);\n};\n\n/**\n * Get the __FIREBASE_DEFAULTS__ object. It checks in order:\n * (1) if such an object exists as a property of `globalThis`\n * (2) if such an object was provided on a shell environment variable\n * (3) if such an object exists in a cookie\n */\nconst getDefaults = (): FirebaseDefaults | undefined => {\n  try {\n    return (\n      getDefaultsFromGlobal() ||\n      getDefaultsFromEnvVariable() ||\n      getDefaultsFromCookie()\n    );\n  } catch (e) {\n    /**\n     * Catch-all for being unable to get __FIREBASE_DEFAULTS__ due\n     * to any environment case we have not accounted for. Log to\n     * info instead of swallowing so we can find these unknown cases\n     * and add paths for them if needed.\n     */\n    console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`);\n    return;\n  }\n};\n\n/**\n * Returns emulator host stored in the __FIREBASE_DEFAULTS__ object\n * for the given product.\n * @returns a URL host formatted like `127.0.0.1:9999` or `[::1]:4000` if available\n * @public\n */\nexport const getDefaultEmulatorHost = (\n  productName: string\n): string | undefined => getDefaults()?.emulatorHosts?.[productName];\n\n/**\n * Returns emulator hostname and port stored in the __FIREBASE_DEFAULTS__ object\n * for the given product.\n * @returns a pair of hostname and port like `[\"::1\", 4000]` if available\n * @public\n */\nexport const getDefaultEmulatorHostnameAndPort = (\n  productName: string\n): [hostname: string, port: number] | undefined => {\n  const host = getDefaultEmulatorHost(productName);\n  if (!host) {\n    return undefined;\n  }\n  const separatorIndex = host.lastIndexOf(':'); // Finding the last since IPv6 addr also has colons.\n  if (separatorIndex <= 0 || separatorIndex + 1 === host.length) {\n    throw new Error(`Invalid host ${host} with no separate hostname and port!`);\n  }\n  // eslint-disable-next-line no-restricted-globals\n  const port = parseInt(host.substring(separatorIndex + 1), 10);\n  if (host[0] === '[') {\n    // Bracket-quoted `[ipv6addr]:port` => return \"ipv6addr\" (without brackets).\n    return [host.substring(1, separatorIndex - 1), port];\n  } else {\n    return [host.substring(0, separatorIndex), port];\n  }\n};\n\n/**\n * Returns Firebase app config stored in the __FIREBASE_DEFAULTS__ object.\n * @public\n */\nexport const getDefaultAppConfig = (): Record<string, string> | undefined =>\n  getDefaults()?.config;\n\n/**\n * Returns an experimental setting on the __FIREBASE_DEFAULTS__ object (properties\n * prefixed by \"_\")\n * @public\n */\nexport const getExperimentalSetting = <T extends ExperimentalKey>(\n  name: T\n): FirebaseDefaults[`_${T}`] =>\n  getDefaults()?.[`_${name}`] as FirebaseDefaults[`_${T}`];\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class Deferred<R> {\n  promise: Promise<R>;\n  reject: (value?: unknown) => void = () => {};\n  resolve: (value?: unknown) => void = () => {};\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve as (value?: unknown) => void;\n      this.reject = reject as (value?: unknown) => void;\n    });\n  }\n\n  /**\n   * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\n   * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\n   * and returns a node-style callback which will resolve or reject the Deferred's promise.\n   */\n  wrapCallback(\n    callback?: (error?: unknown, value?: unknown) => void\n  ): (error: unknown, value?: unknown) => void {\n    return (error, value?) => {\n      if (error) {\n        this.reject(error);\n      } else {\n        this.resolve(value);\n      }\n      if (typeof callback === 'function') {\n        // Attaching noop handler just in case developer wasn't expecting\n        // promises\n        this.promise.catch(() => {});\n\n        // Some of our callbacks don't expect a value and our own tests\n        // assert that the parameter length is 1\n        if (callback.length === 1) {\n          callback(error);\n        } else {\n          callback(error, value);\n        }\n      }\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64urlEncodeWithoutPadding } from './crypt';\n\n// Firebase Auth tokens contain snake_case claims following the JWT standard / convention.\n/* eslint-disable camelcase */\n\nexport type FirebaseSignInProvider =\n  | 'custom'\n  | 'email'\n  | 'password'\n  | 'phone'\n  | 'anonymous'\n  | 'google.com'\n  | 'facebook.com'\n  | 'github.com'\n  | 'twitter.com'\n  | 'microsoft.com'\n  | 'apple.com';\n\ninterface FirebaseIdToken {\n  // Always set to https://securetoken.google.com/PROJECT_ID\n  iss: string;\n\n  // Always set to PROJECT_ID\n  aud: string;\n\n  // The user's unique ID\n  sub: string;\n\n  // The token issue time, in seconds since epoch\n  iat: number;\n\n  // The token expiry time, normally 'iat' + 3600\n  exp: number;\n\n  // The user's unique ID. Must be equal to 'sub'\n  user_id: string;\n\n  // The time the user authenticated, normally 'iat'\n  auth_time: number;\n\n  // The sign in provider, only set when the provider is 'anonymous'\n  provider_id?: 'anonymous';\n\n  // The user's primary email\n  email?: string;\n\n  // The user's email verification status\n  email_verified?: boolean;\n\n  // The user's primary phone number\n  phone_number?: string;\n\n  // The user's display name\n  name?: string;\n\n  // The user's profile photo URL\n  picture?: string;\n\n  // Information on all identities linked to this user\n  firebase: {\n    // The primary sign-in provider\n    sign_in_provider: FirebaseSignInProvider;\n\n    // A map of providers to the user's list of unique identifiers from\n    // each provider\n    identities?: { [provider in FirebaseSignInProvider]?: string[] };\n  };\n\n  // Custom claims set by the developer\n  [claim: string]: unknown;\n\n  uid?: never; // Try to catch a common mistake of \"uid\" (should be \"sub\" instead).\n}\n\nexport type EmulatorMockTokenOptions = ({ user_id: string } | { sub: string }) &\n  Partial<FirebaseIdToken>;\n\nexport function createMockUserToken(\n  token: EmulatorMockTokenOptions,\n  projectId?: string\n): string {\n  if (token.uid) {\n    throw new Error(\n      'The \"uid\" field is no longer supported by mockUserToken. Please use \"sub\" instead for Firebase Auth User ID.'\n    );\n  }\n  // Unsecured JWTs use \"none\" as the algorithm.\n  const header = {\n    alg: 'none',\n    type: 'JWT'\n  };\n\n  const project = projectId || 'demo-project';\n  const iat = token.iat || 0;\n  const sub = token.sub || token.user_id;\n  if (!sub) {\n    throw new Error(\"mockUserToken must contain 'sub' or 'user_id' field!\");\n  }\n\n  const payload: FirebaseIdToken = {\n    // Set all required fields to decent defaults\n    iss: `https://securetoken.google.com/${project}`,\n    aud: project,\n    iat,\n    exp: iat + 3600,\n    auth_time: iat,\n    sub,\n    user_id: sub,\n    firebase: {\n      sign_in_provider: 'custom',\n      identities: {}\n    },\n\n    // Override with user options\n    ...token\n  };\n\n  // Unsecured JWTs use the empty string as a signature.\n  const signature = '';\n  return [\n    base64urlEncodeWithoutPadding(JSON.stringify(header)),\n    base64urlEncodeWithoutPadding(JSON.stringify(payload)),\n    signature\n  ].join('.');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Standardized Firebase Error.\n *\n * Usage:\n *\n *   // Typescript string literals for type-safe codes\n *   type Err =\n *     'unknown' |\n *     'object-not-found'\n *     ;\n *\n *   // Closure enum for type-safe error codes\n *   // at-enum {string}\n *   var Err = {\n *     UNKNOWN: 'unknown',\n *     OBJECT_NOT_FOUND: 'object-not-found',\n *   }\n *\n *   let errors: Map<Err, string> = {\n *     'generic-error': \"Unknown error\",\n *     'file-not-found': \"Could not find file: {$file}\",\n *   };\n *\n *   // Type-safe function - must pass a valid error code as param.\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\n *\n *   ...\n *   throw error.create(Err.GENERIC);\n *   ...\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\n *   ...\n *   // Service: Could not file file: foo.txt (service/file-not-found).\n *\n *   catch (e) {\n *     assert(e.message === \"Could not find file: foo.txt.\");\n *     if ((e as FirebaseError)?.code === 'service/file-not-found') {\n *       console.log(\"Could not read file: \" + e['file']);\n *     }\n *   }\n */\n\nexport type ErrorMap<ErrorCode extends string> = {\n  readonly [K in ErrorCode]: string;\n};\n\nconst ERROR_NAME = 'FirebaseError';\n\nexport interface StringLike {\n  toString(): string;\n}\n\nexport interface ErrorData {\n  [key: string]: unknown;\n}\n\n// Based on code from:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\nexport class FirebaseError extends Error {\n  /** The custom name for all FirebaseErrors. */\n  readonly name: string = ERROR_NAME;\n\n  constructor(\n    /** The error code for this error. */\n    readonly code: string,\n    message: string,\n    /** Custom data for this error. */\n    public customData?: Record<string, unknown>\n  ) {\n    super(message);\n\n    // Fix For ES5\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, FirebaseError.prototype);\n\n    // Maintains proper stack trace for where our error was thrown.\n    // Only available on V8.\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ErrorFactory.prototype.create);\n    }\n  }\n}\n\nexport class ErrorFactory<\n  ErrorCode extends string,\n  ErrorParams extends { readonly [K in ErrorCode]?: ErrorData } = {}\n> {\n  constructor(\n    private readonly service: string,\n    private readonly serviceName: string,\n    private readonly errors: ErrorMap<ErrorCode>\n  ) {}\n\n  create<K extends ErrorCode>(\n    code: K,\n    ...data: K extends keyof ErrorParams ? [ErrorParams[K]] : []\n  ): FirebaseError {\n    const customData = (data[0] as ErrorData) || {};\n    const fullCode = `${this.service}/${code}`;\n    const template = this.errors[code];\n\n    const message = template ? replaceTemplate(template, customData) : 'Error';\n    // Service Name: Error message (service/code).\n    const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\n\n    const error = new FirebaseError(fullCode, fullMessage, customData);\n\n    return error;\n  }\n}\n\nfunction replaceTemplate(template: string, data: ErrorData): string {\n  return template.replace(PATTERN, (_, key) => {\n    const value = data[key];\n    return value != null ? String(value) : `<${key}?>`;\n  });\n}\n\nconst PATTERN = /\\{\\$([^}]+)}/g;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Evaluates a JSON string into a javascript object.\n *\n * @param {string} str A string containing JSON.\n * @return {*} The javascript object representing the specified JSON.\n */\nexport function jsonEval(str: string): unknown {\n  return JSON.parse(str);\n}\n\n/**\n * Returns JSON representing a javascript object.\n * @param {*} data Javascript object to be stringified.\n * @return {string} The JSON contents of the object.\n */\nexport function stringify(data: unknown): string {\n  return JSON.stringify(data);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Decode } from './crypt';\nimport { jsonEval } from './json';\n\ninterface Claims {\n  [key: string]: {};\n}\n\ninterface DecodedToken {\n  header: object;\n  claims: Claims;\n  data: object;\n  signature: string;\n}\n\n/**\n * Decodes a Firebase auth. token into constituent parts.\n *\n * Notes:\n * - May return with invalid / incomplete claims if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const decode = function (token: string): DecodedToken {\n  let header = {},\n    claims: Claims = {},\n    data = {},\n    signature = '';\n\n  try {\n    const parts = token.split('.');\n    header = jsonEval(base64Decode(parts[0]) || '') as object;\n    claims = jsonEval(base64Decode(parts[1]) || '') as Claims;\n    signature = parts[2];\n    data = claims['d'] || {};\n    delete claims['d'];\n  } catch (e) {}\n\n  return {\n    header,\n    claims,\n    data,\n    signature\n  };\n};\n\ninterface DecodedToken {\n  header: object;\n  claims: Claims;\n  data: object;\n  signature: string;\n}\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the\n * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isValidTimestamp = function (token: string): boolean {\n  const claims: Claims = decode(token).claims;\n  const now: number = Math.floor(new Date().getTime() / 1000);\n  let validSince: number = 0,\n    validUntil: number = 0;\n\n  if (typeof claims === 'object') {\n    if (claims.hasOwnProperty('nbf')) {\n      validSince = claims['nbf'] as number;\n    } else if (claims.hasOwnProperty('iat')) {\n      validSince = claims['iat'] as number;\n    }\n\n    if (claims.hasOwnProperty('exp')) {\n      validUntil = claims['exp'] as number;\n    } else {\n      // token will expire after 24h by default\n      validUntil = validSince + 86400;\n    }\n  }\n\n  return (\n    !!now &&\n    !!validSince &&\n    !!validUntil &&\n    now >= validSince &&\n    now <= validUntil\n  );\n};\n\n/**\n * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.\n *\n * Notes:\n * - May return null if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const issuedAtTime = function (token: string): number | null {\n  const claims: Claims = decode(token).claims;\n  if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {\n    return claims['iat'] as number;\n  }\n  return null;\n};\n\n/**\n * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isValidFormat = function (token: string): boolean {\n  const decoded = decode(token),\n    claims = decoded.claims;\n\n  return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');\n};\n\n/**\n * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.\n *\n * Notes:\n * - May return a false negative if there's no native base64 decoding support.\n * - Doesn't check if the token is actually valid.\n */\nexport const isAdmin = function (token: string): boolean {\n  const claims: Claims = decode(token).claims;\n  return typeof claims === 'object' && claims['admin'] === true;\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function contains<T extends object>(obj: T, key: string): boolean {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexport function safeGet<T extends object, K extends keyof T>(\n  obj: T,\n  key: K\n): T[K] | undefined {\n  if (Object.prototype.hasOwnProperty.call(obj, key)) {\n    return obj[key];\n  } else {\n    return undefined;\n  }\n}\n\nexport function isEmpty(obj: object): obj is {} {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function map<K extends string, V, U>(\n  obj: { [key in K]: V },\n  fn: (value: V, key: K, obj: { [key in K]: V }) => U,\n  contextObj?: unknown\n): { [key in K]: U } {\n  const res: Partial<{ [key in K]: U }> = {};\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      res[key] = fn.call(contextObj, obj[key], key, obj);\n    }\n  }\n  return res as { [key in K]: U };\n}\n\n/**\n * Deep equal two objects. Support Arrays and Objects.\n */\nexport function deepEqual(a: object, b: object): boolean {\n  if (a === b) {\n    return true;\n  }\n\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n  for (const k of aKeys) {\n    if (!bKeys.includes(k)) {\n      return false;\n    }\n\n    const aProp = (a as Record<string, unknown>)[k];\n    const bProp = (b as Record<string, unknown>)[k];\n    if (isObject(aProp) && isObject(bProp)) {\n      if (!deepEqual(aProp, bProp)) {\n        return false;\n      }\n    } else if (aProp !== bProp) {\n      return false;\n    }\n  }\n\n  for (const k of bKeys) {\n    if (!aKeys.includes(k)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction isObject(thing: unknown): thing is object {\n  return thing !== null && typeof thing === 'object';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a\n * params object (e.g. {arg: 'val', arg2: 'val2'})\n * Note: You must prepend it with ? when adding it to a URL.\n */\nexport function querystring(querystringParams: {\n  [key: string]: string | number;\n}): string {\n  const params = [];\n  for (const [key, value] of Object.entries(querystringParams)) {\n    if (Array.isArray(value)) {\n      value.forEach(arrayVal => {\n        params.push(\n          encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal)\n        );\n      });\n    } else {\n      params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n    }\n  }\n  return params.length ? '&' + params.join('&') : '';\n}\n\n/**\n * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object\n * (e.g. {arg: 'val', arg2: 'val2'})\n */\nexport function querystringDecode(querystring: string): Record<string, string> {\n  const obj: Record<string, string> = {};\n  const tokens = querystring.replace(/^\\?/, '').split('&');\n\n  tokens.forEach(token => {\n    if (token) {\n      const [key, value] = token.split('=');\n      obj[decodeURIComponent(key)] = decodeURIComponent(value);\n    }\n  });\n  return obj;\n}\n\n/**\n * Extract the query string part of a URL, including the leading question mark (if present).\n */\nexport function extractQuerystring(url: string): string {\n  const queryStart = url.indexOf('?');\n  if (!queryStart) {\n    return '';\n  }\n  const fragmentStart = url.indexOf('#', queryStart);\n  return url.substring(\n    queryStart,\n    fragmentStart > 0 ? fragmentStart : undefined\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview SHA-1 cryptographic hash.\n * Variable names follow the notation in FIPS PUB 180-3:\n * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.\n *\n * Usage:\n *   var sha1 = new sha1();\n *   sha1.update(bytes);\n *   var hash = sha1.digest();\n *\n * Performance:\n *   Chrome 23:   ~400 Mbit/s\n *   Firefox 16:  ~250 Mbit/s\n *\n */\n\n/**\n * SHA-1 cryptographic hash constructor.\n *\n * The properties declared here are discussed in the above algorithm document.\n * @constructor\n * @final\n * @struct\n */\nexport class Sha1 {\n  /**\n   * Holds the previous values of accumulated variables a-e in the compress_\n   * function.\n   * @private\n   */\n  private chain_: number[] = [];\n\n  /**\n   * A buffer holding the partially computed hash result.\n   * @private\n   */\n  private buf_: number[] = [];\n\n  /**\n   * An array of 80 bytes, each a part of the message to be hashed.  Referred to\n   * as the message schedule in the docs.\n   * @private\n   */\n  private W_: number[] = [];\n\n  /**\n   * Contains data needed to pad messages less than 64 bytes.\n   * @private\n   */\n  private pad_: number[] = [];\n\n  /**\n   * @private {number}\n   */\n  private inbuf_: number = 0;\n\n  /**\n   * @private {number}\n   */\n  private total_: number = 0;\n\n  blockSize: number;\n\n  constructor() {\n    this.blockSize = 512 / 8;\n\n    this.pad_[0] = 128;\n    for (let i = 1; i < this.blockSize; ++i) {\n      this.pad_[i] = 0;\n    }\n\n    this.reset();\n  }\n\n  reset(): void {\n    this.chain_[0] = 0x67452301;\n    this.chain_[1] = 0xefcdab89;\n    this.chain_[2] = 0x98badcfe;\n    this.chain_[3] = 0x10325476;\n    this.chain_[4] = 0xc3d2e1f0;\n\n    this.inbuf_ = 0;\n    this.total_ = 0;\n  }\n\n  /**\n   * Internal compress helper function.\n   * @param buf Block to compress.\n   * @param offset Offset of the block in the buffer.\n   * @private\n   */\n  compress_(buf: number[] | Uint8Array | string, offset?: number): void {\n    if (!offset) {\n      offset = 0;\n    }\n\n    const W = this.W_;\n\n    // get 16 big endian words\n    if (typeof buf === 'string') {\n      for (let i = 0; i < 16; i++) {\n        // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS\n        // have a bug that turns the post-increment ++ operator into pre-increment\n        // during JIT compilation.  We have code that depends heavily on SHA-1 for\n        // correctness and which is affected by this bug, so I've removed all uses\n        // of post-increment ++ in which the result value is used.  We can revert\n        // this change once the Safari bug\n        // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and\n        // most clients have been updated.\n        W[i] =\n          (buf.charCodeAt(offset) << 24) |\n          (buf.charCodeAt(offset + 1) << 16) |\n          (buf.charCodeAt(offset + 2) << 8) |\n          buf.charCodeAt(offset + 3);\n        offset += 4;\n      }\n    } else {\n      for (let i = 0; i < 16; i++) {\n        W[i] =\n          (buf[offset] << 24) |\n          (buf[offset + 1] << 16) |\n          (buf[offset + 2] << 8) |\n          buf[offset + 3];\n        offset += 4;\n      }\n    }\n\n    // expand to 80 words\n    for (let i = 16; i < 80; i++) {\n      const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n      W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;\n    }\n\n    let a = this.chain_[0];\n    let b = this.chain_[1];\n    let c = this.chain_[2];\n    let d = this.chain_[3];\n    let e = this.chain_[4];\n    let f, k;\n\n    // TODO(user): Try to unroll this loop to speed up the computation.\n    for (let i = 0; i < 80; i++) {\n      if (i < 40) {\n        if (i < 20) {\n          f = d ^ (b & (c ^ d));\n          k = 0x5a827999;\n        } else {\n          f = b ^ c ^ d;\n          k = 0x6ed9eba1;\n        }\n      } else {\n        if (i < 60) {\n          f = (b & c) | (d & (b | c));\n          k = 0x8f1bbcdc;\n        } else {\n          f = b ^ c ^ d;\n          k = 0xca62c1d6;\n        }\n      }\n\n      const t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;\n      e = d;\n      d = c;\n      c = ((b << 30) | (b >>> 2)) & 0xffffffff;\n      b = a;\n      a = t;\n    }\n\n    this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;\n    this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;\n    this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;\n    this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;\n    this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;\n  }\n\n  update(bytes?: number[] | Uint8Array | string, length?: number): void {\n    // TODO(johnlenz): tighten the function signature and remove this check\n    if (bytes == null) {\n      return;\n    }\n\n    if (length === undefined) {\n      length = bytes.length;\n    }\n\n    const lengthMinusBlock = length - this.blockSize;\n    let n = 0;\n    // Using local instead of member variables gives ~5% speedup on Firefox 16.\n    const buf = this.buf_;\n    let inbuf = this.inbuf_;\n\n    // The outer while loop should execute at most twice.\n    while (n < length) {\n      // When we have no data in the block to top up, we can directly process the\n      // input buffer (assuming it contains sufficient data). This gives ~25%\n      // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that\n      // the data is provided in large chunks (or in multiples of 64 bytes).\n      if (inbuf === 0) {\n        while (n <= lengthMinusBlock) {\n          this.compress_(bytes, n);\n          n += this.blockSize;\n        }\n      }\n\n      if (typeof bytes === 'string') {\n        while (n < length) {\n          buf[inbuf] = bytes.charCodeAt(n);\n          ++inbuf;\n          ++n;\n          if (inbuf === this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      } else {\n        while (n < length) {\n          buf[inbuf] = bytes[n];\n          ++inbuf;\n          ++n;\n          if (inbuf === this.blockSize) {\n            this.compress_(buf);\n            inbuf = 0;\n            // Jump to the outer loop so we use the full-block optimization.\n            break;\n          }\n        }\n      }\n    }\n\n    this.inbuf_ = inbuf;\n    this.total_ += length;\n  }\n\n  /** @override */\n  digest(): number[] {\n    const digest: number[] = [];\n    let totalBits = this.total_ * 8;\n\n    // Add pad 0x80 0x00*.\n    if (this.inbuf_ < 56) {\n      this.update(this.pad_, 56 - this.inbuf_);\n    } else {\n      this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));\n    }\n\n    // Add # bits.\n    for (let i = this.blockSize - 1; i >= 56; i--) {\n      this.buf_[i] = totalBits & 255;\n      totalBits /= 256; // Don't use bit-shifting here!\n    }\n\n    this.compress_(this.buf_);\n\n    let n = 0;\n    for (let i = 0; i < 5; i++) {\n      for (let j = 24; j >= 0; j -= 8) {\n        digest[n] = (this.chain_[i] >> j) & 255;\n        ++n;\n      }\n    }\n    return digest;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Check to make sure the appropriate number of arguments are provided for a public function.\n * Throws an error if it fails.\n *\n * @param fnName The function name\n * @param minCount The minimum number of arguments to allow for the function call\n * @param maxCount The maximum number of argument to allow for the function call\n * @param argCount The actual number of arguments provided.\n */\nexport const validateArgCount = function (\n  fnName: string,\n  minCount: number,\n  maxCount: number,\n  argCount: number\n): void {\n  let argError;\n  if (argCount < minCount) {\n    argError = 'at least ' + minCount;\n  } else if (argCount > maxCount) {\n    argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;\n  }\n  if (argError) {\n    const error =\n      fnName +\n      ' failed: Was called with ' +\n      argCount +\n      (argCount === 1 ? ' argument.' : ' arguments.') +\n      ' Expects ' +\n      argError +\n      '.';\n    throw new Error(error);\n  }\n};\n\n/**\n * Generates a string to prefix an error message about failed argument validation\n *\n * @param fnName The function name\n * @param argName The name of the argument\n * @return The prefix to add to the error thrown for validation.\n */\nexport function errorPrefix(fnName: string, argName: string): string {\n  return `${fnName} failed: ${argName} argument `;\n}\n\n/**\n * @param fnName\n * @param argumentNumber\n * @param namespace\n * @param optional\n */\nexport function validateNamespace(\n  fnName: string,\n  namespace: string,\n  optional: boolean\n): void {\n  if (optional && !namespace) {\n    return;\n  }\n  if (typeof namespace !== 'string') {\n    //TODO: I should do more validation here. We only allow certain chars in namespaces.\n    throw new Error(\n      errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.'\n    );\n  }\n}\n\nexport function validateCallback(\n  fnName: string,\n  argumentName: string,\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback: Function,\n  optional: boolean\n): void {\n  if (optional && !callback) {\n    return;\n  }\n  if (typeof callback !== 'function') {\n    throw new Error(\n      errorPrefix(fnName, argumentName) + 'must be a valid function.'\n    );\n  }\n}\n\nexport function validateContextObject(\n  fnName: string,\n  argumentName: string,\n  context: unknown,\n  optional: boolean\n): void {\n  if (optional && !context) {\n    return;\n  }\n  if (typeof context !== 'object' || context === null) {\n    throw new Error(\n      errorPrefix(fnName, argumentName) + 'must be a valid context object.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from './assert';\n\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\n// so it's been modified.\n\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\n// pair).\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\n\n/**\n * @param {string} str\n * @return {Array}\n */\nexport const stringToByteArray = function (str: string): number[] {\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n\n    // Is this the lead surrogate in a surrogate pair?\n    if (c >= 0xd800 && c <= 0xdbff) {\n      const high = c - 0xd800; // the high 10 bits.\n      i++;\n      assert(i < str.length, 'Surrogate pair missing trail surrogate.');\n      const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\n      c = 0x10000 + (high << 10) + low;\n    }\n\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (c < 65536) {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Calculate length without actually converting; useful for doing cheaper validation.\n * @param {string} str\n * @return {number}\n */\nexport const stringLength = function (str: string): number {\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charCodeAt(i);\n    if (c < 128) {\n      p++;\n    } else if (c < 2048) {\n      p += 2;\n    } else if (c >= 0xd800 && c <= 0xdbff) {\n      // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\n      p += 4;\n      i++; // skip trail surrogate.\n    } else {\n      p += 3;\n    }\n  }\n  return p;\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface Compat<T> {\n  _delegate: T;\n}\n\nexport function getModularInstance<ExpService>(\n  service: Compat<ExpService> | ExpService\n): ExpService {\n  if (service && (service as Compat<ExpService>)._delegate) {\n    return (service as Compat<ExpService>)._delegate;\n  } else {\n    return service as ExpService;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { registerVersion } from '@firebase/app';\nimport { name, version } from '../package.json';\n\nregisterVersion(name, version, 'app');\nexport * from '@firebase/app';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The semver (www.semver.org) version of the SDK. */\nexport let SDK_VERSION = '';\n\n/**\n * SDK_VERSION should be set before any database instance is created\n * @internal\n */\nexport function setSDKVersion(version: string): void {\n  SDK_VERSION = version;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { jsonEval, stringify } from '@firebase/util';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param key - The key to save the value under\n   * @param value - The value being stored, or null to remove the key.\n   */\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @returns The value that was stored under this key, or null\n   */\n  get(key: string): unknown {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: unknown } = {};\n\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): unknown {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DOMStorageWrapper } from './DOMStorageWrapper';\nimport { MemoryStorage } from './MemoryStorage';\n\ndeclare const window: Window;\n\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param domStorageName - Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @returns Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function (\n  domStorageName: string\n): DOMStorageWrapper | MemoryStorage {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window[domStorageName] !== 'undefined'\n    ) {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n\n/** A storage object that lasts across sessions */\nexport const PersistentStorage = createStoragefor('localStorage');\n\n/** A storage object that only lasts one session */\nexport const SessionStorage = createStoragefor('sessionStorage');\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport {\n  assert,\n  base64,\n  Sha1,\n  stringToByteArray,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\n\nimport { SessionStorage } from '../storage/storage';\nimport { QueryContext } from '../view/EventRegistration';\n\ndeclare const window: Window;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Windows: any;\n\nconst logClient = new Logger('@firebase/database');\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n */\nexport const LUIDGenerator: () => number = (function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n})();\n\n/**\n * Sha1 hash of the input string\n * @param str - The string to hash\n * @returns {!string} The resulting hash\n */\nexport const sha1 = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\nconst buildLogMessage_ = function (...varArgs: unknown[]): string {\n  let message = '';\n  for (let i = 0; i < varArgs.length; i++) {\n    const arg = varArgs[i];\n    if (\n      Array.isArray(arg) ||\n      (arg &&\n        typeof arg === 'object' &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        typeof (arg as any).length === 'number')\n    ) {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param logger_ - A flag to turn on logging, or a custom logger\n * @param persistent - Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function (\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) {\n  assert(\n    !persistent || logger_ === true || logger_ === false,\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\nexport const log = function (...varArgs: unknown[]) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n\nexport const logWrapper = function (\n  prefix: string\n): (...varArgs: unknown[]) => void {\n  return function (...varArgs: unknown[]) {\n    log(prefix, ...varArgs);\n  };\n};\n\nexport const error = function (...varArgs: string[]) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n  logClient.error(message);\n};\n\nexport const fatal = function (...varArgs: string[]) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\nexport const warn = function (...varArgs: unknown[]) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n  logClient.warn(message);\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) {\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n  }\n};\n\nexport const warnAboutUnsupportedMethod = function (methodName: string) {\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n */\nexport const isInvalidJSONNumber = function (data: unknown): boolean {\n  return (\n    typeof data === 'number' &&\n    (data !== data || // NaN\n      data === Number.POSITIVE_INFINITY ||\n      data === Number.NEGATIVE_INFINITY)\n  );\n};\n\nexport const executeWhenDOMReady = function (fn: () => void) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((document as any).attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (document as any).attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n */\nexport const nameCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n\n/**\n * @returns {!number} comparison result.\n */\nexport const stringCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\nexport const requireKey = function (\n  key: string,\n  obj: { [k: string]: unknown }\n): unknown {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n  }\n};\n\nexport const ObjectToUniqueKey = function (obj: unknown): string {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param str - The string\n * @param segsize - The maximum number of chars in the string.\n * @returns The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function (\n  str: string,\n  segsize: number\n): string[] {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj - The object or array to iterate over\n * @param fn - The function to apply\n */\nexport function each(obj: object, fn: (k: string, v: unknown) => void) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param callback - Callback function.\n * @param context - Optional context to bind to.\n *\n */\nexport const bindCallback = function (\n  callback: (a: unknown) => void,\n  context?: object | null\n): (a: unknown) => void {\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param v - A double\n *\n */\nexport const doubleToIEEE754String = function (v: number): string {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << (ebits - 1)) - 1;\n  let s, e, f, ln, i;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n */\nexport const isChromeExtensionContentScript = function (): boolean {\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n */\nexport const isWindowsStoreApp = function (): boolean {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a Javascript Error\n */\nexport function errorForServerCode(code: string, query: QueryContext): Error {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(\n    code + ' at ' + query._path.toString() + ': ' + reason\n  );\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (error as any).code = code.toUpperCase();\n  return error;\n}\n\n/**\n * Used to test for integer-looking strings\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n\n/**\n * For use in keys, the minimum possible 32-bit integer.\n */\nexport const INTEGER_32_MIN = -2147483648;\n\n/**\n * For use in kyes, the maximum possible 32-bit integer.\n */\nexport const INTEGER_32_MAX = 2147483647;\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n */\nexport const tryParseInt = function (str: string): number | null {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param fn - The code to guard.\n */\nexport const exceptionGuard = function (fn: () => void) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param callback - Optional onComplete callback.\n * @param varArgs - Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function (\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback?: Function | null,\n  ...varArgs: unknown[]\n) {\n  if (typeof callback === 'function') {\n    exceptionGuard(() => {\n      callback(...varArgs);\n    });\n  }\n};\n\n/**\n * @returns {boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function (): boolean {\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n */\nexport const exportPropGetter = function (\n  object: object,\n  name: string,\n  fnGet: () => unknown\n) {\n  Object.defineProperty(object, name, { get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param fn - Function to run.\n * @param time - Milliseconds to wait before running.\n * @returns The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function (\n  fn: () => void,\n  time: number\n): number | object {\n  const timeout: number | object = setTimeout(fn, time);\n  // Note: at the time of this comment, unrefTimer is under the unstable set of APIs. Run with --unstable to enable the API.\n  if (\n    typeof timeout === 'number' &&\n    // @ts-ignore Is only defined in Deno environments.\n    typeof Deno !== 'undefined' &&\n    // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n    Deno['unrefTimer']\n  ) {\n    // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n    Deno.unrefTimer(timeout);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } else if (typeof timeout === 'object' && (timeout as any)['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (timeout as any)['unref']();\n  }\n\n  return timeout;\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheckInternalComponentName,\n  AppCheckTokenListener,\n  AppCheckTokenResult,\n  FirebaseAppCheckInternal\n} from '@firebase/app-check-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { warn } from './util/util';\n\n/**\n * Abstraction around AppCheck's token fetching capabilities.\n */\nexport class AppCheckTokenProvider {\n  private appCheck?: FirebaseAppCheckInternal;\n  constructor(\n    private appName_: string,\n    private appCheckProvider?: Provider<AppCheckInternalComponentName>\n  ) {\n    this.appCheck = appCheckProvider?.getImmediate({ optional: true });\n    if (!this.appCheck) {\n      appCheckProvider?.get().then(appCheck => (this.appCheck = appCheck));\n    }\n  }\n\n  getToken(forceRefresh?: boolean): Promise<AppCheckTokenResult> {\n    if (!this.appCheck) {\n      return new Promise<AppCheckTokenResult>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAppCheck. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // AppCheck and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.appCheck) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n    return this.appCheck.getToken(forceRefresh);\n  }\n\n  addTokenChangeListener(listener: AppCheckTokenListener) {\n    this.appCheckProvider\n      ?.get()\n      .then(appCheck => appCheck.addTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    warn(\n      `Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\n        'are invalid. This usually indicates your app was not initialized correctly.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseAuthTokenData } from '@firebase/app-types/private';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { log, warn } from './util/util';\n\nexport interface AuthTokenProvider {\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData>;\n  addTokenChangeListener(listener: (token: string | null) => void): void;\n  removeTokenChangeListener(listener: (token: string | null) => void): void;\n  notifyForInvalidToken(): void;\n}\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class FirebaseAuthTokenProvider implements AuthTokenProvider {\n  private auth_: FirebaseAuthInternal | null = null;\n\n  constructor(\n    private appName_: string,\n    private firebaseOptions_: object,\n    private authProvider_: Provider<FirebaseAuthInternalName>\n  ) {\n    this.auth_ = authProvider_.getImmediate({ optional: true });\n    if (!this.auth_) {\n      authProvider_.onInit(auth => (this.auth_ = auth));\n    }\n  }\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    if (!this.auth_) {\n      return new Promise<FirebaseAuthTokenData>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAuth. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // Auth and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.auth_) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      this.authProvider_\n        .get()\n        .then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {\n    this.authProvider_\n      .get()\n      .then(auth => auth.removeAuthTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.appName_ +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\nexport class EmulatorTokenProvider implements AuthTokenProvider {\n  /** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\n  static OWNER = 'owner';\n\n  constructor(private accessToken: string) {}\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    return Promise.resolve({\n      accessToken: this.accessToken\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(this.accessToken);\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {}\n\n  notifyForInvalidToken(): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL_VERSION = '5';\n\nexport const VERSION_PARAM = 'v';\n\nexport const TRANSPORT_SESSION_PARAM = 's';\n\nexport const REFERER_PARAM = 'r';\n\nexport const FORGE_REF = 'f';\n\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nexport const FORGE_DOMAIN_RE =\n  /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\n\nexport const LAST_SESSION_PARAM = 'ls';\n\nexport const APPLICATION_ID_PARAM = 'p';\n\nexport const APP_CHECK_TOKEN_PARAM = 'ac';\n\nexport const WEBSOCKET = 'websocket';\n\nexport const LONG_POLLING = 'long_polling';\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\n\nimport { PersistentStorage } from './storage/storage';\nimport { each } from './util/util';\n\n/**\n * A class that holds metadata about a Repo object\n */\nexport class RepoInfo {\n  private _host: string;\n  private _domain: string;\n  internalHost: string;\n\n  /**\n   * @param host - Hostname portion of the url for the repo\n   * @param secure - Whether or not this repo is accessed over ssl\n   * @param namespace - The namespace represented by the repo\n   * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\n   * @param nodeAdmin - Whether this instance uses Admin SDK credentials\n   * @param persistenceKey - Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public readonly secure: boolean,\n    public readonly namespace: string,\n    public readonly webSocketOnly: boolean,\n    public readonly nodeAdmin: boolean = false,\n    public readonly persistenceKey: string = '',\n    public readonly includeNamespaceInQueryParams: boolean = false\n  ) {\n    this._host = host.toLowerCase();\n    this._domain = this._host.substr(this._host.indexOf('.') + 1);\n    this.internalHost =\n      (PersistentStorage.get('host:' + host) as string) || this._host;\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isCustomHost() {\n    return (\n      this._domain !== 'firebaseio.com' &&\n      this._domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  get host() {\n    return this._host;\n  }\n\n  set host(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this._host, this.internalHost);\n      }\n    }\n  }\n\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  toURLString(): string {\n    const protocol = this.secure ? 'https://' : 'http://';\n    const query = this.includeNamespaceInQueryParams\n      ? `?ns=${this.namespace}`\n      : '';\n    return `${protocol}${this.host}/${query}`;\n  }\n}\n\nfunction repoInfoNeedsQueryParam(repoInfo: RepoInfo): boolean {\n  return (\n    repoInfo.host !== repoInfo.internalHost ||\n    repoInfo.isCustomHost() ||\n    repoInfo.includeNamespaceInQueryParams\n  );\n}\n\n/**\n * Returns the websocket URL for this repo\n * @param repoInfo - RepoInfo object\n * @param type - of connection\n * @param params - list\n * @returns The URL for this repo\n */\nexport function repoInfoConnectionURL(\n  repoInfo: RepoInfo,\n  type: string,\n  params: { [k: string]: string }\n): string {\n  assert(typeof type === 'string', 'typeof type must == string');\n  assert(typeof params === 'object', 'typeof params must == object');\n\n  let connURL: string;\n  if (type === WEBSOCKET) {\n    connURL =\n      (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n  } else if (type === LONG_POLLING) {\n    connURL =\n      (repoInfo.secure ? 'https://' : 'http://') +\n      repoInfo.internalHost +\n      '/.lp?';\n  } else {\n    throw new Error('Unknown connection type: ' + type);\n  }\n  if (repoInfoNeedsQueryParam(repoInfo)) {\n    params['ns'] = repoInfo.namespace;\n  }\n\n  const pairs: string[] = [];\n\n  each(params, (key: string, value: string) => {\n    pairs.push(key + '=' + value);\n  });\n\n  return connURL + pairs.join('&');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deepCopy, contains } from '@firebase/util';\n\n/**\n * Tracks a collection of stats.\n */\nexport class StatsCollection {\n  private counters_: { [k: string]: number } = {};\n\n  incrementCounter(name: string, amount: number = 1) {\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport { StatsCollection } from './StatsCollection';\n\nconst collections: { [k: string]: StatsCollection } = {};\nconst reporters: { [k: string]: unknown } = {};\n\nexport function statsManagerGetCollection(repoInfo: RepoInfo): StatsCollection {\n  const hashString = repoInfo.toString();\n\n  if (!collections[hashString]) {\n    collections[hashString] = new StatsCollection();\n  }\n\n  return collections[hashString];\n}\n\nexport function statsManagerGetOrCreateReporter<T>(\n  repoInfo: RepoInfo,\n  creatorFunction: () => T\n): T {\n  const hashString = repoInfo.toString();\n\n  if (!reporters[hashString]) {\n    reporters[hashString] = creatorFunction();\n  }\n\n  return reporters[hashString] as T;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n */\nexport class PacketReceiver {\n  pendingResponses: unknown[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: {}) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   */\n  handleResponse(requestNum: number, data: unknown[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[\n        this.currentResponseNum\n      ] as unknown[];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Encode, isNodeSdk, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport {\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\n\nimport {\n  APP_CHECK_TOKEN_PARAM,\n  APPLICATION_ID_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport { PacketReceiver } from './polling/PacketReceiver';\nimport { Transport } from './Transport';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n */\nexport class BrowserPollConnection implements Transport {\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param connId An identifier for this connection, used for logging\n   * @param repoInfo The info for the endpoint to send data to.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The AppCheck token for this client.\n   * @param authToken The AuthToken to use for this connection.\n   * @param transportSessionId Optional transportSessionid if we are\n   * reconnecting for an existing transport session\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has\n   * already created a connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.urlFn = (params: { [k: string]: string }) => {\n      // Always add the token if we have one.\n      if (this.appCheckToken) {\n        params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n    };\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => {\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) {\n            return; // we closed the connection.\n          }\n\n          if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n          }\n          this.everConnected_ = true;\n          if (command === FIREBASE_LONGPOLL_START_PARAM) {\n            this.id = arg1 as string;\n            this.password = arg2 as string;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1 as number, () => {\n                this.onClosed_();\n              });\n            } else {\n              this.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        },\n        (...args) => {\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN as number, data as unknown[]);\n        },\n        () => {\n          this.onClosed_();\n        },\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\n          this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n      if (this.appCheckToken) {\n        urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      if (\n        typeof location !== 'undefined' &&\n        location.hostname &&\n        FORGE_DOMAIN_RE.test(location.hostname)\n      ) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n\n  static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n\n  static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return (\n        !BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp()\n      );\n    }\n  }\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n\n  /**\n   * Stops polling and cleans up the iframe\n   */\n  private shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n\n  /**\n   * Triggered when this transport is closed\n   */\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param data - The JSON data to transmit.\n   */\n  send(data: {}) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n    }\n  }\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   */\n  addDisconnectPingFrame(id: string, pw: string) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: { [k: string]: string } = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n  }\n\n  /**\n   * Used to track the bytes received by this client\n   */\n  private incrementIncomingBytes_(args: unknown) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface IFrameElement extends HTMLIFrameElement {\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder {\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  outstandingRequests = new Set<number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: Array<{ seg: number; ts: number; d: unknown }> = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: unknown[]) => void;\n  onMessageCB: (...args: unknown[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: unknown[]) => void,\n    onMessageCB: (...args: unknown[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) {\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\n        onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   */\n  private static createIFrame_(): IFrameElement {\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function(){document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((iframe as any).document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = (iframe as any).document; //others?\n    }\n\n    return iframe;\n  }\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param id - The ID of this connection\n   * @param pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          (nextSeg.d as unknown[]).length +\n            SEG_HEADER_SIZE +\n            curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: unknown) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param url - The URL of the script tag.\n   * @param serial - The serial number of the request.\n   */\n  private addLongPollTag_(url: string, serial: number) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param url - The URL for the script tag source.\n   * @param loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this as any).doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = (newScript as any).onreadystatechange =\n            function () {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              const rstate = (newScript as any).readyState;\n              if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                newScript.onload = (newScript as any).onreadystatechange = null;\n                if (newScript.parentNode) {\n                  newScript.parentNode.removeChild(newScript);\n                }\n                loadCB();\n              }\n            };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isNodeSdk, jsonEval, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { logWrapper, splitStringBySize } from '../core/util/util';\nimport { SDK_VERSION } from '../core/version';\n\nimport {\n  APPLICATION_ID_PARAM,\n  APP_CHECK_TOKEN_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM,\n  WEBSOCKET\n} from './Constants';\nimport { Transport } from './Transport';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const MozWebSocket: any;\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\n\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n\nexport function setWebSocketImpl(impl) {\n  WebSocketImpl = impl;\n}\n\n/**\n * Create a new websocket connection with the given callbacks.\n */\nexport class WebSocketConnection implements Transport {\n  keepaliveTimer: number | null = null;\n  frames: string[] | null = null;\n  totalFrames = 0;\n  bytesSent = 0;\n  bytesReceived = 0;\n  connURL: string;\n  onDisconnect: (a?: boolean) => void;\n  onMessage: (msg: {}) => void;\n  mySock: WebSocket | null;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_: boolean;\n  private isClosed_: boolean;\n  private nodeAdmin: boolean;\n\n  /**\n   * @param connId identifier for this transport\n   * @param repoInfo The info for the websocket endpoint.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The App Check Token for this client.\n   * @param authToken The Auth Token for this client.\n   * @param transportSessionId Optional transportSessionId if this is connecting\n   * to an existing transport session\n   * @param lastSessionId Optional lastSessionId if there was a previous\n   * connection\n   */\n  constructor(\n    public connId: string,\n    repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(\n      repoInfo,\n      transportSessionId,\n      lastSessionId,\n      appCheckToken,\n      applicationId\n    );\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n\n  /**\n   * @param repoInfo - The info for the websocket endpoint.\n   * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param lastSessionId - Optional lastSessionId if there was a previous connection\n   * @returns connection url\n   */\n  private static connectionURL_(\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string,\n    appCheckToken?: string,\n    applicationId?: string\n  ): string {\n    const urlParams: { [k: string]: string } = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (\n      !isNodeSdk() &&\n      typeof location !== 'undefined' &&\n      location.hostname &&\n      FORGE_DOMAIN_RE.test(location.hostname)\n    ) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    if (appCheckToken) {\n      urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n    }\n    if (applicationId) {\n      urlParams[APPLICATION_ID_PARAM] = applicationId;\n    }\n\n    return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n\n    this.log_('Websocket connecting to ' + this.connURL);\n\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      let options: { [k: string]: object };\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        options = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n\n        // If using Node with admin creds, AppCheck-related checks are unnecessary.\n        // Note that we send the credentials here even if they aren't admin credentials, which is\n        // not a problem.\n        // Note that this header is just used to bypass appcheck, and the token should still be sent\n        // through the websocket connection once it is established.\n        if (this.authToken) {\n          options.headers['Authorization'] = `Bearer ${this.authToken}`;\n        }\n        if (this.appCheckToken) {\n          options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n        }\n\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy =\n          this.connURL.indexOf('wss://') === 0\n            ? env['HTTPS_PROXY'] || env['https_proxy']\n            : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = { origin: proxy };\n        }\n      }\n      this.mySock = new WebSocketImpl(this.connURL, [], options);\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m as {});\n    };\n\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = (e as any).message || (e as any).data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() {}\n\n  static forceDisallow_: boolean;\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable(): boolean {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return (\n      !isOldAndroid &&\n      WebSocketImpl !== null &&\n      !WebSocketConnection.forceDisallow_\n    );\n  }\n\n  /**\n   * Number of response before we consider the connection \"healthy.\"\n   */\n  static responsesRequiredToBeHealthy = 2;\n\n  /**\n   * Time to wait for the connection te become healthy before giving up.\n   */\n  static healthyTimeout = 30000;\n\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   */\n  static previouslyFailed(): boolean {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return (\n      PersistentStorage.isInMemoryStorage ||\n      PersistentStorage.get('previous_websocket_failure') === true\n    );\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  private appendFrame_(data: string) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess) as object;\n\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n\n  /**\n   * @param frameCount - The number of frames we are expecting from the server\n   */\n  private handleNewFrameCount_(frameCount: number) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @returns Any remaining data to be process, or null if there is none\n   */\n  private extractFrameCount_(data: string): string | null {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess - The frame data\n   */\n  handleIncomingFrame(mess: { [k: string]: unknown }) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n    const data = mess['data'] as string;\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n\n  /**\n   * Send a message to the server\n   * @param data - The JSON object to transmit\n   */\n  send(data: {}) {\n    this.resetKeepAlive();\n\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  private shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL)) as any;\n  }\n\n  /**\n   * Send a string over the websocket.\n   *\n   * @param str - String to send.\n   */\n  private sendString_(str: string) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_(\n        'Exception thrown from WebSocket.send():',\n        e.message || e.data,\n        'Closing connection.'\n      );\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { warn } from '../core/util/util';\n\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { TransportConstructor } from './Transport';\nimport { WebSocketConnection } from './WebSocketConnection';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n */\nexport class TransportManager {\n  private transports_: TransportConstructor[];\n\n  // Keeps track of whether the TransportManager has already chosen a transport to use\n  static globalTransportInitialized_ = false;\n\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  /**\n   * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\n   * TransportManager has already set up transports_\n   */\n  static get IS_TRANSPORT_INITIALIZED() {\n    return this.globalTransportInitialized_;\n  }\n\n  /**\n   * @param repoInfo - Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  private initTransports_(repoInfo: RepoInfo) {\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n      TransportManager.globalTransportInitialized_ = true;\n    }\n  }\n\n  /**\n   * @returns The constructor for the initial transport to use\n   */\n  initialTransport(): TransportConstructor {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n\n  /**\n   * @returns The constructor for the next transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { Indexable } from '../core/util/misc';\nimport {\n  error,\n  logWrapper,\n  requireKey,\n  setTimeoutNonBlocking,\n  warn\n} from '../core/util/util';\n\nimport { PROTOCOL_VERSION } from './Constants';\nimport { Transport, TransportConstructor } from './Transport';\nimport { TransportManager } from './TransportManager';\n\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\n\nconst enum RealtimeState {\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTED\n}\n\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\n\nconst SERVER_HELLO = 'h';\n\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n */\nexport class Connection {\n  connectionCount = 0;\n  pendingDataMessages: unknown[] = [];\n  sessionId: string;\n\n  private conn_: Transport;\n  private healthyTimeout_: number;\n  private isHealthy_: boolean;\n  private log_: (...args: unknown[]) => void;\n  private primaryResponsesRequired_: number;\n  private rx_: Transport;\n  private secondaryConn_: Transport;\n  private secondaryResponsesRequired_: number;\n  private state_ = RealtimeState.CONNECTING;\n  private transportManager_: TransportManager;\n  private tx_: Transport;\n\n  /**\n   * @param id - an id for this connection\n   * @param repoInfo_ - the info for the endpoint to connect to\n   * @param applicationId_ - the Firebase App ID for this project\n   * @param appCheckToken_ - The App Check Token for this device.\n   * @param authToken_ - The auth token for this session.\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(\n    public id: string,\n    private repoInfo_: RepoInfo,\n    private applicationId_: string | undefined,\n    private appCheckToken_: string | undefined,\n    private authToken_: string | undefined,\n    private onMessage_: (a: {}) => void,\n    private onReady_: (a: number, b: string) => void,\n    private onDisconnect_: () => void,\n    private onKill_: (a: string) => void,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n\n  /**\n   * Starts a connection attempt\n   */\n  private start_(): void {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      null,\n      this.lastSessionId\n    );\n\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (\n            this.conn_ &&\n            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has received ' +\n                this.conn_.bytesReceived +\n                ' bytes.  Marking connection healthy.'\n            );\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (\n            this.conn_ &&\n            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has sent ' +\n                this.conn_.bytesSent +\n                ' bytes.  Leaving connection alive.'\n            );\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS)) as any;\n    }\n  }\n\n  private nextTransportId_(): string {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  private disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  private connReceiver_(conn: Transport) {\n    return (message: Indexable) => {\n      if (this.state_ !== RealtimeState.DISCONNECTED) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n\n  /**\n   * @param dataMsg - An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg: object) {\n    // wrap in a data message envelope and send it on\n    const msg = { t: 'd', d: dataMsg };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_(\n        'cleaning up and promoting a connection: ' + this.secondaryConn_.connId\n      );\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  private onSecondaryControl_(controlData: { [k: string]: unknown }) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE] as string;\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (\n          this.tx_ === this.secondaryConn_ ||\n          this.rx_ === this.secondaryConn_\n        ) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  private onSecondaryMessageReceived_(parsedData: Indexable) {\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data as Indexable);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  private upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n    this.tx_ = this.secondaryConn_;\n\n    this.tryCleanupConnection();\n  }\n\n  private onPrimaryMessageReceived_(parsedData: { [k: string]: unknown }) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data as { [k: string]: unknown });\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  private onDataMessage_(message: unknown) {\n    this.onPrimaryResponse_();\n\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n\n  private onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  private onControl_(controlData: { [k: string]: unknown }) {\n    const cmd: string = requireKey(MESSAGE_TYPE, controlData) as string;\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(\n          payload as {\n            ts: number;\n            v: string;\n            h: string;\n            s: string;\n          }\n        );\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload as string);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload as string);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n\n  /**\n   * @param handshake - The handshake data returned from the server\n   */\n  private onHandshake_(handshake: {\n    ts: number;\n    v: string;\n    h: string;\n    s: string;\n  }): void {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.host = host;\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === RealtimeState.CONNECTING) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n\n  private tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  private startUpgrade_(conn: TransportConstructor) {\n    this.secondaryConn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      this.sessionId\n    );\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ =\n      conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  private onReset_(host: string) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.host = host;\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === RealtimeState.CONNECTED) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  private onConnectionEstablished_(conn: Transport, timestamp: number) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = RealtimeState.CONNECTED;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  private sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === RealtimeState.CONNECTED) {\n      this.log_('sending ping on primary.');\n      this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n\n  /**\n   * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   */\n  private onConnectionLost_(everConnected: boolean) {\n    this.conn_ = null;\n\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === RealtimeState.CONNECTING) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === RealtimeState.CONNECTED) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  private onConnectionShutdown_(reason: string) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n\n    this.close();\n  }\n\n  private sendData_(data: object) {\n    if (this.state_ !== RealtimeState.CONNECTED) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() {\n    if (this.state_ !== RealtimeState.DISCONNECTED) {\n      this.log_('Closing realtime connection.');\n      this.state_ = RealtimeState.DISCONNECTED;\n\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  private closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryContext } from './view/EventRegistration';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n  abstract listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   */\n  abstract unlisten(query: QueryContext, tag: number | null): void;\n\n  /**\n   * Get the server value satisfying this query.\n   */\n  abstract get(query: QueryContext): Promise<string>;\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {}\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param token - The authentication token\n   */\n  refreshAuthToken(token: string) {}\n\n  /**\n   * Refreshes the app check token for the current connection.\n   * @param token The app check token\n   */\n  refreshAppCheckToken(token: string) {}\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  reportStats(stats: { [k: string]: unknown }) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: unknown[]): void;\n      context: unknown;\n    }>;\n  } = {};\n\n  constructor(private allowedEvents_: string[]) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @returns {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): unknown[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   */\n  protected trigger(eventType: string, ...varArgs: unknown[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(et => {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isMobileCordova } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n */\nexport class OnlineMonitor extends EventEmitter {\n  private online_ = true;\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  constructor() {\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) {\n      window.addEventListener(\n        'online',\n        () => {\n          if (!this.online_) {\n            this.online_ = true;\n            this.trigger('online', true);\n          }\n        },\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => {\n          if (this.online_) {\n            this.online_ = false;\n            this.trigger('online', false);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  currentlyOnline(): boolean {\n    return this.online_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringLength } from '@firebase/util';\n\nimport { nameCompare } from './util';\n\n/** Maximum key depth. */\nconst MAX_PATH_DEPTH = 32;\n\n/** Maximum number of (UTF8) bytes in a Firebase path. */\nconst MAX_PATH_LENGTH_BYTES = 768;\n\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nexport class Path {\n  pieces_: string[];\n  pieceNum_: number;\n\n  /**\n   * @param pathOrString - Path string to parse, or another path, or the raw\n   * tokens array\n   */\n  constructor(pathOrString: string | string[], pieceNum?: number) {\n    if (pieceNum === void 0) {\n      this.pieces_ = (pathOrString as string).split('/');\n\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString as string[];\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  toString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  }\n}\n\nexport function newEmptyPath(): Path {\n  return new Path('');\n}\n\nexport function pathGetFront(path: Path): string | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  return path.pieces_[path.pieceNum_];\n}\n\n/**\n * @returns The number of segments in this path\n */\nexport function pathGetLength(path: Path): number {\n  return path.pieces_.length - path.pieceNum_;\n}\n\nexport function pathPopFront(path: Path): Path {\n  let pieceNum = path.pieceNum_;\n  if (pieceNum < path.pieces_.length) {\n    pieceNum++;\n  }\n  return new Path(path.pieces_, pieceNum);\n}\n\nexport function pathGetBack(path: Path): string | null {\n  if (path.pieceNum_ < path.pieces_.length) {\n    return path.pieces_[path.pieces_.length - 1];\n  }\n\n  return null;\n}\n\nexport function pathToUrlEncodedString(path: Path): string {\n  let pathString = '';\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    if (path.pieces_[i] !== '') {\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n    }\n  }\n\n  return pathString || '/';\n}\n\n/**\n * Shallow copy of the parts of the path.\n *\n */\nexport function pathSlice(path: Path, begin: number = 0): string[] {\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\n\nexport function pathParent(path: Path): Path | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  return new Path(pieces, 0);\n}\n\nexport function pathChild(path: Path, childPathObj: string | Path): Path {\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  if (childPathObj instanceof Path) {\n    for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n      pieces.push(childPathObj.pieces_[i]);\n    }\n  } else {\n    const childPieces = childPathObj.split('/');\n    for (let i = 0; i < childPieces.length; i++) {\n      if (childPieces[i].length > 0) {\n        pieces.push(childPieces[i]);\n      }\n    }\n  }\n\n  return new Path(pieces, 0);\n}\n\n/**\n * @returns True if there are no segments in this path\n */\nexport function pathIsEmpty(path: Path): boolean {\n  return path.pieceNum_ >= path.pieces_.length;\n}\n\n/**\n * @returns The path from outerPath to innerPath\n */\nexport function newRelativePath(outerPath: Path, innerPath: Path): Path {\n  const outer = pathGetFront(outerPath),\n    inner = pathGetFront(innerPath);\n  if (outer === null) {\n    return innerPath;\n  } else if (outer === inner) {\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n  } else {\n    throw new Error(\n      'INTERNAL ERROR: innerPath (' +\n        innerPath +\n        ') is not within ' +\n        'outerPath (' +\n        outerPath +\n        ')'\n    );\n  }\n}\n\n/**\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\n */\nexport function pathCompare(left: Path, right: Path): number {\n  const leftKeys = pathSlice(left, 0);\n  const rightKeys = pathSlice(right, 0);\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n    const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n  if (leftKeys.length === rightKeys.length) {\n    return 0;\n  }\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n\n/**\n * @returns true if paths are the same.\n */\nexport function pathEquals(path: Path, other: Path): boolean {\n  if (pathGetLength(path) !== pathGetLength(other)) {\n    return false;\n  }\n\n  for (\n    let i = path.pieceNum_, j = other.pieceNum_;\n    i <= path.pieces_.length;\n    i++, j++\n  ) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * @returns True if this path is a parent of (or the same as) other\n */\nexport function pathContains(path: Path, other: Path): boolean {\n  let i = path.pieceNum_;\n  let j = other.pieceNum_;\n  if (pathGetLength(path) > pathGetLength(other)) {\n    return false;\n  }\n  while (i < path.pieces_.length) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n    ++i;\n    ++j;\n  }\n  return true;\n}\n\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nexport class ValidationPath {\n  parts_: string[];\n  /** Initialize to number of '/' chars needed in path. */\n  byteLength_: number;\n\n  /**\n   * @param path - Initial Path.\n   * @param errorPrefix_ - Prefix for any error messages.\n   */\n  constructor(path: Path, public errorPrefix_: string) {\n    this.parts_ = pathSlice(path, 0);\n    /** Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    validationPathCheckValid(this);\n  }\n}\n\nexport function validationPathPush(\n  validationPath: ValidationPath,\n  child: string\n): void {\n  // Count the needed '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ += 1;\n  }\n  validationPath.parts_.push(child);\n  validationPath.byteLength_ += stringLength(child);\n  validationPathCheckValid(validationPath);\n}\n\nexport function validationPathPop(validationPath: ValidationPath): void {\n  const last = validationPath.parts_.pop();\n  validationPath.byteLength_ -= stringLength(last);\n  // Un-count the previous '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ -= 1;\n  }\n}\n\nfunction validationPathCheckValid(validationPath: ValidationPath): void {\n  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'has a key path longer than ' +\n        MAX_PATH_LENGTH_BYTES +\n        ' bytes (' +\n        validationPath.byteLength_ +\n        ').'\n    );\n  }\n  if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'path specified exceeds the maximum depth that can be written (' +\n        MAX_PATH_DEPTH +\n        ') or object contains a cycle ' +\n        validationPathToErrorString(validationPath)\n    );\n  }\n}\n\n/**\n * String for use in error messages - uses '.' notation for path.\n */\nexport function validationPathToErrorString(\n  validationPath: ValidationPath\n): string {\n  if (validationPath.parts_.length === 0) {\n    return '';\n  }\n  return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\ndeclare const document: Document;\n\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  Deferred,\n  isEmpty,\n  isMobileCordova,\n  isNodeSdk,\n  isReactNative,\n  isValidFormat,\n  safeGet,\n  stringify,\n  isAdmin\n} from '@firebase/util';\n\nimport { Connection } from '../realtime/Connection';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { OnlineMonitor } from './util/OnlineMonitor';\nimport { Path } from './util/Path';\nimport { error, log, logWrapper, warn, ObjectToUniqueKey } from './util/util';\nimport { VisibilityMonitor } from './util/VisibilityMonitor';\nimport { SDK_VERSION } from './version';\nimport { QueryContext } from './view/EventRegistration';\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_TOKEN_THRESHOLD = 3;\n\ninterface ListenSpec {\n  onComplete(s: string, p?: unknown): void;\n\n  hashFn(): string;\n\n  query: QueryContext;\n  tag: number | null;\n}\n\ninterface OnDisconnectRequest {\n  pathString: string;\n  action: string;\n  data: unknown;\n  onComplete?: (a: string, b: string) => void;\n}\n\ninterface OutstandingPut {\n  action: string;\n  request: object;\n  queued?: boolean;\n  onComplete: (a: string, b?: string) => void;\n}\n\ninterface OutstandingGet {\n  request: object;\n  onComplete: (response: { [k: string]: unknown }) => void;\n}\n\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nexport class PersistentConnection extends ServerActions {\n  // Used for diagnostic logging.\n  id = PersistentConnection.nextPersistentConnectionId_++;\n  private log_ = logWrapper('p:' + this.id + ':');\n\n  private interruptReasons_: { [reason: string]: boolean } = {};\n  private readonly listens: Map<\n    /* path */ string,\n    Map</* queryId */ string, ListenSpec>\n  > = new Map();\n  private outstandingPuts_: OutstandingPut[] = [];\n  private outstandingGets_: OutstandingGet[] = [];\n  private outstandingPutCount_ = 0;\n  private outstandingGetCount_ = 0;\n  private onDisconnectRequestQueue_: OnDisconnectRequest[] = [];\n  private connected_ = false;\n  private reconnectDelay_ = RECONNECT_MIN_DELAY;\n  private maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n  private securityDebugCallback_: ((a: object) => void) | null = null;\n  lastSessionId: string | null = null;\n\n  private establishConnectionTimer_: number | null = null;\n\n  private visible_: boolean = false;\n\n  // Before we get connected, we keep a queue of pending messages to send.\n  private requestCBHash_: { [k: number]: (a: unknown) => void } = {};\n  private requestNumber_ = 0;\n\n  private realtime_: {\n    sendRequest(a: object): void;\n    close(): void;\n  } | null = null;\n\n  private authToken_: string | null = null;\n  private appCheckToken_: string | null = null;\n  private forceTokenRefresh_ = false;\n  private invalidAuthTokenCount_ = 0;\n  private invalidAppCheckTokenCount_ = 0;\n\n  private firstConnection_ = true;\n  private lastConnectionAttemptTime_: number | null = null;\n  private lastConnectionEstablishedTime_: number | null = null;\n\n  private static nextPersistentConnectionId_ = 0;\n\n  /**\n   * Counter for number of connections created. Mainly used for tagging in the logs\n   */\n  private static nextConnectionId_ = 0;\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param applicationId_ - The Firebase App ID for this project\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private applicationId_: string,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private onConnectStatus_: (a: boolean) => void,\n    private onServerInfoUpdate_: (a: unknown) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider,\n    private authOverride_?: object | null\n  ) {\n    super();\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error(\n        'Auth override specified in options, but not supported on non Node.js platforms'\n      );\n    }\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  protected sendRequest(\n    action: string,\n    body: unknown,\n    onResponse?: (a: unknown) => void\n  ) {\n    const curReqNum = ++this.requestNumber_;\n\n    const msg = { r: curReqNum, a: action, b: body };\n    this.log_(stringify(msg));\n    assert(\n      this.connected_,\n      \"sendRequest call when we're not connected not allowed.\"\n    );\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  get(query: QueryContext): Promise<string> {\n    this.initConnection_();\n\n    const deferred = new Deferred<string>();\n    const request = {\n      p: query._path.toString(),\n      q: query._queryObject\n    };\n    const outstandingGet = {\n      action: 'g',\n      request,\n      onComplete: (message: { [k: string]: unknown }) => {\n        const payload = message['d'] as string;\n        if (message['s'] === 'ok') {\n          deferred.resolve(payload);\n        } else {\n          deferred.reject(payload);\n        }\n      }\n    };\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    const index = this.outstandingGets_.length - 1;\n\n    if (this.connected_) {\n      this.sendGet_(index);\n    }\n\n    return deferred.promise;\n  }\n\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    this.initConnection_();\n\n    const queryId = query._queryIdentifier;\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'listen() called for non-default but complete query'\n    );\n    assert(\n      !this.listens.get(pathString)!.has(queryId),\n      `listen() called twice for same path/queryId.`\n    );\n    const listenSpec: ListenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString)!.set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  private sendGet_(index: number) {\n    const get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, (message: { [k: string]: unknown }) => {\n      delete this.outstandingGets_[index];\n      this.outstandingGetCount_--;\n      if (this.outstandingGetCount_ === 0) {\n        this.outstandingGets_ = [];\n      }\n      if (get.onComplete) {\n        get.onComplete(message);\n      }\n    });\n  }\n\n  private sendListen_(listenSpec: ListenSpec) {\n    const query = listenSpec.query;\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n\n    const action = 'q';\n\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query._queryObject;\n      req['t'] = listenSpec.tag;\n    }\n\n    req[/*hash*/ 'h'] = listenSpec.hashFn();\n\n    this.sendRequest(action, req, (message: { [k: string]: unknown }) => {\n      const payload: unknown = message[/*data*/ 'd'];\n      const status = message[/*status*/ 's'] as string;\n\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      const currentListenSpec =\n        this.listens.get(pathString) &&\n        this.listens.get(pathString)!.get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  private static warnOnListenWarnings_(payload: unknown, query: QueryContext) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload as any, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec =\n          '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n        const indexPath = query._path.toString();\n        warn(\n          `Using an unspecified index. Your data will be downloaded and ` +\n            `filtered on the client. Consider adding ${indexSpec} at ` +\n            `${indexPath} to your security rules for better performance.`\n        );\n      }\n    }\n  }\n\n  refreshAuthToken(token: string) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  private reduceReconnectDelayIfAdminCredential_(credential: string) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_(\n        'Admin auth credential detected.  Reducing max reconnect time.'\n      );\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  refreshAppCheckToken(token: string | null) {\n    this.appCheckToken_ = token;\n    this.log_('App check token refreshed');\n    if (this.appCheckToken_) {\n      this.tryAppCheck();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us.\n      //If we're not connected, simply delete the credential so we dont become\n      // authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unappeck', {}, () => {});\n      }\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData: { [k: string]: unknown } = { cred: token };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(\n        authMethod,\n        requestData,\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n\n          if (this.authToken_ === token) {\n            if (status === 'ok') {\n              this.invalidAuthTokenCount_ = 0;\n            } else {\n              // Triggers reconnect and force refresh for auth token\n              this.onAuthRevoked_(status, data);\n            }\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given token. If the authentication\n   * attempt fails, it's triggered like the token was revoked (the connection is\n   * closed).\n   */\n  tryAppCheck() {\n    if (this.connected_ && this.appCheckToken_) {\n      this.sendRequest(\n        'appcheck',\n        { 'token': this.appCheckToken_ },\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n          if (status === 'ok') {\n            this.invalidAppCheckTokenCount_ = 0;\n          } else {\n            this.onAppCheckRevoked_(status, data);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  unlisten(query: QueryContext, tag: number | null) {\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'unlisten() called for non-default but complete query'\n    );\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n    }\n  }\n\n  private sendUnlisten_(\n    pathString: string,\n    queryId: string,\n    queryObj: object,\n    tag: number | null\n  ) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  private sendOnDisconnect_(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string) => void\n  ) {\n    const request = { /*path*/ p: pathString, /*data*/ d: data };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, (response: { [k: string]: unknown }) => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(\n            response[/*status*/ 's'] as string,\n            response[/* data */ 'd'] as string\n          );\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.initConnection_();\n\n    const request: { [k: string]: unknown } = {\n      /*path*/ p: pathString,\n      /*data*/ d: data\n    };\n\n    if (hash !== undefined) {\n      request[/*hash*/ 'h'] = hash;\n    }\n\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  private sendPut_(index: number) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n\n    this.sendRequest(action, request, (message: { [k: string]: unknown }) => {\n      this.log_(action + ' response', message);\n\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(\n          message[/*status*/ 's'] as string,\n          message[/* data */ 'd'] as string\n        );\n      }\n    });\n  }\n\n  reportStats(stats: { [k: string]: unknown }) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = { /*counters*/ c: stats };\n      this.log_('reportStats', request);\n\n      this.sendRequest(/*stats*/ 's', request, result => {\n        const status = result[/*status*/ 's'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */ 'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  private onDataMessage_(message: { [k: string]: unknown }) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'] as string;\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/ 'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'] as string, message['b'] as {});\n    }\n  }\n\n  private onDataPush_(action: string, body: { [k: string]: unknown }) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge*/ false,\n        body['t'] as number\n      );\n    } else if (action === 'm') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge=*/ true,\n        body['t'] as number\n      );\n    } else if (action === 'c') {\n      this.onListenRevoked_(\n        body[/*path*/ 'p'] as string,\n        body[/*query*/ 'q'] as unknown[]\n      );\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'apc') {\n      this.onAppCheckRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error(\n        'Unrecognized action received from server: ' +\n          stringify(action) +\n          '\\nAre you using the latest client?'\n      );\n    }\n  }\n\n  private onReady_(timestamp: number, sessionId: string) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  private scheduleConnect_(timeout: number) {\n    assert(\n      !this.realtime_,\n      \"Scheduling a connect when we're already connected/ing?\"\n    );\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout)) as any;\n  }\n\n  private initConnection_() {\n    if (!this.realtime_ && this.firstConnection_) {\n      this.scheduleConnect_(0);\n    }\n  }\n\n  private onVisible_(visible: boolean) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (\n      visible &&\n      !this.visible_ &&\n      this.reconnectDelay_ === this.maxReconnectDelay_\n    ) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n\n  private onOnline_(online: boolean) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  private onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded =\n          new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt =\n        new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(\n        0,\n        this.reconnectDelay_ - timeSinceLastConnectAttempt\n      );\n      reconnectDelay = Math.random() * reconnectDelay;\n\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(\n        this.maxReconnectDelay_,\n        this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER\n      );\n    }\n    this.onConnectStatus_(false);\n  }\n\n  private async establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection: Connection | null = null;\n      const closeFn = function () {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function (msg: object) {\n        assert(\n          connection,\n          \"sendRequest call when we're not connected not allowed.\"\n        );\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      try {\n        // First fetch auth and app check token, and establish connection after\n        // fetching the token was successful\n        const [authToken, appCheckToken] = await Promise.all([\n          this.authTokenProvider_.getToken(forceRefresh),\n          this.appCheckTokenProvider_.getToken(forceRefresh)\n        ]);\n\n        if (!canceled) {\n          log('getToken() completed. Creating connection.');\n          this.authToken_ = authToken && authToken.accessToken;\n          this.appCheckToken_ = appCheckToken && appCheckToken.token;\n          connection = new Connection(\n            connId,\n            this.repoInfo_,\n            this.applicationId_,\n            this.appCheckToken_,\n            this.authToken_,\n            onDataMessage,\n            onReady,\n            onDisconnect,\n            /* onKill= */ reason => {\n              warn(reason + ' (' + this.repoInfo_.toString() + ')');\n              this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n            },\n            lastSessionId\n          );\n        } else {\n          log('getToken() completed but was canceled');\n        }\n      } catch (error) {\n        this.log_('Failed to get token: ' + error);\n        if (!canceled) {\n          if (this.repoInfo_.nodeAdmin) {\n            // This may be a critical error for the Admin Node.js SDK, so log a warning.\n            // But getToken() may also just have temporarily failed, so we still want to\n            // continue retrying.\n            warn(error);\n          }\n          closeFn();\n        }\n      }\n    }\n  }\n\n  interrupt(reason: string) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  resume(reason: string) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  private handleTimestamp_(timestamp: number) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({ serverTimeOffset: delta });\n  }\n\n  private cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/ 'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n\n  private onListenRevoked_(pathString: string, query?: unknown[]) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n\n  private removeListen_(pathString: string, queryId: string): ListenSpec {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString)!;\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n\n  private onAuthRevoked_(statusCode: string, explanation: string) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onAppCheckRevoked_(statusCode: string, explanation: string) {\n    log('App check token revoked: ' + statusCode + '/' + explanation);\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = true;\n    // Note: We don't close the connection as the developer may not have\n    // enforcement enabled. The backend closes connections with enforcements.\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAppCheckTokenCount_++;\n      if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        this.appCheckTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onSecurityDebugPacket_(body: { [k: string]: unknown }) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log(\n          'FIREBASE: ' + (body['msg'] as string).replace('\\n', '\\nFIREBASE: ')\n        );\n      }\n    }\n  }\n\n  private restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n    this.tryAppCheck();\n\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(\n        request.action,\n        request.pathString,\n        request.data,\n        request.onComplete\n      );\n    }\n\n    for (let i = 0; i < this.outstandingGets_.length; i++) {\n      if (this.outstandingGets_[i]) {\n        this.sendGet_(i);\n      }\n    }\n  }\n\n  /**\n   * Sends client stats for first connection\n   */\n  private sendConnectStats_() {\n    const stats: { [k: string]: number } = {};\n\n    let clientName = 'js';\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n\n  private shouldReconnect_(): boolean {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\nimport { Index } from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node {\n  /**\n   * Whether this node is a leaf node.\n   * @returns Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @returns The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param newPriorityNode - New priority to set for the node.\n   * @returns Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param childName - The name of the child to retrieve.\n   * @returns The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param path - The path of the child to retrieve.\n   * @returns The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param childName - The name of the child to find the predecessor of.\n   * @param childNode - The node to find the predecessor of.\n   * @param index - The index to use to determine the predecessor\n   * @returns The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param childName - The name of the child to update.\n   * @param newChildNode - The new child node\n   * @returns The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param path - The path of the child to update.\n   * @param newChildNode - The new child node, which may be an empty node\n   * @returns The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @returns True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @returns The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param action - Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @returns The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): unknown;\n\n  /**\n   * @param exportFormat - True for export format (also wire protocol format).\n   * @returns Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): unknown;\n\n  /**\n   * @returns hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param other - Another node\n   * @returns -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @returns Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @returns This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  isIndexed(indexDefinition: Index): boolean;\n}\n\nexport class NamedNode {\n  constructor(public name: string, public node: Node) {}\n\n  static Wrap(name: string, node: Node) {\n    return new NamedNode(name, node);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Comparator } from '../../util/SortedMap';\nimport { MIN_NAME } from '../../util/util';\nimport { Node, NamedNode } from '../Node';\n\nexport abstract class Index {\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @returns A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> {\n    return this.compare.bind(this);\n  }\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   *\n   * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n\n  /**\n   * @returns a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @returns a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  abstract makePost(indexValue: unknown, name: string): NamedNode;\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { ChildrenNode } from '../ChildrenNode';\nimport { Node, NamedNode } from '../Node';\n\nimport { Index } from './Index';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379\\@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> {\n  private nodeStack_: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>> = [];\n\n  /**\n   * @param node - Node to iterate.\n   * @param isReverse_ - Whether or not to iterate in reverse\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) {\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = { key: node.key, value: node.value } as unknown as T;\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return { key: node.key, value: node.value } as unknown as T;\n    }\n  }\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> {\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @param key - Key associated with this node.\n   * @param value - Value associated with this node.\n   * @param color - Whether this node is red.\n   * @param left - Left child.\n   * @param right - Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n    this.right =\n      right != null ? right : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n  }\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param key - New key for the node, or null.\n   * @param value - New value for the node, or null.\n   * @param color - New color for the node, or null.\n   * @param left - New left child for the node, or null.\n   * @param right - New right child for the node, or null.\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return this.left.count() + 1 + this.right.count();\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return (\n      this.left.inorderTraversal(action) ||\n      !!action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n  }\n\n  /**\n   * @returns The minimum node in the tree.\n   */\n  private min_(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min_();\n    }\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  minKey(): K {\n    return this.min_().key;\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  maxKey(): K {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  /**\n   * @param key - Key to insert.\n   * @param value - Value to insert.\n   * @param comparator - Comparator.\n   * @returns New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n  }\n\n  /**\n   * @param key - The key of the item to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns Whether this is a RED node.\n   */\n  isRed_(): boolean {\n    return this.color;\n  }\n\n  /**\n   * @returns New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns Newt ree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  /**\n   * For testing.\n   *\n   * @returns True if all is well.\n   */\n  private checkMaxDepth_(): boolean {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  check_(): number {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n    }\n    if (this.right.isRed_()) {\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n    }\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> {\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @param comparator - Comparator.\n   * @returns New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode(key, value, null);\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return 0;\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return true;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return false;\n  }\n\n  minKey(): null {\n    return null;\n  }\n\n  maxKey(): null {\n    return null;\n  }\n\n  check_(): number {\n    return 0;\n  }\n\n  /**\n   * @returns Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> {\n  /**\n   * Always use the same empty node, to reduce memory.\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @param comparator_ - Key comparator.\n   * @param root_ - Optional root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) {}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @returns New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @returns New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param key - The key to look up.\n   * @returns The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param key - The key to find the predecessor of\n   * @returns The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n  }\n\n  /**\n   * @returns True if the map is empty.\n   */\n  isEmpty(): boolean {\n    return this.root_.isEmpty();\n  }\n\n  /**\n   * @returns The total number of nodes in the map.\n   */\n  count(): number {\n    return this.root_.count();\n  }\n\n  /**\n   * @returns The minimum key in the map.\n   */\n  minKey(): K | null {\n    return this.root_.minKey();\n  }\n\n  /**\n   * @returns The maximum key in the map.\n   */\n  maxKey(): K | null {\n    return this.root_.maxKey();\n  }\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return this.root_.inorderTraversal(action);\n  }\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return this.root_.reverseTraversal(action);\n  }\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @returns The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../util/util';\n\nimport { NamedNode } from './Node';\n\nexport function NAME_ONLY_COMPARATOR(left: NamedNode, right: NamedNode) {\n  return nameCompare(left.name, right.name);\n}\n\nexport function NAME_COMPARATOR(left: string, right: string) {\n  return nameCompare(left, right);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { doubleToIEEE754String } from '../util/util';\n\nimport { Node } from './Node';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport const priorityHashText = function (priority: string | number): string {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n */\nexport const validatePriorityNode = function (priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' && contains(val as Indexable, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport {\n  Path,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\nimport { doubleToIEEE754String, sha1 } from '../util/util';\n\nimport { ChildrenNodeConstructor } from './ChildrenNode';\nimport { Index } from './indexes/Index';\nimport { Node } from './Node';\nimport { priorityHashText, validatePriorityNode } from './snap';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node {\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @param value_ - The value to store in this leaf node. The object type is\n   * possible in the event of a deferred value\n   * @param priorityNode_ - The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | Indexable,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) {\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return true;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    if (pathIsEmpty(path)) {\n      return this;\n    } else if (pathGetFront(path) === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n  hasChild(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: string, childNode: Node): null {\n    return null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(\n        childName,\n        newChildNode\n      ).updatePriority(this.priorityNode_);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(\n        front !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          pathPopFront(path),\n          newChildNode\n        )\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return 0;\n  }\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): boolean {\n    return false;\n  }\n  val(exportFormat?: boolean): {} {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n      }\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_ as number);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /**\n   * Returns the value of the leaf node.\n   * @returns The value of the node.\n   */\n  getValue(): Indexable | string | number | boolean {\n    return this.value_;\n  }\n  compareTo(other: Node): number {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n    }\n  }\n\n  /**\n   * Comparison specifically for two leaf nodes\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n  withIndex(): Node {\n    return this;\n  }\n  isIndexed(): boolean {\n    return true;\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n    } else {\n      return false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { LeafNode } from '../LeafNode';\nimport { NamedNode, Node } from '../Node';\n\nimport { Index } from './Index';\n\nlet nodeFromJSON: (a: unknown) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: unknown) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport class PriorityIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  makePost(indexValue: unknown, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LLRBNode, SortedMap } from '../util/SortedMap';\n\nimport { NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\nclass Base12Num {\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  constructor(length: number) {\n    const logBase2 = (num: number) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseInt((Math.log(num) / LOG_2) as any, 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n  }\n\n  nextBitIsOne(): boolean {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n  }\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @param childList - Unsorted list of children\n * @param cmp - The comparison method to be used\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\n * type is not NamedNode\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\n */\nexport const buildChildSet = function <K, V>(\n  childList: NamedNode[],\n  cmp: (a: NamedNode, b: NamedNode) => number,\n  keyFn?: (a: NamedNode) => K,\n  mapSortFn?: (a: K, b: K) => number\n): SortedMap<K, V> {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function (\n    low: number,\n    high: number\n  ): LLRBNode<K, V> | null {\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        null,\n        null\n      );\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt((length / 2) as any, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        left,\n        right\n      );\n    }\n  };\n\n  const buildFrom12Array = function (base12: Base12Num): LLRBNode<K, V> {\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function (chunkSize: number, color: boolean) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      attachPennant(\n        new LLRBNode(\n          key,\n          namedNode.node as unknown as V,\n          color,\n          null,\n          childTree\n        )\n      );\n    };\n\n    const attachPennant = function (pennant: LLRBNode<K, V>) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, map, safeGet } from '@firebase/util';\n\nimport { SortedMap } from '../util/SortedMap';\n\nimport { buildChildSet } from './childSet';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX } from './indexes/KeyIndex';\nimport { PRIORITY_INDEX } from './indexes/PriorityIndex';\nimport { NamedNode, Node } from './Node';\n\nlet _defaultIndexMap: IndexMap;\n\nconst fallbackObject = {};\n\nexport class IndexMap {\n  /**\n   * The default IndexMap for nodes without a priority\n   */\n  static get Default(): IndexMap {\n    assert(\n      fallbackObject && PRIORITY_INDEX,\n      'ChildrenNode.ts has not been loaded'\n    );\n    _defaultIndexMap =\n      _defaultIndexMap ||\n      new IndexMap(\n        { '.priority': fallbackObject },\n        { '.priority': PRIORITY_INDEX }\n      );\n    return _defaultIndexMap;\n  }\n\n  constructor(\n    private indexes_: {\n      [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\n    },\n    private indexSet_: { [k: string]: Index }\n  ) {}\n\n  get(indexKey: string): SortedMap<NamedNode, Node> | null {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n\n  hasIndex(indexDefinition: Index): boolean {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  addIndex(\n    indexDefinition: Index,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    assert(\n      indexDefinition !== KEY_INDEX,\n      \"KeyIndex always exists and isn't meant to be added to the IndexMap.\"\n    );\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue =\n        sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = { ...this.indexSet_ };\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = { ...this.indexes_ };\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   */\n  addToIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>, indexName: string) => {\n        const index = safeGet(this.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n        if (indexedChildren === fallbackObject) {\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) {\n            // We need to build this index\n            const childList = [];\n            const iter = existingChildren.getIterator(NamedNode.Wrap);\n            let next = iter.getNext();\n            while (next) {\n              if (next.name !== namedNode.name) {\n                childList.push(next);\n              }\n              next = iter.getNext();\n            }\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n          } else {\n            // No change, this remains a fallback\n            return fallbackObject;\n          }\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          let newChildren = indexedChildren;\n          if (existingSnap) {\n            newChildren = newChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          }\n          return newChildren.insert(namedNode, namedNode.node);\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n  /**\n   * Create a new IndexMap instance with the given value removed\n   */\n  removeFromIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>) => {\n        if (indexedChildren === fallbackObject) {\n          // This is the fallback. Just return it, nothing to do in this case\n          return indexedChildren;\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          if (existingSnap) {\n            return indexedChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          } else {\n            // No record of this child\n            return indexedChildren;\n          }\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathGetLength, pathPopFront } from '../util/Path';\nimport { SortedMap, SortedMapIterator } from '../util/SortedMap';\nimport { MAX_NAME, MIN_NAME, sha1 } from '../util/util';\n\nimport { NAME_COMPARATOR } from './comparators';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX, KeyIndex } from './indexes/KeyIndex';\nimport {\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n} from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { priorityHashText, setMaxNode, validatePriorityNode } from './snap';\n\nexport interface ChildrenNodeConstructor {\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n}\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n */\nexport class ChildrenNode implements Node {\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode {\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n  }\n\n  /**\n   * @param children_ - List of children of this node..\n   * @param priorityNode_ - The priority of this node (as a snapshot node).\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) {\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(pathPopFront(path));\n  }\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean {\n    return this.children_.get(childName) !== null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      const newPriority = newChildren.isEmpty()\n        ? EMPTY_NODE\n        : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(\n        pathGetFront(path) !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        pathPopFront(path),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return this.children_.isEmpty();\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return this.children_.count();\n  }\n\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const obj: { [k: string]: unknown } = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key: string, childNode: Node) => {\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array: unknown[] = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) {\n        array[key as unknown as number] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  getFirstChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  getFirstChild(indexDefinition: Index): NamedNode | null {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   */\n  getLastChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  getLastChild(indexDefinition: Index): NamedNode | null {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n  forEachChild(\n    index: Index,\n    action: (key: string, node: Node) => boolean | void\n  ): boolean {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n  }\n\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n  compareTo(other: ChildrenNode): number {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n  withIndex(indexDefinition: Index): Node {\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n  isIndexed(index: Index): boolean {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\n\nexport class MaxNode extends ChildrenNode {\n  constructor() {\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n  }\n\n  compareTo(other: Node): number {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other: Node): boolean {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority(): MaxNode {\n    return this;\n  }\n\n  getImmediateChild(childName: string): ChildrenNode {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n}\n\n/**\n * Marker that will sort higher than any other snapshot.\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' {\n  interface NamedNode {\n    MIN: NamedNode;\n    MAX: NamedNode;\n  }\n}\n\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { SortedMap } from '../util/SortedMap';\nimport { each } from '../util/util';\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param json - JSON to create a node for.\n * @param priority - Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n */\nexport function nodeFromJSON(\n  json: unknown | null,\n  priority: unknown = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | Indexable;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    each(json, (key: string, childData: unknown) => {\n      if (contains(json as object, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathIsEmpty, pathSlice } from '../../util/Path';\nimport { MAX_NAME, nameCompare } from '../../util/util';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n  toString(): string {\n    return pathSlice(this.indexPath_, 0).join('/');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class ValueIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MAX;\n  }\n\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport {\n  tryParseInt,\n  MAX_NAME,\n  MIN_NAME,\n  INTEGER_32_MIN,\n  INTEGER_32_MAX\n} from '../util/util';\n\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS =\n  '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\nconst MIN_PUSH_CHAR = '-';\n\nconst MAX_PUSH_CHAR = 'z';\n\nconst MAX_KEY_LEN = 786;\n\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexport const nextPushId = (function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars: number[] = [];\n\n  return function (now: number) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n\n    return id;\n  };\n})();\n\nexport const successor = function (key: string) {\n  if (key === '' + INTEGER_32_MAX) {\n    // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n    return MIN_PUSH_CHAR;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt + 1);\n  }\n  const next = new Array(key.length);\n\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n\n  if (next.length < MAX_KEY_LEN) {\n    next.push(MIN_PUSH_CHAR);\n    return next.join('');\n  }\n\n  let i = next.length - 1;\n\n  while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\n    i--;\n  }\n\n  // `successor` was called on the largest possible key, so return the\n  // MAX_NAME, which sorts larger than all keys.\n  if (i === -1) {\n    return MAX_NAME;\n  }\n\n  const source = next[i];\n  const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\n  next[i] = sourcePlusOne;\n\n  return next.slice(0, i + 1).join('');\n};\n\n// `key` is assumed to be non-empty.\nexport const predecessor = function (key: string) {\n  if (key === '' + INTEGER_32_MIN) {\n    return MIN_NAME;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt - 1);\n  }\n  const next = new Array(key.length);\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n  // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n  // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n  // than that, `predecessor(predecessor(key))`, is\n  //\n  // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n  //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n  //\n  // analogous to increment/decrement for base-10 integers.\n  //\n  // This works because lexigographic comparison works character-by-character,\n  // using length as a tie-breaker if one key is a prefix of the other.\n  if (next[next.length - 1] === MIN_PUSH_CHAR) {\n    if (next.length === 1) {\n      // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\n      return '' + INTEGER_32_MAX;\n    }\n    delete next[next.length - 1];\n    return next.join('');\n  }\n  // Replace the last character with it's immediate predecessor, and\n  // fill the suffix of the key with MAX_PUSH_CHAR. This is the\n  // lexicographically largest possible key smaller than `key`.\n  next[next.length - 1] = PUSH_CHARS.charAt(\n    PUSH_CHARS.indexOf(next[next.length - 1]) - 1\n  );\n  return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nexport const enum ChangeType {\n  /** Event type for a child added */\n  CHILD_ADDED = 'child_added',\n  /** Event type for a child removed */\n  CHILD_REMOVED = 'child_removed',\n  /** Event type for a child changed */\n  CHILD_CHANGED = 'child_changed',\n  /** Event type for a child moved */\n  CHILD_MOVED = 'child_moved',\n  /** Event type for a value change */\n  VALUE = 'value'\n}\n\nexport interface Change {\n  /** @param type - The event type */\n  type: ChangeType;\n  /** @param snapshotNode - The data */\n  snapshotNode: Node;\n  /** @param childName - The name for this child, if it's a child even */\n  childName?: string;\n  /** @param oldSnap - Used for intermediate processing of child changed events */\n  oldSnap?: Node;\n  /**  * @param prevName - The name for the previous child, if applicable */\n  prevName?: string | null;\n}\n\nexport function changeValue(snapshotNode: Node): Change {\n  return { type: ChangeType.VALUE, snapshotNode };\n}\n\nexport function changeChildAdded(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_ADDED, snapshotNode, childName };\n}\n\nexport function changeChildRemoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_REMOVED, snapshotNode, childName };\n}\n\nexport function changeChildChanged(\n  childName: string,\n  snapshotNode: Node,\n  oldSnap: Node\n): Change {\n  return {\n    type: ChangeType.CHILD_CHANGED,\n    snapshotNode,\n    childName,\n    oldSnap\n  };\n}\n\nexport function changeChildMoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_MOVED, snapshotNode, childName };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\n\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n */\nexport class IndexedFilter implements NodeFilter {\n  constructor(private readonly index_: Index) {}\n\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    assert(\n      snap.isIndexed(this.index_),\n      'A node must be indexed if only a child is updated'\n    );\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (\n      oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))\n    ) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(\n            changeChildRemoved(key, oldChild)\n          );\n        } else {\n          assert(\n            snap.isLeafNode(),\n            'A child remove without an old child only makes sense on a leaf node'\n          );\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(\n          changeChildChanged(key, newChild, oldChild)\n        );\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(\n              changeChildRemoved(key, childNode)\n            );\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(\n                changeChildChanged(key, childNode, oldChild)\n              );\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(\n              changeChildAdded(key, childNode)\n            );\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n  filtersNodes(): boolean {\n    return false;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NamedNode, Node } from '../../../core/snap/Node';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Path } from '../../util/Path';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n */\nexport class RangedFilter implements NodeFilter {\n  private indexedFilter_: IndexedFilter;\n\n  private index_: Index;\n\n  private startPost_: NamedNode;\n\n  private endPost_: NamedNode;\n\n  constructor(params: QueryParams) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n  }\n\n  getStartPost(): NamedNode {\n    return this.startPost_;\n  }\n\n  getEndPost(): NamedNode {\n    return this.endPost_;\n  }\n\n  matches(node: NamedNode): boolean {\n    return (\n      this.index_.compare(this.getStartPost(), node) <= 0 &&\n      this.index_.compare(node, this.getEndPost()) <= 0\n    );\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(\n      snap,\n      key,\n      newChild,\n      affectedPath,\n      source,\n      optChangeAccumulator\n    );\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(\n      oldSnap,\n      filtered,\n      optChangeAccumulator\n    );\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.indexedFilter_;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private static getStartPost_(params: QueryParams): NamedNode {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n\n  private static getEndPost_(params: QueryParams): NamedNode {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { NamedNode, Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\nimport { RangedFilter } from './RangedFilter';\n\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n */\nexport class LimitedFilter implements NodeFilter {\n  private readonly rangedFilter_: RangedFilter;\n\n  private readonly index_: Index;\n\n  private readonly limit_: number;\n\n  private readonly reverse_: boolean;\n\n  constructor(params: QueryParams) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_\n        .getIndexedFilter()\n        .updateChild(\n          snap,\n          key,\n          newChild,\n          affectedPath,\n          source,\n          optChangeAccumulator\n        );\n    } else {\n      return this.fullLimitUpdateChild_(\n        snap,\n        key,\n        newChild,\n        source,\n        optChangeAccumulator\n      );\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (\n        this.limit_ * 2 < newSnap.numChildren() &&\n        newSnap.isIndexed(this.index_)\n      ) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = (newSnap as ChildrenNode).getReverseIteratorFrom(\n            this.rangedFilter_.getEndPost(),\n            this.index_\n          );\n        } else {\n          iterator = (newSnap as ChildrenNode).getIteratorFrom(\n            this.rangedFilter_.getStartPost(),\n            this.index_\n          );\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          let inRange;\n          if (this.reverse_) {\n            inRange =\n              this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;\n          } else {\n            inRange =\n              this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;\n          }\n          if (inRange) {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          } else {\n            // if we have reached the end post, we cannot keep adding elemments\n            break;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(\n          ChildrenNode.EMPTY_NODE\n        ) as ChildrenNode;\n        let startPost;\n        let endPost;\n        let cmp;\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n          startPost = this.rangedFilter_.getEndPost();\n          endPost = this.rangedFilter_.getStartPost();\n          const indexCompare = this.index_.getCompare();\n          cmp = (a: NamedNode, b: NamedNode) => indexCompare(b, a);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n          startPost = this.rangedFilter_.getStartPost();\n          endPost = this.rangedFilter_.getEndPost();\n          cmp = this.index_.getCompare();\n        }\n\n        let count = 0;\n        let foundStartPost = false;\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n          if (!foundStartPost && cmp(startPost, next) <= 0) {\n            // start adding\n            foundStartPost = true;\n          }\n          const inRange =\n            foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(\n              next.name,\n              ChildrenNode.EMPTY_NODE\n            );\n          }\n        }\n      }\n    }\n    return this.rangedFilter_\n      .getIndexedFilter()\n      .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private fullLimitUpdateChild_(\n    snap: Node,\n    childKey: string,\n    childSnap: Node,\n    source: CompleteChildSource,\n    changeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a: NamedNode, b: NamedNode) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap as ChildrenNode;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_\n      ? oldEventCache.getFirstChild(this.index_)\n      : (oldEventCache.getLastChild(this.index_) as NamedNode);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(\n        this.index_,\n        windowBoundary,\n        this.reverse_\n      );\n      while (\n        nextChild != null &&\n        (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))\n      ) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(\n          this.index_,\n          nextChild,\n          this.reverse_\n        );\n      }\n      const compareNext =\n        nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow =\n        inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildChanged(childKey, childSnap, oldChildSnap)\n          );\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(childKey, oldChildSnap)\n          );\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(\n          childKey,\n          ChildrenNode.EMPTY_NODE\n        );\n        const nextChildInRange =\n          nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(\n              changeChildAdded(nextChild.name, nextChild.node)\n            );\n          }\n          return newEventCache.updateImmediateChild(\n            nextChild.name,\n            nextChild.node\n          );\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(windowBoundary.name, windowBoundary.node)\n          );\n          changeAccumulator.trackChildChange(\n            changeChildAdded(childKey, childSnap)\n          );\n        }\n        return oldEventCache\n          .updateImmediateChild(childKey, childSnap)\n          .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, stringify } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { PRIORITY_INDEX, PriorityIndex } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { predecessor, successor } from '../util/NextPushId';\nimport { MAX_NAME, MIN_NAME } from '../util/util';\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { RangedFilter } from './filter/RangedFilter';\n\n/**\n * Wire Protocol Constants\n */\nconst enum WIRE_PROTOCOL_CONSTANTS {\n  INDEX_START_VALUE = 'sp',\n  INDEX_START_NAME = 'sn',\n  INDEX_END_VALUE = 'ep',\n  INDEX_END_NAME = 'en',\n  LIMIT = 'l',\n  VIEW_FROM = 'vf',\n  VIEW_FROM_LEFT = 'l',\n  VIEW_FROM_RIGHT = 'r',\n  INDEX = 'i'\n}\n\n/**\n * REST Query Constants\n */\nconst enum REST_QUERY_CONSTANTS {\n  ORDER_BY = 'orderBy',\n  PRIORITY_INDEX = '$priority',\n  VALUE_INDEX = '$value',\n  KEY_INDEX = '$key',\n  START_AT = 'startAt',\n  END_AT = 'endAt',\n  LIMIT_TO_FIRST = 'limitToFirst',\n  LIMIT_TO_LAST = 'limitToLast'\n}\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n *\n * @internal\n */\nexport class QueryParams {\n  limitSet_ = false;\n  startSet_ = false;\n  startNameSet_ = false;\n  startAfterSet_ = false;\n  endSet_ = false;\n  endNameSet_ = false;\n  endBeforeSet_ = false;\n  limit_ = 0;\n  viewFrom_ = '';\n  indexStartValue_: unknown | null = null;\n  indexStartName_ = '';\n  indexEndValue_: unknown | null = null;\n  indexEndName_ = '';\n  index_: PriorityIndex = PRIORITY_INDEX;\n\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  hasStartAfter(): boolean {\n    return this.startAfterSet_;\n  }\n\n  hasEndBefore(): boolean {\n    return this.endBeforeSet_;\n  }\n\n  /**\n   * @returns True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   */\n  getIndexStartValue(): unknown {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   */\n  getIndexEndValue(): unknown {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @returns True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n\n  copy(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n}\n\nexport function queryParamsGetNodeFilter(queryParams: QueryParams): NodeFilter {\n  if (queryParams.loadsAllData()) {\n    return new IndexedFilter(queryParams.getIndex());\n  } else if (queryParams.hasLimit()) {\n    return new LimitedFilter(queryParams);\n  } else {\n    return new RangedFilter(queryParams);\n  }\n}\n\nexport function queryParamsLimit(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = '';\n  return newParams;\n}\n\nexport function queryParamsLimitToFirst(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n  return newParams;\n}\n\nexport function queryParamsLimitToLast(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n  return newParams;\n}\n\nexport function queryParamsStartAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.startSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexStartValue_ = indexValue;\n  if (key != null) {\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n  } else {\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsStartAfter(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = successor(indexValue as string);\n    }\n    params = queryParamsStartAt(queryParams, indexValue, key);\n  } else {\n    let childKey: string;\n    if (key == null) {\n      childKey = MAX_NAME;\n    } else {\n      childKey = successor(key);\n    }\n    params = queryParamsStartAt(queryParams, indexValue, childKey);\n  }\n  params.startAfterSet_ = true;\n  return params;\n}\n\nexport function queryParamsEndAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.endSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexEndValue_ = indexValue;\n  if (key !== undefined) {\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n  } else {\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsEndBefore(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let childKey: string;\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX) {\n    if (typeof indexValue === 'string') {\n      indexValue = predecessor(indexValue as string);\n    }\n    params = queryParamsEndAt(queryParams, indexValue, key);\n  } else {\n    if (key == null) {\n      childKey = MIN_NAME;\n    } else {\n      childKey = predecessor(key);\n    }\n    params = queryParamsEndAt(queryParams, indexValue, childKey);\n  }\n  params.endBeforeSet_ = true;\n  return params;\n}\n\nexport function queryParamsOrderBy(\n  queryParams: QueryParams,\n  index: Index\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n\n/**\n * Returns a set of REST query string parameters representing this query.\n *\n * @returns query string parameters\n */\nexport function queryParamsToRestQueryStringParameters(\n  queryParams: QueryParams\n): Record<string, string | number> {\n  const qs: Record<string, string | number> = {};\n\n  if (queryParams.isDefault()) {\n    return qs;\n  }\n\n  let orderBy;\n  if (queryParams.index_ === PRIORITY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.PRIORITY_INDEX;\n  } else if (queryParams.index_ === VALUE_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.VALUE_INDEX;\n  } else if (queryParams.index_ === KEY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.KEY_INDEX;\n  } else {\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n  }\n  qs[REST_QUERY_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n  if (queryParams.startSet_) {\n    qs[REST_QUERY_CONSTANTS.START_AT] = stringify(queryParams.indexStartValue_);\n    if (queryParams.startNameSet_) {\n      qs[REST_QUERY_CONSTANTS.START_AT] +=\n        ',' + stringify(queryParams.indexStartName_);\n    }\n  }\n\n  if (queryParams.endSet_) {\n    qs[REST_QUERY_CONSTANTS.END_AT] = stringify(queryParams.indexEndValue_);\n    if (queryParams.endNameSet_) {\n      qs[REST_QUERY_CONSTANTS.END_AT] +=\n        ',' + stringify(queryParams.indexEndName_);\n    }\n  }\n\n  if (queryParams.limitSet_) {\n    if (queryParams.isViewFromLeft()) {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_FIRST] = queryParams.limit_;\n    } else {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_LAST] = queryParams.limit_;\n    }\n  }\n\n  return qs;\n}\n\nexport function queryParamsGetQueryObject(\n  queryParams: QueryParams\n): Record<string, unknown> {\n  const obj: Record<string, unknown> = {};\n  if (queryParams.startSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] =\n      queryParams.indexStartValue_;\n    if (queryParams.startNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] =\n        queryParams.indexStartName_;\n    }\n  }\n  if (queryParams.endSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = queryParams.indexEndValue_;\n    if (queryParams.endNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = queryParams.indexEndName_;\n    }\n  }\n  if (queryParams.limitSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = queryParams.limit_;\n    let viewFrom = queryParams.viewFrom_;\n    if (viewFrom === '') {\n      if (queryParams.isViewFromLeft()) {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n      } else {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n      }\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n  }\n  // For now, priority index is the default, so we only specify if it's some other index\n  if (queryParams.index_ !== PRIORITY_INDEX) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = queryParams.index_.toString();\n  }\n  return obj;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  jsonEval,\n  safeGet,\n  querystring,\n  Deferred\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { logWrapper, warn } from './util/util';\nimport { QueryContext } from './view/EventRegistration';\nimport { queryParamsToRestQueryStringParameters } from './view/QueryParams';\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nexport class ReadonlyRestClient extends ServerActions {\n  reportStats(stats: { [k: string]: unknown }): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /** @private {function(...[*])} */\n  private log_: (...args: unknown[]) => void = logWrapper('p:rest:');\n\n  /**\n   * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n   * that's been removed. :-/\n   */\n  private listens_: { [k: string]: object } = {};\n\n  static getListenId_(query: QueryContext, tag?: number | null): string {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(\n        query._queryParams.isDefault(),\n        \"should have a tag if it's not a default query.\"\n      );\n      return query._path.toString();\n    }\n  }\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider\n  ) {\n    super();\n  }\n\n  /** @inheritDoc */\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\n\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n        }\n\n        if (safeGet(this.listens_, listenId) === thisListen) {\n          let status;\n          if (!error) {\n            status = 'ok';\n          } else if (error === 401) {\n            status = 'permission_denied';\n          } else {\n            status = 'rest_error:' + error;\n          }\n\n          onComplete(status, null);\n        }\n      }\n    );\n  }\n\n  /** @inheritDoc */\n  unlisten(query: QueryContext, tag: number | null) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  get(query: QueryContext): Promise<string> {\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    const pathString = query._path.toString();\n\n    const deferred = new Deferred<string>();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(\n            pathString,\n            data,\n            /*isMerge=*/ false,\n            /*tag=*/ null\n          );\n          deferred.resolve(data as string);\n        } else {\n          deferred.reject(new Error(data as string));\n        }\n      }\n    );\n    return deferred.promise;\n  }\n\n  /** @inheritDoc */\n  refreshAuthToken(token: string) {\n    // no-op since we just always call getToken.\n  }\n\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   */\n  private restRequest_(\n    pathString: string,\n    queryStringParameters: { [k: string]: string | number } = {},\n    callback: ((a: number | null, b?: unknown) => void) | null\n  ) {\n    queryStringParameters['format'] = 'export';\n\n    return Promise.all([\n      this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\n      this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\n    ]).then(([authToken, appCheckToken]) => {\n      if (authToken && authToken.accessToken) {\n        queryStringParameters['auth'] = authToken.accessToken;\n      }\n      if (appCheckToken && appCheckToken.token) {\n        queryStringParameters['ac'] = appCheckToken.token;\n      }\n\n      const url =\n        (this.repoInfo_.secure ? 'https://' : 'http://') +\n        this.repoInfo_.host +\n        pathString +\n        '?' +\n        'ns=' +\n        this.repoInfo_.namespace +\n        querystring(queryStringParameters);\n\n      this.log_('Sending REST request for ' + url);\n      const xhr = new XMLHttpRequest();\n      xhr.onreadystatechange = () => {\n        if (callback && xhr.readyState === 4) {\n          this.log_(\n            'REST Response for ' + url + ' received. status:',\n            xhr.status,\n            'response:',\n            xhr.responseText\n          );\n          let res = null;\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = jsonEval(xhr.responseText);\n            } catch (e) {\n              warn(\n                'Failed to parse JSON response for ' +\n                  url +\n                  ': ' +\n                  xhr.responseText\n              );\n            }\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn(\n                'Got unsuccessful REST response for ' +\n                  url +\n                  ' Status: ' +\n                  xhr.status\n              );\n            }\n            callback(xhr.status);\n          }\n          callback = null;\n        }\n      };\n\n      xhr.open('GET', url, /*asynchronous=*/ true);\n      xhr.send();\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n */\nexport class SnapshotHolder {\n  private rootNode_: Node = ChildrenNode.EMPTY_NODE;\n\n  getNode(path: Path): Node {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path: Path, newSnapshotNode: Node) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\nimport { Path, pathGetFront, pathIsEmpty, pathPopFront } from './util/Path';\n\n/**\n * Helper class to store a sparse set of snapshots.\n */\nexport interface SparseSnapshotTree {\n  value: Node | null;\n  readonly children: Map<string, SparseSnapshotTree>;\n}\n\nexport function newSparseSnapshotTree(): SparseSnapshotTree {\n  return {\n    value: null,\n    children: new Map()\n  };\n}\n\n/**\n * Gets the node stored at the given path if one exists.\n * Only seems to be used in tests.\n *\n * @param path - Path to look up snapshot for.\n * @returns The retrieved node, or null.\n */\nexport function sparseSnapshotTreeFind(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): Node | null {\n  if (sparseSnapshotTree.value != null) {\n    return sparseSnapshotTree.value.getChild(path);\n  } else if (!pathIsEmpty(path) && sparseSnapshotTree.children.size > 0) {\n    const childKey = pathGetFront(path);\n    path = pathPopFront(path);\n    if (sparseSnapshotTree.children.has(childKey)) {\n      const childTree = sparseSnapshotTree.children.get(childKey);\n      return sparseSnapshotTreeFind(childTree, path);\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}\n\n/**\n * Stores the given node at the specified path. If there is already a node\n * at a shallower path, it merges the new data into that snapshot node.\n *\n * @param path - Path to look up snapshot for.\n * @param data - The new data, or null.\n */\nexport function sparseSnapshotTreeRemember(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path,\n  data: Node\n): void {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = data;\n    sparseSnapshotTree.children.clear();\n  } else if (sparseSnapshotTree.value !== null) {\n    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n  } else {\n    const childKey = pathGetFront(path);\n    if (!sparseSnapshotTree.children.has(childKey)) {\n      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n    }\n\n    const child = sparseSnapshotTree.children.get(childKey);\n    path = pathPopFront(path);\n    sparseSnapshotTreeRemember(child, path, data);\n  }\n}\n\n/**\n * Purge the data at path from the cache.\n *\n * @param path - Path to look up snapshot for.\n * @returns True if this node should now be removed.\n */\nexport function sparseSnapshotTreeForget(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): boolean {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = null;\n    sparseSnapshotTree.children.clear();\n    return true;\n  } else {\n    if (sparseSnapshotTree.value !== null) {\n      if (sparseSnapshotTree.value.isLeafNode()) {\n        // We're trying to forget a node that doesn't exist\n        return false;\n      } else {\n        const value = sparseSnapshotTree.value;\n        sparseSnapshotTree.value = null;\n\n        value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n        });\n\n        return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n      }\n    } else if (sparseSnapshotTree.children.size > 0) {\n      const childKey = pathGetFront(path);\n      path = pathPopFront(path);\n      if (sparseSnapshotTree.children.has(childKey)) {\n        const safeToRemove = sparseSnapshotTreeForget(\n          sparseSnapshotTree.children.get(childKey),\n          path\n        );\n        if (safeToRemove) {\n          sparseSnapshotTree.children.delete(childKey);\n        }\n      }\n\n      return sparseSnapshotTree.children.size === 0;\n    } else {\n      return true;\n    }\n  }\n}\n\n/**\n * Recursively iterates through all of the stored tree and calls the\n * callback on each one.\n *\n * @param prefixPath - Path to look up node for.\n * @param func - The function to invoke for each tree.\n */\nexport function sparseSnapshotTreeForEachTree(\n  sparseSnapshotTree: SparseSnapshotTree,\n  prefixPath: Path,\n  func: (a: Path, b: Node) => unknown\n): void {\n  if (sparseSnapshotTree.value !== null) {\n    func(prefixPath, sparseSnapshotTree.value);\n  } else {\n    sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n      const path = new Path(prefixPath.toString() + '/' + key);\n      sparseSnapshotTreeForEachTree(tree, path, func);\n    });\n  }\n}\n\n/**\n * Iterates through each immediate child and triggers the callback.\n * Only seems to be used in tests.\n *\n * @param func - The function to invoke for each child.\n */\nexport function sparseSnapshotTreeForEachChild(\n  sparseSnapshotTree: SparseSnapshotTree,\n  func: (a: string, b: SparseSnapshotTree) => void\n): void {\n  sparseSnapshotTree.children.forEach((tree, key) => {\n    func(key, tree);\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ - The collection to \"listen\" to.\n */\nexport class StatsListener {\n  private last_: { [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) {}\n\n  get(): { [k: string]: number } {\n    const newStats = this.collection_.get();\n\n    const delta = { ...newStats };\n    if (this.last_) {\n      each(this.last_, (stat: string, value: number) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n\n    return delta;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\nimport { ServerActions } from '../ServerActions';\nimport { setTimeoutNonBlocking, each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\nimport { StatsListener } from './StatsListener';\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\nexport class StatsReporter {\n  private statsListener_: StatsListener;\n  statsToReport_: { [k: string]: boolean } = {};\n\n  constructor(collection: StatsCollection, private server_: ServerActions) {\n    this.statsListener_ = new StatsListener(collection);\n\n    const timeout =\n      FIRST_STATS_MIN_TIME +\n      (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  private reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats: typeof stats = {};\n    let haveStatsToReport = false;\n\n    each(stats, (stat: string, value: number) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n\n    // queue our next run.\n    setTimeoutNonBlocking(\n      this.reportStats_.bind(this),\n      Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)\n    );\n  }\n}\n\nexport function statsReporterIncludeStat(\n  reporter: StatsReporter,\n  stat: string\n) {\n  reporter.statsToReport_[stat] = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  source: OperationSource;\n\n  type: OperationType;\n\n  path: Path;\n\n  operationForChild(childName: string): Operation | null;\n}\n\nexport interface OperationSource {\n  fromUser: boolean;\n  fromServer: boolean;\n  queryId: string | null;\n  tagged: boolean;\n}\n\nexport function newOperationSourceUser(): OperationSource {\n  return {\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServer(): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServerTaggedQuery(\n  queryId: string\n): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId,\n    tagged: true\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { newOperationSourceUser, Operation, OperationType } from './Operation';\n\nexport class AckUserWrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.ACK_USER_WRITE;\n\n  /** @inheritDoc */\n  source = newOperationSourceUser();\n\n  /**\n   * @param affectedTree - A tree containing true for each affected path. Affected paths can't overlap.\n   */\n  constructor(\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public affectedTree: ImmutableTree<boolean>,\n    /** @inheritDoc */ public revert: boolean\n  ) {}\n  operationForChild(childName: string): AckUserWrite {\n    if (!pathIsEmpty(this.path)) {\n      assert(\n        pathGetFront(this.path) === childName,\n        'operationForChild called for unrelated child.'\n      );\n      return new AckUserWrite(\n        pathPopFront(this.path),\n        this.affectedTree,\n        this.revert\n      );\n    } else if (this.affectedTree.value != null) {\n      assert(\n        this.affectedTree.children.isEmpty(),\n        'affectedTree should not have overlapping affected paths.'\n      );\n      // All child locations are affected as well; just return same operation.\n      return this;\n    } else {\n      const childTree = this.affectedTree.subtree(new Path(childName));\n      return new AckUserWrite(newEmptyPath(), childTree, this.revert);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class ListenComplete implements Operation {\n  /** @inheritDoc */\n  type = OperationType.LISTEN_COMPLETE;\n\n  constructor(public source: OperationSource, public path: Path) {}\n\n  operationForChild(childName: string): ListenComplete {\n    if (pathIsEmpty(this.path)) {\n      return new ListenComplete(this.source, newEmptyPath());\n    } else {\n      return new ListenComplete(this.source, pathPopFront(this.path));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class Overwrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.OVERWRITE;\n\n  constructor(\n    public source: OperationSource,\n    public path: Path,\n    public snap: Node\n  ) {}\n\n  operationForChild(childName: string): Overwrite {\n    if (pathIsEmpty(this.path)) {\n      return new Overwrite(\n        this.source,\n        newEmptyPath(),\n        this.snap.getImmediateChild(childName)\n      );\n    } else {\n      return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\n\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /** @inheritDoc */ public source: OperationSource,\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n  operationForChild(childName: string): Operation {\n    if (pathIsEmpty(this.path)) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, newEmptyPath(), childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, newEmptyPath(), childTree);\n      }\n    } else {\n      assert(\n        pathGetFront(this.path) === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, pathPopFront(this.path), this.children);\n    }\n  }\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nexport class CacheNode {\n  constructor(\n    private node_: Node,\n    private fullyInitialized_: boolean,\n    private filtered_: boolean\n  ) {}\n\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   */\n  isFullyInitialized(): boolean {\n    return this.fullyInitialized_;\n  }\n\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   */\n  isFiltered(): boolean {\n    return this.filtered_;\n  }\n\n  isCompleteForPath(path: Path): boolean {\n    if (pathIsEmpty(path)) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = pathGetFront(path);\n    return this.isCompleteForChild(childKey);\n  }\n\n  isCompleteForChild(key: string): boolean {\n    return (\n      (this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key)\n    );\n  }\n\n  getNode(): Node {\n    return this.node_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assertionError } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\n\nimport { Change, ChangeType, changeChildMoved } from './Change';\nimport { Event } from './Event';\nimport { EventRegistration, QueryContext } from './EventRegistration';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n */\nexport class EventGenerator {\n  index_: Index;\n\n  constructor(public query_: QueryContext) {\n    this.index_ = this.query_._queryParams.getIndex();\n  }\n}\n\n/**\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n *\n * Notes:\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\n *    our index.\n *  - prevName will be calculated based on the index ordering.\n */\nexport function eventGeneratorGenerateEventsForChanges(\n  eventGenerator: EventGenerator,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistrations: EventRegistration[]\n): Event[] {\n  const events: Event[] = [];\n  const moves: Change[] = [];\n\n  changes.forEach(change => {\n    if (\n      change.type === ChangeType.CHILD_CHANGED &&\n      eventGenerator.index_.indexedValueChanged(\n        change.oldSnap as Node,\n        change.snapshotNode\n      )\n    ) {\n      moves.push(changeChildMoved(change.childName, change.snapshotNode));\n    }\n  });\n\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_REMOVED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_ADDED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_MOVED,\n    moves,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_CHANGED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.VALUE,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n\n  return events;\n}\n\n/**\n * Given changes of a single change type, generate the corresponding events.\n */\nfunction eventGeneratorGenerateEventsForType(\n  eventGenerator: EventGenerator,\n  events: Event[],\n  eventType: string,\n  changes: Change[],\n  registrations: EventRegistration[],\n  eventCache: Node\n) {\n  const filteredChanges = changes.filter(change => change.type === eventType);\n\n  filteredChanges.sort((a, b) =>\n    eventGeneratorCompareChanges(eventGenerator, a, b)\n  );\n  filteredChanges.forEach(change => {\n    const materializedChange = eventGeneratorMaterializeSingleChange(\n      eventGenerator,\n      change,\n      eventCache\n    );\n    registrations.forEach(registration => {\n      if (registration.respondsTo(change.type)) {\n        events.push(\n          registration.createEvent(materializedChange, eventGenerator.query_)\n        );\n      }\n    });\n  });\n}\n\nfunction eventGeneratorMaterializeSingleChange(\n  eventGenerator: EventGenerator,\n  change: Change,\n  eventCache: Node\n): Change {\n  if (change.type === 'value' || change.type === 'child_removed') {\n    return change;\n  } else {\n    change.prevName = eventCache.getPredecessorChildName(\n      change.childName,\n      change.snapshotNode,\n      eventGenerator.index_\n    );\n    return change;\n  }\n}\n\nfunction eventGeneratorCompareChanges(\n  eventGenerator: EventGenerator,\n  a: Change,\n  b: Change\n) {\n  if (a.childName == null || b.childName == null) {\n    throw assertionError('Should only compare child_ events.');\n  }\n  const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n  const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n  return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nimport { CacheNode } from './CacheNode';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n */\nexport interface ViewCache {\n  readonly eventCache: CacheNode;\n  readonly serverCache: CacheNode;\n}\n\nexport function newViewCache(\n  eventCache: CacheNode,\n  serverCache: CacheNode\n): ViewCache {\n  return { eventCache, serverCache };\n}\n\nexport function viewCacheUpdateEventSnap(\n  viewCache: ViewCache,\n  eventSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    new CacheNode(eventSnap, complete, filtered),\n    viewCache.serverCache\n  );\n}\n\nexport function viewCacheUpdateServerSnap(\n  viewCache: ViewCache,\n  serverSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    viewCache.eventCache,\n    new CacheNode(serverSnap, complete, filtered)\n  );\n}\n\nexport function viewCacheGetCompleteEventSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.eventCache.isFullyInitialized()\n    ? viewCache.eventCache.getNode()\n    : null;\n}\n\nexport function viewCacheGetCompleteServerSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.serverCache.isFullyInitialized()\n    ? viewCache.serverCache.getNode()\n    : null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './Path';\nimport { SortedMap } from './SortedMap';\nimport { each, stringCompare } from './util';\n\nlet emptyChildrenSingleton: SortedMap<string, ImmutableTree<null>>;\n\n/**\n * Singleton empty children collection.\n *\n */\nconst EmptyChildren = (): SortedMap<string, ImmutableTree<null>> => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap<string, ImmutableTree<null>>(\n      stringCompare\n    );\n  }\n  return emptyChildrenSingleton;\n};\n\n/**\n * A tree with immutable elements.\n */\nexport class ImmutableTree<T> {\n  static fromObject<T>(obj: { [k: string]: T }): ImmutableTree<T> {\n    let tree: ImmutableTree<T> = new ImmutableTree<T>(null);\n    each(obj, (childPath: string, childSnap: T) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n\n  constructor(\n    public readonly value: T | null,\n    public readonly children: SortedMap<\n      string,\n      ImmutableTree<T>\n    > = EmptyChildren()\n  ) {}\n\n  /**\n   * True if the value is empty and there are no children\n   */\n  isEmpty(): boolean {\n    return this.value === null && this.children.isEmpty();\n  }\n\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\n   * objects on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param relativePath - The remainder of the path\n   * @param predicate - The predicate to satisfy to return a node\n   */\n  findRootMostMatchingPathAndValue(\n    relativePath: Path,\n    predicate: (a: T) => boolean\n  ): { path: Path; value: T } | null {\n    if (this.value != null && predicate(this.value)) {\n      return { path: newEmptyPath(), value: this.value };\n    } else {\n      if (pathIsEmpty(relativePath)) {\n        return null;\n      } else {\n        const front = pathGetFront(relativePath);\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue =\n            child.findRootMostMatchingPathAndValue(\n              pathPopFront(relativePath),\n              predicate\n            );\n          if (childExistingPathAndValue != null) {\n            const fullPath = pathChild(\n              new Path(front),\n              childExistingPathAndValue.path\n            );\n            return { path: fullPath, value: childExistingPathAndValue.value };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   */\n  findRootMostValueAndPath(\n    relativePath: Path\n  ): { path: Path; value: T } | null {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n\n  /**\n   * @returns The subtree at the given path\n   */\n  subtree(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return this;\n    } else {\n      const front = pathGetFront(relativePath);\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(pathPopFront(relativePath));\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param relativePath - Path to set value at.\n   * @param toSet - Value to set.\n   * @returns Resulting tree.\n   */\n  set(relativePath: Path, toSet: T | null): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.set(pathPopFront(relativePath), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param relativePath - Path to value to remove.\n   * @returns Resulting tree.\n   */\n  remove(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      if (this.children.isEmpty()) {\n        return new ImmutableTree<T>(null);\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(pathPopFront(relativePath));\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return new ImmutableTree<T>(null);\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n\n  /**\n   * Gets a value from the tree.\n   *\n   * @param relativePath - Path to get value for.\n   * @returns Value at path, or null.\n   */\n  get(relativePath: Path): T | null {\n    if (pathIsEmpty(relativePath)) {\n      return this.value;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(pathPopFront(relativePath));\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param relativePath - Path to replace subtree for.\n   * @param newTree - New tree.\n   * @returns Resulting tree.\n   */\n  setTree(relativePath: Path, newTree: ImmutableTree<T>): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return newTree;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.setTree(pathPopFront(relativePath), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   */\n  fold<V>(fn: (path: Path, value: T, children: { [k: string]: V }) => V): V {\n    return this.fold_(newEmptyPath(), fn);\n  }\n\n  /**\n   * Recursive helper for public-facing fold() method\n   */\n  private fold_<V>(\n    pathSoFar: Path,\n    fn: (path: Path, value: T | null, children: { [k: string]: V }) => V\n  ): V {\n    const accum: { [k: string]: V } = {};\n    this.children.inorderTraversal(\n      (childKey: string, childTree: ImmutableTree<T>) => {\n        accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n      }\n    );\n    return fn(pathSoFar, this.value, accum);\n  }\n\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   */\n  findOnPath<V>(path: Path, f: (path: Path, value: T) => V | null): V | null {\n    return this.findOnPath_(path, newEmptyPath(), f);\n  }\n\n  private findOnPath_<V>(\n    pathToFollow: Path,\n    pathSoFar: Path,\n    f: (path: Path, value: T) => V | null\n  ): V | null {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathIsEmpty(pathToFollow)) {\n        return null;\n      } else {\n        const front = pathGetFront(pathToFollow)!;\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(\n            pathPopFront(pathToFollow),\n            pathChild(pathSoFar, front),\n            f\n          );\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  foreachOnPath(\n    path: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    return this.foreachOnPath_(path, newEmptyPath(), f);\n  }\n\n  private foreachOnPath_(\n    pathToFollow: Path,\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    if (pathIsEmpty(pathToFollow)) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathGetFront(pathToFollow);\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(\n          pathPopFront(pathToFollow),\n          pathChild(currentRelativePath, front),\n          f\n        );\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param f - A function to be called with the path from the root of the tree to\n   * a node, and the value at that node. Called in depth-first order.\n   */\n  foreach(f: (path: Path, value: T) => void) {\n    this.foreach_(newEmptyPath(), f);\n  }\n\n  private foreach_(\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(pathChild(currentRelativePath, childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  foreachChild(f: (name: string, value: T) => void) {\n    this.children.inorderTraversal(\n      (childName: string, childTree: ImmutableTree<T>) => {\n        if (childTree.value) {\n          f(childName, childTree.value);\n        }\n      }\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathIsEmpty\n} from './util/Path';\nimport { each } from './util/util';\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nexport class CompoundWrite {\n  constructor(public writeTree_: ImmutableTree<Node>) {}\n\n  static empty(): CompoundWrite {\n    return new CompoundWrite(new ImmutableTree(null));\n  }\n}\n\nexport function compoundWriteAddWrite(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  node: Node\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return new CompoundWrite(new ImmutableTree(node));\n  } else {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      const rootMostPath = rootmost.path;\n      let value = rootmost.value;\n      const relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(\n        compoundWrite.writeTree_.set(rootMostPath, value)\n      );\n    } else {\n      const subtree = new ImmutableTree(node);\n      const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n}\n\nexport function compoundWriteAddWrites(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  updates: { [name: string]: Node }\n): CompoundWrite {\n  let newWrite = compoundWrite;\n  each(updates, (childKey: string, node: Node) => {\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n  });\n  return newWrite;\n}\n\n/**\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n * location, which must be removed by calling this method with that path.\n *\n * @param compoundWrite - The CompoundWrite to remove.\n * @param path - The path at which a write and all deeper writes should be removed\n * @returns The new CompoundWrite with the removed path\n */\nexport function compoundWriteRemoveWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return CompoundWrite.empty();\n  } else {\n    const newWriteTree = compoundWrite.writeTree_.setTree(\n      path,\n      new ImmutableTree<Node>(null)\n    );\n    return new CompoundWrite(newWriteTree);\n  }\n}\n\n/**\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n * considered \"complete\".\n *\n * @param compoundWrite - The CompoundWrite to check.\n * @param path - The path to check for\n * @returns Whether there is a complete write at that path\n */\nexport function compoundWriteHasCompleteWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): boolean {\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n\n/**\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n * writes from deeper paths, but will return child nodes from a more shallow path.\n *\n * @param compoundWrite - The CompoundWrite to get the node from.\n * @param path - The path to get a complete write\n * @returns The node if complete at that path, or null otherwise.\n */\nexport function compoundWriteGetCompleteNode(\n  compoundWrite: CompoundWrite,\n  path: Path\n): Node | null {\n  const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n  if (rootmost != null) {\n    return compoundWrite.writeTree_\n      .get(rootmost.path)\n      .getChild(newRelativePath(rootmost.path, path));\n  } else {\n    return null;\n  }\n}\n\n/**\n * Returns all children that are guaranteed to be a complete overwrite.\n *\n * @param compoundWrite - The CompoundWrite to get children from.\n * @returns A list of all complete children.\n */\nexport function compoundWriteGetCompleteChildren(\n  compoundWrite: CompoundWrite\n): NamedNode[] {\n  const children: NamedNode[] = [];\n  const node = compoundWrite.writeTree_.value;\n  if (node != null) {\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) {\n      (node as ChildrenNode).forEachChild(\n        PRIORITY_INDEX,\n        (childName, childNode) => {\n          children.push(new NamedNode(childName, childNode));\n        }\n      );\n    }\n  } else {\n    compoundWrite.writeTree_.children.inorderTraversal(\n      (childName, childTree) => {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      }\n    );\n  }\n  return children;\n}\n\nexport function compoundWriteChildCompoundWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return compoundWrite;\n  } else {\n    const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n    if (shadowingNode != null) {\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n    } else {\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n    }\n  }\n}\n\n/**\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n * @returns Whether this CompoundWrite is empty\n */\nexport function compoundWriteIsEmpty(compoundWrite: CompoundWrite): boolean {\n  return compoundWrite.writeTree_.isEmpty();\n}\n\n/**\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n * node\n * @param node - The node to apply this CompoundWrite to\n * @returns The node with all writes applied\n */\nexport function compoundWriteApply(\n  compoundWrite: CompoundWrite,\n  node: Node\n): Node {\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\n\nfunction applySubtreeWrite(\n  relativePath: Path,\n  writeTree: ImmutableTree<Node>,\n  node: Node\n): Node {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(\n          childTree.value !== null,\n          'Priority writes must always be leaf nodes'\n        );\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(\n          pathChild(relativePath, childKey),\n          childTree,\n          node\n        );\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(\n        pathChild(relativePath, '.priority'),\n        priorityWrite\n      );\n    }\n    return node;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError, safeGet } from '@firebase/util';\n\nimport {\n  CompoundWrite,\n  compoundWriteAddWrite,\n  compoundWriteAddWrites,\n  compoundWriteApply,\n  compoundWriteChildCompoundWrite,\n  compoundWriteGetCompleteChildren,\n  compoundWriteGetCompleteNode,\n  compoundWriteHasCompleteWrite,\n  compoundWriteIsEmpty,\n  compoundWriteRemoveWrite\n} from './CompoundWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Index } from './snap/indexes/Index';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathContains,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './util/Path';\nimport { each } from './util/util';\nimport { CacheNode } from './view/CacheNode';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap wil be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord {\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: { [k: string]: Node } | null;\n  visible: boolean;\n}\n\n/**\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n *\n */\nexport function writeTreeChildWrites(\n  writeTree: WriteTree,\n  path: Path\n): WriteTreeRef {\n  return newWriteTreeRef(path, writeTree);\n}\n\n/**\n * Record a new overwrite from user code.\n *\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\n */\nexport function writeTreeAddOverwrite(\n  writeTree: WriteTree,\n  path: Path,\n  snap: Node,\n  writeId: number,\n  visible?: boolean\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older write on top of newer ones'\n  );\n  if (visible === undefined) {\n    visible = true;\n  }\n  writeTree.allWrites.push({\n    path,\n    snap,\n    writeId,\n    visible\n  });\n\n  if (visible) {\n    writeTree.visibleWrites = compoundWriteAddWrite(\n      writeTree.visibleWrites,\n      path,\n      snap\n    );\n  }\n  writeTree.lastWriteId = writeId;\n}\n\n/**\n * Record a new merge from user code.\n */\nexport function writeTreeAddMerge(\n  writeTree: WriteTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older merge on top of newer ones'\n  );\n  writeTree.allWrites.push({\n    path,\n    children: changedChildren,\n    writeId,\n    visible: true\n  });\n\n  writeTree.visibleWrites = compoundWriteAddWrites(\n    writeTree.visibleWrites,\n    path,\n    changedChildren\n  );\n  writeTree.lastWriteId = writeId;\n}\n\nexport function writeTreeGetWrite(\n  writeTree: WriteTree,\n  writeId: number\n): WriteRecord | null {\n  for (let i = 0; i < writeTree.allWrites.length; i++) {\n    const record = writeTree.allWrites[i];\n    if (record.writeId === writeId) {\n      return record;\n    }\n  }\n  return null;\n}\n\n/**\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n *\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\n * events as a result).\n */\nexport function writeTreeRemoveWrite(\n  writeTree: WriteTree,\n  writeId: number\n): boolean {\n  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n  // out of order.\n  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n  //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n  const idx = writeTree.allWrites.findIndex(s => {\n    return s.writeId === writeId;\n  });\n  assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n  const writeToRemove = writeTree.allWrites[idx];\n  writeTree.allWrites.splice(idx, 1);\n\n  let removedWriteWasVisible = writeToRemove.visible;\n  let removedWriteOverlapsWithOtherWrites = false;\n\n  let i = writeTree.allWrites.length - 1;\n\n  while (removedWriteWasVisible && i >= 0) {\n    const currentWrite = writeTree.allWrites[i];\n    if (currentWrite.visible) {\n      if (\n        i >= idx &&\n        writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)\n      ) {\n        // The removed write was completely shadowed by a subsequent write.\n        removedWriteWasVisible = false;\n      } else if (pathContains(writeToRemove.path, currentWrite.path)) {\n        // Either we're covering some writes or they're covering part of us (depending on which came first).\n        removedWriteOverlapsWithOtherWrites = true;\n      }\n    }\n    i--;\n  }\n\n  if (!removedWriteWasVisible) {\n    return false;\n  } else if (removedWriteOverlapsWithOtherWrites) {\n    // There's some shadowing going on. Just rebuild the visible writes from scratch.\n    writeTreeResetTree_(writeTree);\n    return true;\n  } else {\n    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n    if (writeToRemove.snap) {\n      writeTree.visibleWrites = compoundWriteRemoveWrite(\n        writeTree.visibleWrites,\n        writeToRemove.path\n      );\n    } else {\n      const children = writeToRemove.children;\n      each(children, (childName: string) => {\n        writeTree.visibleWrites = compoundWriteRemoveWrite(\n          writeTree.visibleWrites,\n          pathChild(writeToRemove.path, childName)\n        );\n      });\n    }\n    return true;\n  }\n}\n\nfunction writeTreeRecordContainsPath_(\n  writeRecord: WriteRecord,\n  path: Path\n): boolean {\n  if (writeRecord.snap) {\n    return pathContains(writeRecord.path, path);\n  } else {\n    for (const childName in writeRecord.children) {\n      if (\n        writeRecord.children.hasOwnProperty(childName) &&\n        pathContains(pathChild(writeRecord.path, childName), path)\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n/**\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n */\nfunction writeTreeResetTree_(writeTree: WriteTree) {\n  writeTree.visibleWrites = writeTreeLayerTree_(\n    writeTree.allWrites,\n    writeTreeDefaultFilter_,\n    newEmptyPath()\n  );\n  if (writeTree.allWrites.length > 0) {\n    writeTree.lastWriteId =\n      writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n  } else {\n    writeTree.lastWriteId = -1;\n  }\n}\n\n/**\n * The default filter used when constructing the tree. Keep everything that's visible.\n */\nfunction writeTreeDefaultFilter_(write: WriteRecord) {\n  return write.visible;\n}\n\n/**\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n * event data at that path.\n */\nfunction writeTreeLayerTree_(\n  writes: WriteRecord[],\n  filter: (w: WriteRecord) => boolean,\n  treeRoot: Path\n): CompoundWrite {\n  let compoundWrite = CompoundWrite.empty();\n  for (let i = 0; i < writes.length; ++i) {\n    const write = writes[i];\n    // Theory, a later set will either:\n    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n    if (filter(write)) {\n      const writePath = write.path;\n      let relativePath: Path;\n      if (write.snap) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            relativePath,\n            write.snap\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            newEmptyPath(),\n            write.snap.getChild(relativePath)\n          );\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else if (write.children) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrites(\n            compoundWrite,\n            relativePath,\n            write.children\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          if (pathIsEmpty(relativePath)) {\n            compoundWrite = compoundWriteAddWrites(\n              compoundWrite,\n              newEmptyPath(),\n              write.children\n            );\n          } else {\n            const child = safeGet(write.children, pathGetFront(relativePath));\n            if (child) {\n              // There exists a child in this node that matches the root path\n              const deepNode = child.getChild(pathPopFront(relativePath));\n              compoundWrite = compoundWriteAddWrite(\n                compoundWrite,\n                newEmptyPath(),\n                deepNode\n              );\n            }\n          }\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else {\n        throw assertionError('WriteRecord should have .snap or .children');\n      }\n    }\n  }\n  return compoundWrite;\n}\n\n/**\n * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n * No server data is considered.\n *\n */\nexport function writeTreeGetCompleteWriteData(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n * writes), attempt to calculate a complete snapshot for the given path\n *\n * @param writeIdsToExclude - An optional set to be excluded\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeCalcCompleteEventCache(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  if (!writeIdsToExclude && !includeHiddenWrites) {\n    const shadowingNode = compoundWriteGetCompleteNode(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      const subMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        treePath\n      );\n      if (compoundWriteIsEmpty(subMerge)) {\n        return completeServerCache;\n      } else if (\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())\n      ) {\n        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n        return null;\n      } else {\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(subMerge, layeredCache);\n      }\n    }\n  } else {\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n      return completeServerCache;\n    } else {\n      // If the server cache is null, and we don't have a complete cache, we need to return null\n      if (\n        !includeHiddenWrites &&\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(merge, newEmptyPath())\n      ) {\n        return null;\n      } else {\n        const filter = function (write: WriteRecord) {\n          return (\n            (write.visible || includeHiddenWrites) &&\n            (!writeIdsToExclude ||\n              !~writeIdsToExclude.indexOf(write.writeId)) &&\n            (pathContains(write.path, treePath) ||\n              pathContains(treePath, write.path))\n          );\n        };\n        const mergeAtPath = writeTreeLayerTree_(\n          writeTree.allWrites,\n          filter,\n          treePath\n        );\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(mergeAtPath, layeredCache);\n      }\n    }\n  }\n}\n\n/**\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n * Used when creating new views, to pre-fill their complete event children snapshot.\n */\nexport function writeTreeCalcCompleteEventChildren(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerChildren: ChildrenNode | null\n) {\n  let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n  const topLevelSet = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    treePath\n  );\n  if (topLevelSet) {\n    if (!topLevelSet.isLeafNode()) {\n      // we're shadowing everything. Return the children.\n      topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          childSnap\n        );\n      });\n    }\n    return completeChildren;\n  } else if (completeServerChildren) {\n    // Layer any children we have on top of this\n    // We know we don't have a top-level set, so just enumerate existing children\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    completeServerChildren.forEachChild(\n      PRIORITY_INDEX,\n      (childName, childNode) => {\n        const node = compoundWriteApply(\n          compoundWriteChildCompoundWrite(merge, new Path(childName)),\n          childNode\n        );\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          node\n        );\n      }\n    );\n    // Add any complete children we have from the set\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  } else {\n    // We don't have anything to layer on top of. Layer on any children we have\n    // Note that we can return an empty snap if we have a defined delete\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  }\n}\n\n/**\n * Given that the underlying server data has updated, determine what, if anything, needs to be\n * applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events\n *\n * Either existingEventSnap or existingServerSnap must exist\n */\nexport function writeTreeCalcEventCacheAfterServerOverwrite(\n  writeTree: WriteTree,\n  treePath: Path,\n  childPath: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  assert(\n    existingEventSnap || existingServerSnap,\n    'Either existingEventSnap or existingServerSnap must exist'\n  );\n  const path = pathChild(treePath, childPath);\n  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n    // At this point we can probably guarantee that we're in case 2, meaning no events\n    // May need to check visibility while doing the findRootMostValueAndPath call\n    return null;\n  } else {\n    // No complete shadowing. We're either partially shadowing or not shadowing at all.\n    const childMerge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      path\n    );\n    if (compoundWriteIsEmpty(childMerge)) {\n      // We're not shadowing at all. Case 1\n      return existingServerSnap.getChild(childPath);\n    } else {\n      // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n      // However this is tricky to find out, since user updates don't necessary change the server\n      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n      // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n      // only check if the updates change the serverNode.\n      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getChild(childPath)\n      );\n    }\n  }\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeCalcCompleteChild(\n  writeTree: WriteTree,\n  treePath: Path,\n  childKey: string,\n  existingServerSnap: CacheNode\n): Node | null {\n  const path = pathChild(treePath, childKey);\n  const shadowingNode = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    path\n  );\n  if (shadowingNode != null) {\n    return shadowingNode;\n  } else {\n    if (existingServerSnap.isCompleteForChild(childKey)) {\n      const childMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        path\n      );\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getNode().getImmediateChild(childKey)\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n */\nexport function writeTreeShadowingWrite(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window.\n */\nexport function writeTreeCalcIndexedSlice(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  let toIterate: Node;\n  const merge = compoundWriteChildCompoundWrite(\n    writeTree.visibleWrites,\n    treePath\n  );\n  const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n  if (shadowingNode != null) {\n    toIterate = shadowingNode;\n  } else if (completeServerData != null) {\n    toIterate = compoundWriteApply(merge, completeServerData);\n  } else {\n    // no children to iterate on\n    return [];\n  }\n  toIterate = toIterate.withIndex(index);\n  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n    const nodes = [];\n    const cmp = index.getCompare();\n    const iter = reverse\n      ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index)\n      : (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n    let next = iter.getNext();\n    while (next && nodes.length < count) {\n      if (cmp(next, startPost) !== 0) {\n        nodes.push(next);\n      }\n      next = iter.getNext();\n    }\n    return nodes;\n  } else {\n    return [];\n  }\n}\n\nexport function newWriteTree(): WriteTree {\n  return {\n    visibleWrites: CompoundWrite.empty(),\n    allWrites: [],\n    lastWriteId: -1\n  };\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n */\nexport interface WriteTree {\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   */\n  visibleWrites: CompoundWrite;\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   */\n  allWrites: WriteRecord[];\n\n  lastWriteId: number;\n}\n\n/**\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n * can lead to a more expensive calculation.\n *\n * @param writeIdsToExclude - Optional writes to exclude.\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeRefCalcCompleteEventCache(\n  writeTreeRef: WriteTreeRef,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  return writeTreeCalcCompleteEventCache(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerCache,\n    writeIdsToExclude,\n    includeHiddenWrites\n  );\n}\n\n/**\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n * mix of the given server data and write data.\n *\n */\nexport function writeTreeRefCalcCompleteEventChildren(\n  writeTreeRef: WriteTreeRef,\n  completeServerChildren: ChildrenNode | null\n): ChildrenNode {\n  return writeTreeCalcCompleteEventChildren(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerChildren\n  ) as ChildrenNode;\n}\n\n/**\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n * if anything, needs to be applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events should be raised\n *\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n *\n *\n */\nexport function writeTreeRefCalcEventCacheAfterServerOverwrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  return writeTreeCalcEventCacheAfterServerOverwrite(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    path,\n    existingEventSnap,\n    existingServerSnap\n  );\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n *\n */\nexport function writeTreeRefShadowingWrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path\n): Node | null {\n  return writeTreeShadowingWrite(\n    writeTreeRef.writeTree,\n    pathChild(writeTreeRef.treePath, path)\n  );\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window\n */\nexport function writeTreeRefCalcIndexedSlice(\n  writeTreeRef: WriteTreeRef,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  return writeTreeCalcIndexedSlice(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerData,\n    startPost,\n    count,\n    reverse,\n    index\n  );\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeRefCalcCompleteChild(\n  writeTreeRef: WriteTreeRef,\n  childKey: string,\n  existingServerCache: CacheNode\n): Node | null {\n  return writeTreeCalcCompleteChild(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    childKey,\n    existingServerCache\n  );\n}\n\n/**\n * Return a WriteTreeRef for a child.\n */\nexport function writeTreeRefChild(\n  writeTreeRef: WriteTreeRef,\n  childName: string\n): WriteTreeRef {\n  return newWriteTreeRef(\n    pathChild(writeTreeRef.treePath, childName),\n    writeTreeRef.writeTree\n  );\n}\n\nexport function newWriteTreeRef(\n  path: Path,\n  writeTree: WriteTree\n): WriteTreeRef {\n  return {\n    treePath: path,\n    writeTree\n  };\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n */\nexport interface WriteTreeRef {\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   */\n  readonly treePath: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   */\n  readonly writeTree: WriteTree;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport {\n  Change,\n  ChangeType,\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from './Change';\n\nexport class ChildChangeAccumulator {\n  private readonly changeMap: Map<string, Change> = new Map();\n\n  trackChildChange(change: Change) {\n    const type = change.type;\n    const childKey = change.childName!;\n    assert(\n      type === ChangeType.CHILD_ADDED ||\n        type === ChangeType.CHILD_CHANGED ||\n        type === ChangeType.CHILD_REMOVED,\n      'Only child changes supported for tracking'\n    );\n    assert(\n      childKey !== '.priority',\n      'Only non-priority child changes can be tracked.'\n    );\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (\n        type === ChangeType.CHILD_ADDED &&\n        oldType === ChangeType.CHILD_REMOVED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(\n            childKey,\n            change.snapshotNode,\n            oldChange.snapshotNode\n          )\n        );\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.delete(childKey);\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildRemoved(childKey, oldChange.oldSnap)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildAdded(childKey, change.snapshotNode)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap)\n        );\n      } else {\n        throw assertionError(\n          'Illegal combination of changes: ' +\n            change +\n            ' occurred after ' +\n            oldChange\n        );\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n\n  getChanges(): Change[] {\n    return Array.from(this.changeMap.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcIndexedSlice\n} from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { ViewCache, viewCacheGetCompleteServerSnap } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource {\n  getCompleteChild(childKey: string): Node | null;\n\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class NoCompleteChildSource_ implements CompleteChildSource {\n  getCompleteChild(childKey?: string): Node | null {\n    return null;\n  }\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null {\n    return null;\n  }\n}\n\n/**\n * Singleton instance.\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource {\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) {}\n  getCompleteChild(childKey: string): Node | null {\n    const node = this.viewCache_.eventCache;\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.serverCache;\n      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n    }\n  }\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null {\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : viewCacheGetCompleteServerSnap(this.viewCache_);\n    const nodes = writeTreeRefCalcIndexedSlice(\n      this.writes_,\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { AckUserWrite } from '../operation/AckUserWrite';\nimport { Merge } from '../operation/Merge';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Overwrite } from '../operation/Overwrite';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetBack,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathParent,\n  pathPopFront\n} from '../util/Path';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren,\n  writeTreeRefCalcEventCacheAfterServerOverwrite,\n  writeTreeRefShadowingWrite\n} from '../WriteTree';\n\nimport { Change, changeValue } from './Change';\nimport { ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport {\n  CompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  WriteTreeCompleteChildSource\n} from './CompleteChildSource';\nimport { NodeFilter } from './filter/NodeFilter';\nimport {\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap,\n  viewCacheUpdateEventSnap,\n  viewCacheUpdateServerSnap\n} from './ViewCache';\n\nexport interface ProcessorResult {\n  readonly viewCache: ViewCache;\n  readonly changes: Change[];\n}\n\nexport interface ViewProcessor {\n  readonly filter: NodeFilter;\n}\n\nexport function newViewProcessor(filter: NodeFilter): ViewProcessor {\n  return { filter };\n}\n\nexport function viewProcessorAssertIndexed(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache\n): void {\n  assert(\n    viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Event snap not indexed'\n  );\n  assert(\n    viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Server snap not indexed'\n  );\n}\n\nexport function viewProcessorApplyOperation(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null\n): ProcessorResult {\n  const accumulator = new ChildChangeAccumulator();\n  let newViewCache, filterServerNode;\n  if (operation.type === OperationType.OVERWRITE) {\n    const overwrite = operation as Overwrite;\n    if (overwrite.source.fromUser) {\n      newViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(overwrite.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered  and the\n      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n      // again\n      filterServerNode =\n        overwrite.source.tagged ||\n        (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\n      newViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.MERGE) {\n    const merge = operation as Merge;\n    if (merge.source.fromUser) {\n      newViewCache = viewProcessorApplyUserMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(merge.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered\n      filterServerNode =\n        merge.source.tagged || oldViewCache.serverCache.isFiltered();\n      newViewCache = viewProcessorApplyServerMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.ACK_USER_WRITE) {\n    const ackUserWrite = operation as AckUserWrite;\n    if (!ackUserWrite.revert) {\n      newViewCache = viewProcessorAckUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        ackUserWrite.affectedTree,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      newViewCache = viewProcessorRevertUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n    newViewCache = viewProcessorListenComplete(\n      viewProcessor,\n      oldViewCache,\n      operation.path,\n      writesCache,\n      accumulator\n    );\n  } else {\n    throw assertionError('Unknown operation type: ' + operation.type);\n  }\n  const changes = accumulator.getChanges();\n  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n  return { viewCache: newViewCache, changes };\n}\n\nfunction viewProcessorMaybeAddValueEvent(\n  oldViewCache: ViewCache,\n  newViewCache: ViewCache,\n  accumulator: Change[]\n): void {\n  const eventSnap = newViewCache.eventCache;\n  if (eventSnap.isFullyInitialized()) {\n    const isLeafOrEmpty =\n      eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n    const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n    if (\n      accumulator.length > 0 ||\n      !oldViewCache.eventCache.isFullyInitialized() ||\n      (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\n      !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())\n    ) {\n      accumulator.push(\n        changeValue(viewCacheGetCompleteEventSnap(newViewCache))\n      );\n    }\n  }\n}\n\nfunction viewProcessorGenerateEventCacheAfterServerEvent(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  changePath: Path,\n  writesCache: WriteTreeRef,\n  source: CompleteChildSource,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = viewCache.eventCache;\n  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n    // we have a shadowing write, ignore changes\n    return viewCache;\n  } else {\n    let newEventCache, serverNode;\n    if (pathIsEmpty(changePath)) {\n      // TODO: figure out how this plays with \"sliding ack windows\"\n      assert(\n        viewCache.serverCache.isFullyInitialized(),\n        'If change path is empty, we must have complete server data'\n      );\n      if (viewCache.serverCache.isFiltered()) {\n        // We need to special case this, because we need to only apply writes to complete children, or\n        // we might end up raising events for incomplete children. If the server data is filtered deep\n        // writes cannot be guaranteed to be complete\n        const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n        const completeChildren =\n          serverCache instanceof ChildrenNode\n            ? serverCache\n            : ChildrenNode.EMPTY_NODE;\n        const completeEventChildren = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          completeChildren\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeEventChildren,\n          accumulator\n        );\n      } else {\n        const completeNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeNode,\n          accumulator\n        );\n      }\n    } else {\n      const childKey = pathGetFront(changePath);\n      if (childKey === '.priority') {\n        assert(\n          pathGetLength(changePath) === 1,\n          \"Can't have a priority with additional path components\"\n        );\n        const oldEventNode = oldEventSnap.getNode();\n        serverNode = viewCache.serverCache.getNode();\n        // we might have overwrites for this priority\n        const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(\n          writesCache,\n          changePath,\n          oldEventNode,\n          serverNode\n        );\n        if (updatedPriority != null) {\n          newEventCache = viewProcessor.filter.updatePriority(\n            oldEventNode,\n            updatedPriority\n          );\n        } else {\n          // priority didn't change, keep old node\n          newEventCache = oldEventSnap.getNode();\n        }\n      } else {\n        const childChangePath = pathPopFront(changePath);\n        // update child\n        let newEventChild;\n        if (oldEventSnap.isCompleteForChild(childKey)) {\n          serverNode = viewCache.serverCache.getNode();\n          const eventChildUpdate =\n            writeTreeRefCalcEventCacheAfterServerOverwrite(\n              writesCache,\n              changePath,\n              oldEventSnap.getNode(),\n              serverNode\n            );\n          if (eventChildUpdate != null) {\n            newEventChild = oldEventSnap\n              .getNode()\n              .getImmediateChild(childKey)\n              .updateChild(childChangePath, eventChildUpdate);\n          } else {\n            // Nothing changed, just keep the old child\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n          }\n        } else {\n          newEventChild = writeTreeRefCalcCompleteChild(\n            writesCache,\n            childKey,\n            viewCache.serverCache\n          );\n        }\n        if (newEventChild != null) {\n          newEventCache = viewProcessor.filter.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newEventChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n        } else {\n          // no complete child available or no change\n          newEventCache = oldEventSnap.getNode();\n        }\n      }\n    }\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath),\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n\nfunction viewProcessorApplyServerOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerSnap = oldViewCache.serverCache;\n  let newServerCache;\n  const serverFilter = filterServerNode\n    ? viewProcessor.filter\n    : viewProcessor.filter.getIndexedFilter();\n  if (pathIsEmpty(changePath)) {\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      changedSnap,\n      null\n    );\n  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n    const newServerNode = oldServerSnap\n      .getNode()\n      .updateChild(changePath, changedSnap);\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      newServerNode,\n      null\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (\n      !oldServerSnap.isCompleteForPath(changePath) &&\n      pathGetLength(changePath) > 1\n    ) {\n      // We don't update incomplete nodes with updates intended for other listeners\n      return oldViewCache;\n    }\n    const childChangePath = pathPopFront(changePath);\n    const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n    const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n    if (childKey === '.priority') {\n      newServerCache = serverFilter.updatePriority(\n        oldServerSnap.getNode(),\n        newChildNode\n      );\n    } else {\n      newServerCache = serverFilter.updateChild(\n        oldServerSnap.getNode(),\n        childKey,\n        newChildNode,\n        childChangePath,\n        NO_COMPLETE_CHILD_SOURCE,\n        null\n      );\n    }\n  }\n  const newViewCache = viewCacheUpdateServerSnap(\n    oldViewCache,\n    newServerCache,\n    oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath),\n    serverFilter.filtersNodes()\n  );\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    newViewCache,\n    completeCache\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    changePath,\n    writesCache,\n    source,\n    accumulator\n  );\n}\n\nfunction viewProcessorApplyUserOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = oldViewCache.eventCache;\n  let newViewCache, newEventCache;\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    oldViewCache,\n    completeCache\n  );\n  if (pathIsEmpty(changePath)) {\n    newEventCache = viewProcessor.filter.updateFullNode(\n      oldViewCache.eventCache.getNode(),\n      changedSnap,\n      accumulator\n    );\n    newViewCache = viewCacheUpdateEventSnap(\n      oldViewCache,\n      newEventCache,\n      true,\n      viewProcessor.filter.filtersNodes()\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (childKey === '.priority') {\n      newEventCache = viewProcessor.filter.updatePriority(\n        oldViewCache.eventCache.getNode(),\n        changedSnap\n      );\n      newViewCache = viewCacheUpdateEventSnap(\n        oldViewCache,\n        newEventCache,\n        oldEventSnap.isFullyInitialized(),\n        oldEventSnap.isFiltered()\n      );\n    } else {\n      const childChangePath = pathPopFront(changePath);\n      const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n      let newChild;\n      if (pathIsEmpty(childChangePath)) {\n        // Child overwrite, we can replace the child\n        newChild = changedSnap;\n      } else {\n        const childNode = source.getCompleteChild(childKey);\n        if (childNode != null) {\n          if (\n            pathGetBack(childChangePath) === '.priority' &&\n            childNode.getChild(pathParent(childChangePath)).isEmpty()\n          ) {\n            // This is a priority update on an empty node. If this node exists on the server, the\n            // server will send down the priority in the update, so ignore for now\n            newChild = childNode;\n          } else {\n            newChild = childNode.updateChild(childChangePath, changedSnap);\n          }\n        } else {\n          // There is no complete child node available\n          newChild = ChildrenNode.EMPTY_NODE;\n        }\n      }\n      if (!oldChild.equals(newChild)) {\n        const newEventSnap = viewProcessor.filter.updateChild(\n          oldEventSnap.getNode(),\n          childKey,\n          newChild,\n          childChangePath,\n          source,\n          accumulator\n        );\n        newViewCache = viewCacheUpdateEventSnap(\n          oldViewCache,\n          newEventSnap,\n          oldEventSnap.isFullyInitialized(),\n          viewProcessor.filter.filtersNodes()\n        );\n      } else {\n        newViewCache = oldViewCache;\n      }\n    }\n  }\n  return newViewCache;\n}\n\nfunction viewProcessorCacheHasChild(\n  viewCache: ViewCache,\n  childKey: string\n): boolean {\n  return viewCache.eventCache.isCompleteForChild(childKey);\n}\n\nfunction viewProcessorApplyUserMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorApplyMerge(\n  viewProcessor: ViewProcessor,\n  node: Node,\n  merge: ImmutableTree<Node>\n): Node {\n  merge.foreach((relativePath, childNode) => {\n    node = node.updateChild(relativePath, childNode);\n  });\n  return node;\n}\n\nfunction viewProcessorApplyServerMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n  // wait for the complete data update coming soon.\n  if (\n    viewCache.serverCache.getNode().isEmpty() &&\n    !viewCache.serverCache.isFullyInitialized()\n  ) {\n    return viewCache;\n  }\n\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  let viewMergeTree: ImmutableTree<Node>;\n  if (pathIsEmpty(path)) {\n    viewMergeTree = changedChildren;\n  } else {\n    viewMergeTree = new ImmutableTree<Node>(null).setTree(\n      path,\n      changedChildren\n    );\n  }\n  const serverNode = viewCache.serverCache.getNode();\n  viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n    if (serverNode.hasChild(childKey)) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n  viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n    const isUnknownDeepMerge =\n      !viewCache.serverCache.isCompleteForChild(childKey) &&\n      childMergeTree.value === null;\n    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childMergeTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorAckUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  ackPath: Path,\n  affectedTree: ImmutableTree<boolean>,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n    return viewCache;\n  }\n\n  // Only filter server node if it is currently filtered\n  const filterServerNode = viewCache.serverCache.isFiltered();\n\n  // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n  // now that it won't be shadowed.\n  const serverCache = viewCache.serverCache;\n  if (affectedTree.value != null) {\n    // This is an overwrite.\n    if (\n      (pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\n      serverCache.isCompleteForPath(ackPath)\n    ) {\n      return viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        serverCache.getNode().getChild(ackPath),\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else if (pathIsEmpty(ackPath)) {\n      // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n      // should just re-apply whatever we have in our cache as a merge.\n      let changedChildren = new ImmutableTree<Node>(null);\n      serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n        changedChildren = changedChildren.set(new Path(name), node);\n      });\n      return viewProcessorApplyServerMerge(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else {\n      return viewCache;\n    }\n  } else {\n    // This is a merge.\n    let changedChildren = new ImmutableTree<Node>(null);\n    affectedTree.foreach((mergePath, value) => {\n      const serverCachePath = pathChild(ackPath, mergePath);\n      if (serverCache.isCompleteForPath(serverCachePath)) {\n        changedChildren = changedChildren.set(\n          mergePath,\n          serverCache.getNode().getChild(serverCachePath)\n        );\n      }\n    });\n    return viewProcessorApplyServerMerge(\n      viewProcessor,\n      viewCache,\n      ackPath,\n      changedChildren,\n      writesCache,\n      completeCache,\n      filterServerNode,\n      accumulator\n    );\n  }\n}\n\nfunction viewProcessorListenComplete(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerNode = viewCache.serverCache;\n  const newViewCache = viewCacheUpdateServerSnap(\n    viewCache,\n    oldServerNode.getNode(),\n    oldServerNode.isFullyInitialized() || pathIsEmpty(path),\n    oldServerNode.isFiltered()\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    path,\n    writesCache,\n    NO_COMPLETE_CHILD_SOURCE,\n    accumulator\n  );\n}\n\nfunction viewProcessorRevertUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  let complete;\n  if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n    return viewCache;\n  } else {\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      viewCache,\n      completeServerCache\n    );\n    const oldEventCache = viewCache.eventCache.getNode();\n    let newEventCache;\n    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n      let newNode;\n      if (viewCache.serverCache.isFullyInitialized()) {\n        newNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n      } else {\n        const serverChildren = viewCache.serverCache.getNode();\n        assert(\n          serverChildren instanceof ChildrenNode,\n          'serverChildren would be complete if leaf node'\n        );\n        newNode = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          serverChildren as ChildrenNode\n        );\n      }\n      newNode = newNode as Node;\n      newEventCache = viewProcessor.filter.updateFullNode(\n        oldEventCache,\n        newNode,\n        accumulator\n      );\n    } else {\n      const childKey = pathGetFront(path);\n      let newChild = writeTreeRefCalcCompleteChild(\n        writesCache,\n        childKey,\n        viewCache.serverCache\n      );\n      if (\n        newChild == null &&\n        viewCache.serverCache.isCompleteForChild(childKey)\n      ) {\n        newChild = oldEventCache.getImmediateChild(childKey);\n      }\n      if (newChild != null) {\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          newChild,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n        // No complete child available, delete the existing one, if any\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          ChildrenNode.EMPTY_NODE,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else {\n        newEventCache = oldEventCache;\n      }\n      if (\n        newEventCache.isEmpty() &&\n        viewCache.serverCache.isFullyInitialized()\n      ) {\n        // We might have reverted all child writes. Maybe the old event was a leaf node\n        complete = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        if (complete.isLeafNode()) {\n          newEventCache = viewProcessor.filter.updateFullNode(\n            newEventCache,\n            complete,\n            accumulator\n          );\n        }\n      }\n    }\n    complete =\n      viewCache.serverCache.isFullyInitialized() ||\n      writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      complete,\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Operation, OperationType } from '../operation/Operation';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { Change, changeChildAdded, changeValue } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport {\n  EventGenerator,\n  eventGeneratorGenerateEventsForChanges\n} from './EventGenerator';\nimport { EventRegistration, QueryContext } from './EventRegistration';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { queryParamsGetNodeFilter } from './QueryParams';\nimport {\n  newViewCache,\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap\n} from './ViewCache';\nimport {\n  newViewProcessor,\n  ViewProcessor,\n  viewProcessorApplyOperation,\n  viewProcessorAssertIndexed\n} from './ViewProcessor';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n */\nexport class View {\n  processor_: ViewProcessor;\n  viewCache_: ViewCache;\n  eventRegistrations_: EventRegistration[] = [];\n  eventGenerator_: EventGenerator;\n\n  constructor(private query_: QueryContext, initialViewCache: ViewCache) {\n    const params = this.query_._queryParams;\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = queryParamsGetNodeFilter(params);\n\n    this.processor_ = newViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.serverCache;\n    const initialEventCache = initialViewCache.eventCache;\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    this.viewCache_ = newViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  get query(): QueryContext {\n    return this.query_;\n  }\n}\n\nexport function viewGetServerCache(view: View): Node | null {\n  return view.viewCache_.serverCache.getNode();\n}\n\nexport function viewGetCompleteNode(view: View): Node | null {\n  return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\n\nexport function viewGetCompleteServerCache(\n  view: View,\n  path: Path\n): Node | null {\n  const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n  if (cache) {\n    // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n    // we need to see if it contains the child we're interested in.\n    if (\n      view.query._queryParams.loadsAllData() ||\n      (!pathIsEmpty(path) &&\n        !cache.getImmediateChild(pathGetFront(path)).isEmpty())\n    ) {\n      return cache.getChild(path);\n    }\n  }\n  return null;\n}\n\nexport function viewIsEmpty(view: View): boolean {\n  return view.eventRegistrations_.length === 0;\n}\n\nexport function viewAddEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration\n) {\n  view.eventRegistrations_.push(eventRegistration);\n}\n\n/**\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nexport function viewRemoveEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  const cancelEvents: CancelEvent[] = [];\n  if (cancelError) {\n    assert(\n      eventRegistration == null,\n      'A cancel should cancel all event registrations.'\n    );\n    const path = view.query._path;\n    view.eventRegistrations_.forEach(registration => {\n      const maybeEvent = registration.createCancelEvent(cancelError, path);\n      if (maybeEvent) {\n        cancelEvents.push(maybeEvent);\n      }\n    });\n  }\n\n  if (eventRegistration) {\n    let remaining = [];\n    for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n      const existing = view.eventRegistrations_[i];\n      if (!existing.matches(eventRegistration)) {\n        remaining.push(existing);\n      } else if (eventRegistration.hasAnyCallback()) {\n        // We're removing just this one\n        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n        break;\n      }\n    }\n    view.eventRegistrations_ = remaining;\n  } else {\n    view.eventRegistrations_ = [];\n  }\n  return cancelEvents;\n}\n\n/**\n * Applies the given Operation, updates our cache, and returns the appropriate events.\n */\nexport function viewApplyOperation(\n  view: View,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null\n): Event[] {\n  if (\n    operation.type === OperationType.MERGE &&\n    operation.source.queryId !== null\n  ) {\n    assert(\n      viewCacheGetCompleteServerSnap(view.viewCache_),\n      'We should always have a full cache before handling merges'\n    );\n    assert(\n      viewCacheGetCompleteEventSnap(view.viewCache_),\n      'Missing event cache, even though we have a server cache'\n    );\n  }\n\n  const oldViewCache = view.viewCache_;\n  const result = viewProcessorApplyOperation(\n    view.processor_,\n    oldViewCache,\n    operation,\n    writesCache,\n    completeServerCache\n  );\n  viewProcessorAssertIndexed(view.processor_, result.viewCache);\n\n  assert(\n    result.viewCache.serverCache.isFullyInitialized() ||\n      !oldViewCache.serverCache.isFullyInitialized(),\n    'Once a server snap is complete, it should never go back'\n  );\n\n  view.viewCache_ = result.viewCache;\n\n  return viewGenerateEventsForChanges_(\n    view,\n    result.changes,\n    result.viewCache.eventCache.getNode(),\n    null\n  );\n}\n\nexport function viewGetInitialEvents(\n  view: View,\n  registration: EventRegistration\n): Event[] {\n  const eventSnap = view.viewCache_.eventCache;\n  const initialChanges: Change[] = [];\n  if (!eventSnap.getNode().isLeafNode()) {\n    const eventNode = eventSnap.getNode() as ChildrenNode;\n    eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      initialChanges.push(changeChildAdded(key, childNode));\n    });\n  }\n  if (eventSnap.isFullyInitialized()) {\n    initialChanges.push(changeValue(eventSnap.getNode()));\n  }\n  return viewGenerateEventsForChanges_(\n    view,\n    initialChanges,\n    eventSnap.getNode(),\n    registration\n  );\n}\n\nfunction viewGenerateEventsForChanges_(\n  view: View,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistration?: EventRegistration\n): Event[] {\n  const registrations = eventRegistration\n    ? [eventRegistration]\n    : view.eventRegistrations_;\n  return eventGeneratorGenerateEventsForChanges(\n    view.eventGenerator_,\n    changes,\n    eventCache,\n    registrations\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { Operation } from './operation/Operation';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport {\n  View,\n  viewAddEventRegistration,\n  viewApplyOperation,\n  viewGetCompleteServerCache,\n  viewGetInitialEvents,\n  viewIsEmpty,\n  viewRemoveEventRegistration\n} from './view/View';\nimport { newViewCache } from './view/ViewCache';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint {\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   */\n  readonly views: Map<string, View> = new Map();\n}\n\nexport function syncPointSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncPointGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport function syncPointIsEmpty(syncPoint: SyncPoint): boolean {\n  return syncPoint.views.size === 0;\n}\n\nexport function syncPointApplyOperation(\n  syncPoint: SyncPoint,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  optCompleteServerCache: Node | null\n): Event[] {\n  const queryId = operation.source.queryId;\n  if (queryId !== null) {\n    const view = syncPoint.views.get(queryId);\n    assert(view != null, 'SyncTree gave us an op for an invalid query.');\n    return viewApplyOperation(\n      view,\n      operation,\n      writesCache,\n      optCompleteServerCache\n    );\n  } else {\n    let events: Event[] = [];\n\n    for (const view of syncPoint.views.values()) {\n      events = events.concat(\n        viewApplyOperation(view, operation, writesCache, optCompleteServerCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Get a view for the specified query.\n *\n * @param query - The query to return a view for\n * @param writesCache\n * @param serverCache\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointGetView(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): View {\n  const queryId = query._queryIdentifier;\n  const view = syncPoint.views.get(queryId);\n  if (!view) {\n    // TODO: make writesCache take flag for complete server node\n    let eventCache = writeTreeRefCalcCompleteEventCache(\n      writesCache,\n      serverCacheComplete ? serverCache : null\n    );\n    let eventCacheComplete = false;\n    if (eventCache) {\n      eventCacheComplete = true;\n    } else if (serverCache instanceof ChildrenNode) {\n      eventCache = writeTreeRefCalcCompleteEventChildren(\n        writesCache,\n        serverCache\n      );\n      eventCacheComplete = false;\n    } else {\n      eventCache = ChildrenNode.EMPTY_NODE;\n      eventCacheComplete = false;\n    }\n    const viewCache = newViewCache(\n      new CacheNode(eventCache, eventCacheComplete, false),\n      new CacheNode(serverCache, serverCacheComplete, false)\n    );\n    return new View(query, viewCache);\n  }\n  return view;\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @param query\n * @param eventRegistration\n * @param writesCache\n * @param serverCache - Complete server cache, if we have it.\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointAddEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): Event[] {\n  const view = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  }\n  // This is guaranteed to exist now, we just created anything that was missing\n  viewAddEventRegistration(view, eventRegistration);\n  return viewGetInitialEvents(view, eventRegistration);\n}\n\n/**\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n *\n * If query is the default query, we'll check all views for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n *\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns removed queries and any cancel events\n */\nexport function syncPointRemoveEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): { removed: QueryContext[]; events: Event[] } {\n  const queryId = query._queryIdentifier;\n  const removed: QueryContext[] = [];\n  let cancelEvents: Event[] = [];\n  const hadCompleteView = syncPointHasCompleteView(syncPoint);\n  if (queryId === 'default') {\n    // When you do ref.off(...), we search all views for the registration to remove.\n    for (const [viewQueryId, view] of syncPoint.views.entries()) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(viewQueryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  } else {\n    // remove the callback from the specific view.\n    const view = syncPoint.views.get(queryId);\n    if (view) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(queryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  }\n\n  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n    // We removed our last complete view.\n    removed.push(\n      new (syncPointGetReferenceConstructor())(query._repo, query._path)\n    );\n  }\n\n  return { removed, events: cancelEvents };\n}\n\nexport function syncPointGetQueryViews(syncPoint: SyncPoint): View[] {\n  const result = [];\n  for (const view of syncPoint.views.values()) {\n    if (!view.query._queryParams.loadsAllData()) {\n      result.push(view);\n    }\n  }\n  return result;\n}\n\n/**\n * @param path - The path to the desired complete snapshot\n * @returns A complete cache, if it exists\n */\nexport function syncPointGetCompleteServerCache(\n  syncPoint: SyncPoint,\n  path: Path\n): Node | null {\n  let serverCache: Node | null = null;\n  for (const view of syncPoint.views.values()) {\n    serverCache = serverCache || viewGetCompleteServerCache(view, path);\n  }\n  return serverCache;\n}\n\nexport function syncPointViewForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): View | null {\n  const params = query._queryParams;\n  if (params.loadsAllData()) {\n    return syncPointGetCompleteView(syncPoint);\n  } else {\n    const queryId = query._queryIdentifier;\n    return syncPoint.views.get(queryId);\n  }\n}\n\nexport function syncPointViewExistsForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): boolean {\n  return syncPointViewForQuery(syncPoint, query) != null;\n}\n\nexport function syncPointHasCompleteView(syncPoint: SyncPoint): boolean {\n  return syncPointGetCompleteView(syncPoint) != null;\n}\n\nexport function syncPointGetCompleteView(syncPoint: SyncPoint): View | null {\n  for (const view of syncPoint.views.values()) {\n    if (view.query._queryParams.loadsAllData()) {\n      return view;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport {\n  newOperationSourceServer,\n  newOperationSourceServerTaggedQuery,\n  newOperationSourceUser,\n  Operation\n} from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport {\n  SyncPoint,\n  syncPointAddEventRegistration,\n  syncPointApplyOperation,\n  syncPointGetCompleteServerCache,\n  syncPointGetCompleteView,\n  syncPointGetQueryViews,\n  syncPointGetView,\n  syncPointHasCompleteView,\n  syncPointIsEmpty,\n  syncPointRemoveEventRegistration,\n  syncPointViewExistsForQuery,\n  syncPointViewForQuery\n} from './SyncPoint';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathGetFront,\n  pathIsEmpty\n} from './util/Path';\nimport { each, errorForServerCode } from './util/util';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport { View, viewGetCompleteNode, viewGetServerCache } from './view/View';\nimport {\n  newWriteTree,\n  WriteTree,\n  writeTreeAddMerge,\n  writeTreeAddOverwrite,\n  writeTreeCalcCompleteEventCache,\n  writeTreeChildWrites,\n  writeTreeGetWrite,\n  WriteTreeRef,\n  writeTreeRefChild,\n  writeTreeRemoveWrite\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\nexport function syncTreeSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncTreeGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport interface ListenProvider {\n  startListening(\n    query: QueryContext,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: unknown) => Event[]\n  ): Event[];\n\n  stopListening(a: QueryContext, b: number | null): void;\n}\n\n/**\n * Static tracker for next query tag.\n */\nlet syncTreeNextQueryTag_ = 1;\n\nexport function resetSyncTreeTag() {\n  syncTreeNextQueryTag_ = 1;\n}\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   */\n  syncPointTree_: ImmutableTree<SyncPoint> = new ImmutableTree<SyncPoint>(null);\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   */\n  pendingWriteTree_: WriteTree = newWriteTree();\n\n  readonly tagToQueryMap: Map<number, string> = new Map();\n  readonly queryToTagMap: Map<string, number> = new Map();\n\n  /**\n   * @param listenProvider_ - Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(public listenProvider_: ListenProvider) {}\n}\n\n/**\n * Apply the data changes for a user-generated set() or transaction() call.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node,\n  writeId: number,\n  visible?: boolean\n): Event[] {\n  // Record pending write.\n  writeTreeAddOverwrite(\n    syncTree.pendingWriteTree_,\n    path,\n    newData,\n    writeId,\n    visible\n  );\n\n  if (!visible) {\n    return [];\n  } else {\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new Overwrite(newOperationSourceUser(), path, newData)\n    );\n  }\n}\n\n/**\n * Apply the data from a user-generated update() call\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n): Event[] {\n  // Record pending merge.\n  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceUser(), path, changeTree)\n  );\n}\n\n/**\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n *\n * @param revert - True if the given write failed and needs to be reverted\n * @returns Events to raise.\n */\nexport function syncTreeAckUserWrite(\n  syncTree: SyncTree,\n  writeId: number,\n  revert: boolean = false\n) {\n  const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n  const needToReevaluate = writeTreeRemoveWrite(\n    syncTree.pendingWriteTree_,\n    writeId\n  );\n  if (!needToReevaluate) {\n    return [];\n  } else {\n    let affectedTree = new ImmutableTree<boolean>(null);\n    if (write.snap != null) {\n      // overwrite\n      affectedTree = affectedTree.set(newEmptyPath(), true);\n    } else {\n      each(write.children, (pathString: string) => {\n        affectedTree = affectedTree.set(new Path(pathString), true);\n      });\n    }\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new AckUserWrite(write.path, affectedTree, revert)\n    );\n  }\n}\n\n/**\n * Apply new server data for the specified path..\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Overwrite(newOperationSourceServer(), path, newData)\n  );\n}\n\n/**\n * Apply new server data to be merged in at the specified path.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node }\n): Event[] {\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceServer(), path, changeTree)\n  );\n}\n\n/**\n * Apply a listen complete for a query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyListenComplete(\n  syncTree: SyncTree,\n  path: Path\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new ListenComplete(newOperationSourceServer(), path)\n  );\n}\n\n/**\n * Apply a listen complete for a tagged query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedListenComplete(\n  syncTree: SyncTree,\n  path: Path,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new ListenComplete(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Remove event callback(s).\n *\n * If query is the default query, we'll check all queries for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n *\n * @param eventRegistration - If null, all callbacks are removed.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @param skipListenerDedup - When performing a `get()`, we don't add any new listeners, so no\n *  deduping needs to take place. This flag allows toggling of that behavior\n * @returns Cancel events, if cancelError was provided.\n */\nexport function syncTreeRemoveEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error,\n  skipListenerDedup = false\n): Event[] {\n  // Find the syncPoint first. Then deal with whether or not it has matching listeners\n  const path = query._path;\n  const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n  let cancelEvents: Event[] = [];\n  // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n  // not loadsAllData().\n  if (\n    maybeSyncPoint &&\n    (query._queryIdentifier === 'default' ||\n      syncPointViewExistsForQuery(maybeSyncPoint, query))\n  ) {\n    const removedAndEvents = syncPointRemoveEventRegistration(\n      maybeSyncPoint,\n      query,\n      eventRegistration,\n      cancelError\n    );\n    if (syncPointIsEmpty(maybeSyncPoint)) {\n      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n    }\n\n    const removed = removedAndEvents.removed;\n    cancelEvents = removedAndEvents.events;\n\n    if (!skipListenerDedup) {\n      /**\n       * We may have just removed one of many listeners and can short-circuit this whole process\n       * We may also not have removed a default listener, in which case all of the descendant listeners should already be\n       * properly set up.\n       */\n\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n      const removingDefault =\n        -1 !==\n        removed.findIndex(query => {\n          return query._queryParams.loadsAllData();\n        });\n      const covered = syncTree.syncPointTree_.findOnPath(\n        path,\n        (relativePath, parentSyncPoint) =>\n          syncPointHasCompleteView(parentSyncPoint)\n      );\n\n      if (removingDefault && !covered) {\n        const subtree = syncTree.syncPointTree_.subtree(path);\n        // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\n\n          // Ok, we've collected all the listens we need. Set them up.\n          for (let i = 0; i < newViews.length; ++i) {\n            const view = newViews[i],\n              newQuery = view.query;\n            const listener = syncTreeCreateListenerForView_(syncTree, view);\n            syncTree.listenProvider_.startListening(\n              syncTreeQueryForListening_(newQuery),\n              syncTreeTagForQuery(syncTree, newQuery),\n              listener.hashFn,\n              listener.onComplete\n            );\n          }\n        }\n        // Otherwise there's nothing below us, so nothing we need to start listening on\n      }\n      // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          const defaultTag: number | null = null;\n          syncTree.listenProvider_.stopListening(\n            syncTreeQueryForListening_(query),\n            defaultTag\n          );\n        } else {\n          removed.forEach((queryToRemove: QueryContext) => {\n            const tagToRemove = syncTree.queryToTagMap.get(\n              syncTreeMakeQueryKey_(queryToRemove)\n            );\n            syncTree.listenProvider_.stopListening(\n              syncTreeQueryForListening_(queryToRemove),\n              tagToRemove\n            );\n          });\n        }\n      }\n    }\n    // Now, clear all of the tags we're tracking for the removed listens\n    syncTreeRemoveTags_(syncTree, removed);\n  } else {\n    // No-op, this listener must've been already removed\n  }\n  return cancelEvents;\n}\n\n/**\n * Apply new server data for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  snap: Node,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey != null) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new Overwrite(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      snap\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // Query must have been removed already\n    return [];\n  }\n}\n\n/**\n * Apply server data to be merged in for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    const op = new Merge(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      changeTree\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeAddEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  skipSetupListener = false\n): Event[] {\n  const path = query._path;\n\n  let serverCache: Node | null = null;\n  let foundAncestorDefaultView = false;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(sp);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let serverCacheComplete;\n  if (serverCache != null) {\n    serverCacheComplete = true;\n  } else {\n    serverCacheComplete = false;\n    serverCache = ChildrenNode.EMPTY_NODE;\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    subtree.foreachChild((childName, childSyncPoint) => {\n      const completeCache = syncPointGetCompleteServerCache(\n        childSyncPoint,\n        newEmptyPath()\n      );\n      if (completeCache) {\n        serverCache = serverCache.updateImmediateChild(\n          childName,\n          completeCache\n        );\n      }\n    });\n  }\n\n  const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n  if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n    // We need to track a tag for this query\n    const queryKey = syncTreeMakeQueryKey_(query);\n    assert(\n      !syncTree.queryToTagMap.has(queryKey),\n      'View does not exist, but we have a tag'\n    );\n    const tag = syncTreeGetNextQueryTag_();\n    syncTree.queryToTagMap.set(queryKey, tag);\n    syncTree.tagToQueryMap.set(tag, queryKey);\n  }\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n  let events = syncPointAddEventRegistration(\n    syncPoint,\n    query,\n    eventRegistration,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!viewAlreadyExists && !foundAncestorDefaultView && !skipSetupListener) {\n    const view = syncPointViewForQuery(syncPoint, query);\n    events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n  }\n  return events;\n}\n\n/**\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\n *\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n *\n * @param path - The path to the data we want\n * @param writeIdsToExclude - A specific set to be excluded\n */\nexport function syncTreeCalcCompleteEventCache(\n  syncTree: SyncTree,\n  path: Path,\n  writeIdsToExclude?: number[]\n): Node {\n  const includeHiddenSets = true;\n  const writeTree = syncTree.pendingWriteTree_;\n  const serverCache = syncTree.syncPointTree_.findOnPath(\n    path,\n    (pathSoFar, syncPoint) => {\n      const relativePath = newRelativePath(pathSoFar, path);\n      const serverCache = syncPointGetCompleteServerCache(\n        syncPoint,\n        relativePath\n      );\n      if (serverCache) {\n        return serverCache;\n      }\n    }\n  );\n  return writeTreeCalcCompleteEventCache(\n    writeTree,\n    path,\n    serverCache,\n    writeIdsToExclude,\n    includeHiddenSets\n  );\n}\n\nexport function syncTreeGetServerValue(\n  syncTree: SyncTree,\n  query: QueryContext\n): Node | null {\n  const path = query._path;\n  let serverCache: Node | null = null;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  const serverCacheComplete = serverCache != null;\n  const serverCacheNode: CacheNode | null = serverCacheComplete\n    ? new CacheNode(serverCache, true, false)\n    : null;\n  const writesCache: WriteTreeRef | null = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    query._path\n  );\n  const view: View = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE,\n    serverCacheComplete\n  );\n  return viewGetCompleteNode(view);\n}\n\n/**\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n *\n * NOTES:\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n *\n * - We call applyOperation() on each SyncPoint passing three things:\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n *   3. A snapshot Node with cached server data, if we have it.\n *\n * - We concatenate all of the events returned by each SyncPoint and return the result.\n */\nfunction syncTreeApplyOperationToSyncPoints_(\n  syncTree: SyncTree,\n  operation: Operation\n): Event[] {\n  return syncTreeApplyOperationHelper_(\n    operation,\n    syncTree.syncPointTree_,\n    /*serverCache=*/ null,\n    writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath())\n  );\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  if (pathIsEmpty(operation.path)) {\n    return syncTreeApplyOperationDescendantsHelper_(\n      operation,\n      syncPointTree,\n      serverCache,\n      writesCache\n    );\n  } else {\n    const syncPoint = syncPointTree.get(newEmptyPath());\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n\n    let events: Event[] = [];\n    const childName = pathGetFront(operation.path);\n    const childOperation = operation.operationForChild(childName);\n    const childTree = syncPointTree.children.get(childName);\n    if (childTree && childOperation) {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writeTreeRefChild(writesCache, childName);\n      events = events.concat(\n        syncTreeApplyOperationHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationDescendantsHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  const syncPoint = syncPointTree.get(newEmptyPath());\n\n  // If we don't have cached server data, see if we can get it from this SyncPoint.\n  if (serverCache == null && syncPoint != null) {\n    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let events: Event[] = [];\n  syncPointTree.children.inorderTraversal((childName, childTree) => {\n    const childServerCache = serverCache\n      ? serverCache.getImmediateChild(childName)\n      : null;\n    const childWritesCache = writeTreeRefChild(writesCache, childName);\n    const childOperation = operation.operationForChild(childName);\n    if (childOperation) {\n      events = events.concat(\n        syncTreeApplyOperationDescendantsHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n  });\n\n  if (syncPoint) {\n    events = events.concat(\n      syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n    );\n  }\n\n  return events;\n}\n\nfunction syncTreeCreateListenerForView_(\n  syncTree: SyncTree,\n  view: View\n): { hashFn(): string; onComplete(a: string, b?: unknown): Event[] } {\n  const query = view.query;\n  const tag = syncTreeTagForQuery(syncTree, query);\n\n  return {\n    hashFn: () => {\n      const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n      return cache.hash();\n    },\n    onComplete: (status: string): Event[] => {\n      if (status === 'ok') {\n        if (tag) {\n          return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n        } else {\n          return syncTreeApplyListenComplete(syncTree, query._path);\n        }\n      } else {\n        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n        // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n        const error = errorForServerCode(status, query);\n        return syncTreeRemoveEventRegistration(\n          syncTree,\n          query,\n          /*eventRegistration*/ null,\n          error\n        );\n      }\n    }\n  };\n}\n\n/**\n * Return the tag associated with the given query.\n */\nexport function syncTreeTagForQuery(\n  syncTree: SyncTree,\n  query: QueryContext\n): number | null {\n  const queryKey = syncTreeMakeQueryKey_(query);\n  return syncTree.queryToTagMap.get(queryKey);\n}\n\n/**\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n */\nfunction syncTreeMakeQueryKey_(query: QueryContext): string {\n  return query._path.toString() + '$' + query._queryIdentifier;\n}\n\n/**\n * Return the query associated with the given tag, if we have one\n */\nfunction syncTreeQueryKeyForTag_(\n  syncTree: SyncTree,\n  tag: number\n): string | null {\n  return syncTree.tagToQueryMap.get(tag);\n}\n\n/**\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n */\nfunction syncTreeParseQueryKey_(queryKey: string): {\n  queryId: string;\n  path: Path;\n} {\n  const splitIndex = queryKey.indexOf('$');\n  assert(\n    splitIndex !== -1 && splitIndex < queryKey.length - 1,\n    'Bad queryKey.'\n  );\n  return {\n    queryId: queryKey.substr(splitIndex + 1),\n    path: new Path(queryKey.substr(0, splitIndex))\n  };\n}\n\n/**\n * A helper method to apply tagged operations\n */\nfunction syncTreeApplyTaggedOperation_(\n  syncTree: SyncTree,\n  queryPath: Path,\n  operation: Operation\n): Event[] {\n  const syncPoint = syncTree.syncPointTree_.get(queryPath);\n  assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n  const writesCache = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    queryPath\n  );\n  return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n\n/**\n * This collapses multiple unfiltered views into a single view, since we only need a single\n * listener for them.\n */\nfunction syncTreeCollectDistinctViewsForSubTree_(\n  subtree: ImmutableTree<SyncPoint>\n): View[] {\n  return subtree.fold<View[]>((relativePath, maybeChildSyncPoint, childMap) => {\n    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n      const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n      return [completeView];\n    } else {\n      // No complete view here, flatten any deeper listens into an array\n      let views: View[] = [];\n      if (maybeChildSyncPoint) {\n        views = syncPointGetQueryViews(maybeChildSyncPoint);\n      }\n      each(childMap, (_key: string, childViews: View[]) => {\n        views = views.concat(childViews);\n      });\n      return views;\n    }\n  });\n}\n\n/**\n * Normalizes a query to a query we send the server for listening\n *\n * @returns The normalized query\n */\nfunction syncTreeQueryForListening_(query: QueryContext): QueryContext {\n  if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n    // We treat queries that load all data as default queries\n    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n    // from Query\n    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n  } else {\n    return query;\n  }\n}\n\nfunction syncTreeRemoveTags_(syncTree: SyncTree, queries: QueryContext[]) {\n  for (let j = 0; j < queries.length; ++j) {\n    const removedQuery = queries[j];\n    if (!removedQuery._queryParams.loadsAllData()) {\n      // We should have a tag for this\n      const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n      const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n      syncTree.queryToTagMap.delete(removedQueryKey);\n      syncTree.tagToQueryMap.delete(removedQueryTag);\n    }\n  }\n}\n\n/**\n * Static accessor for query tags.\n */\nfunction syncTreeGetNextQueryTag_(): number {\n  return syncTreeNextQueryTag_++;\n}\n\n/**\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\n *\n * @returns This method can return events to support synchronous data sources\n */\nfunction syncTreeSetupListener_(\n  syncTree: SyncTree,\n  query: QueryContext,\n  view: View\n): Event[] {\n  const path = query._path;\n  const tag = syncTreeTagForQuery(syncTree, query);\n  const listener = syncTreeCreateListenerForView_(syncTree, view);\n\n  const events = syncTree.listenProvider_.startListening(\n    syncTreeQueryForListening_(query),\n    tag,\n    listener.hashFn,\n    listener.onComplete\n  );\n\n  const subtree = syncTree.syncPointTree_.subtree(path);\n  // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n  // may need to shadow other listens as well.\n  if (tag) {\n    assert(\n      !syncPointHasCompleteView(subtree.value),\n      \"If we're adding a query, it shouldn't be shadowed\"\n    );\n  } else {\n    // Shadow everything at or below this location, this is a default listener.\n    const queriesToStop = subtree.fold<QueryContext[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => {\n        if (\n          !pathIsEmpty(relativePath) &&\n          maybeChildSyncPoint &&\n          syncPointHasCompleteView(maybeChildSyncPoint)\n        ) {\n          return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          let queries: QueryContext[] = [];\n          if (maybeChildSyncPoint) {\n            queries = queries.concat(\n              syncPointGetQueryViews(maybeChildSyncPoint).map(\n                view => view.query\n              )\n            );\n          }\n          each(childMap, (_key: string, childQueries: QueryContext[]) => {\n            queries = queries.concat(childQueries);\n          });\n          return queries;\n        }\n      }\n    );\n    for (let i = 0; i < queriesToStop.length; ++i) {\n      const queryToStop = queriesToStop[i];\n      syncTree.listenProvider_.stopListening(\n        syncTreeQueryForListening_(queryToStop),\n        syncTreeTagForQuery(syncTree, queryToStop)\n      );\n    }\n  }\n  return events;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { LeafNode } from '../snap/LeafNode';\nimport { Node } from '../snap/Node';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { SyncTree, syncTreeCalcCompleteEventCache } from '../SyncTree';\n\nimport { Indexable } from './misc';\nimport { Path, pathChild } from './Path';\n\n/* It's critical for performance that we do not calculate actual values from a SyncTree\n * unless and until the value is needed. Because we expose both a SyncTree and Node\n * version of deferred value resolution, we ned a wrapper class that will let us share\n * code.\n *\n * @see https://github.com/firebase/firebase-js-sdk/issues/2487\n */\ninterface ValueProvider {\n  getImmediateChild(childName: string): ValueProvider;\n  node(): Node;\n}\n\nclass ExistingValueProvider implements ValueProvider {\n  constructor(readonly node_: Node) {}\n\n  getImmediateChild(childName: string): ValueProvider {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n\n  node(): Node {\n    return this.node_;\n  }\n}\n\nclass DeferredValueProvider implements ValueProvider {\n  private syncTree_: SyncTree;\n  private path_: Path;\n\n  constructor(syncTree: SyncTree, path: Path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  getImmediateChild(childName: string): ValueProvider {\n    const childPath = pathChild(this.path_, childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n\n  node(): Node {\n    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n  }\n}\n\n/**\n * Generate placeholders for deferred values.\n */\nexport const generateWithValues = function (\n  values: {\n    [k: string]: unknown;\n  } | null\n): { [k: string]: unknown } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n */\nexport const resolveDeferredLeafValue = function (\n  value: { [k: string]: unknown } | string | number | boolean,\n  existingVal: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal, serverValues);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nconst resolveScalarDeferredValue = function (\n  op: string,\n  existing: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'] as string | number | boolean;\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nconst resolveComplexDeferredValue = function (\n  op: object,\n  existing: ValueProvider,\n  unused: { [k: string]: unknown }\n): string | number | boolean {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  const delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  const existingNode = existing.node();\n  assert(\n    existingNode !== null && typeof existingNode !== 'undefined',\n    'Expected ChildrenNode.EMPTY_NODE for nulls'\n  );\n\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  const leaf = existingNode as LeafNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param path - path to which write is relative\n * @param node - new data written at path\n * @param syncTree - current data\n */\nexport const resolveDeferredValueTree = function (\n  path: Path,\n  node: Node,\n  syncTree: SyncTree,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new DeferredValueProvider(syncTree, path),\n    serverValues\n  );\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n */\nexport const resolveDeferredValueSnapshot = function (\n  node: Node,\n  existing: Node,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new ExistingValueProvider(existing),\n    serverValues\n  );\n};\n\nfunction resolveDeferredValue(\n  node: Node,\n  existingVal: ValueProvider,\n  serverValues: Indexable\n): Node {\n  const rawPri = node.getPriority().val() as\n    | Indexable\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredLeafValue(\n    rawPri,\n    existingVal.getImmediateChild('.priority'),\n    serverValues\n  );\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredLeafValue(\n      leafNode.getValue(),\n      existingVal,\n      serverValues\n    );\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(\n        childNode,\n        existingVal.getImmediateChild(childName),\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, safeGet } from '@firebase/util';\n\nimport { Path, pathGetFront, pathPopFront } from './Path';\nimport { each } from './util';\n\n/**\n * Node in a Tree.\n */\nexport interface TreeNode<T> {\n  // TODO: Consider making accessors that create children and value lazily or\n  // separate Internal / Leaf 'types'.\n  children: Record<string, TreeNode<T>>;\n  childCount: number;\n  value?: T;\n}\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nexport class Tree<T> {\n  /**\n   * @param name - Optional name of the node.\n   * @param parent - Optional parent node.\n   * @param node - Optional node to wrap.\n   */\n  constructor(\n    readonly name: string = '',\n    readonly parent: Tree<T> | null = null,\n    public node: TreeNode<T> = { children: {}, childCount: 0 }\n  ) {}\n}\n\n/**\n * Returns a sub-Tree for the given path.\n *\n * @param pathObj - Path to look up.\n * @returns Tree for path.\n */\nexport function treeSubTree<T>(tree: Tree<T>, pathObj: string | Path): Tree<T> {\n  // TODO: Require pathObj to be Path?\n  let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n  let child = tree,\n    next = pathGetFront(path);\n  while (next !== null) {\n    const childNode = safeGet(child.node.children, next) || {\n      children: {},\n      childCount: 0\n    };\n    child = new Tree<T>(next, child, childNode);\n    path = pathPopFront(path);\n    next = pathGetFront(path);\n  }\n\n  return child;\n}\n\n/**\n * Returns the data associated with this tree node.\n *\n * @returns The data or null if no data exists.\n */\nexport function treeGetValue<T>(tree: Tree<T>): T | undefined {\n  return tree.node.value;\n}\n\n/**\n * Sets data to this tree node.\n *\n * @param value - Value to set.\n */\nexport function treeSetValue<T>(tree: Tree<T>, value: T | undefined): void {\n  tree.node.value = value;\n  treeUpdateParents(tree);\n}\n\n/**\n * @returns Whether the tree has any children.\n */\nexport function treeHasChildren<T>(tree: Tree<T>): boolean {\n  return tree.node.childCount > 0;\n}\n\n/**\n * @returns Whethe rthe tree is empty (no value or children).\n */\nexport function treeIsEmpty<T>(tree: Tree<T>): boolean {\n  return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n\n/**\n * Calls action for each child of this tree node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachChild<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  each(tree.node.children, (child: string, childTree: TreeNode<T>) => {\n    action(new Tree<T>(child, tree, childTree));\n  });\n}\n\n/**\n * Does a depth-first traversal of this node's descendants, calling action for each one.\n *\n * @param action - Action to be called for each child.\n * @param includeSelf - Whether to call action on this node as well. Defaults to\n *   false.\n * @param childrenFirst - Whether to call action on children before calling it on\n *   parent.\n */\nexport function treeForEachDescendant<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void,\n  includeSelf?: boolean,\n  childrenFirst?: boolean\n): void {\n  if (includeSelf && !childrenFirst) {\n    action(tree);\n  }\n\n  treeForEachChild(tree, child => {\n    treeForEachDescendant(child, action, true, childrenFirst);\n  });\n\n  if (includeSelf && childrenFirst) {\n    action(tree);\n  }\n}\n\n/**\n * Calls action on each ancestor node.\n *\n * @param action - Action to be called on each parent; return\n *   true to abort.\n * @param includeSelf - Whether to call action on this node as well.\n * @returns true if the action callback returned true.\n */\nexport function treeForEachAncestor<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => unknown,\n  includeSelf?: boolean\n): boolean {\n  let node = includeSelf ? tree : tree.parent;\n  while (node !== null) {\n    if (action(node)) {\n      return true;\n    }\n    node = node.parent;\n  }\n  return false;\n}\n\n/**\n * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n * is found, action is called on it and traversal does not continue inside the node.\n * Action is *not* called on this node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachImmediateDescendantWithValue<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  treeForEachChild(tree, child => {\n    if (treeGetValue(child) !== undefined) {\n      action(child);\n    } else {\n      treeForEachImmediateDescendantWithValue(child, action);\n    }\n  });\n}\n\n/**\n * @returns The path of this tree node, as a Path.\n */\nexport function treeGetPath<T>(tree: Tree<T>) {\n  return new Path(\n    tree.parent === null\n      ? tree.name\n      : treeGetPath(tree.parent) + '/' + tree.name\n  );\n}\n\n/**\n * Adds or removes this child from its parent based on whether it's empty or not.\n */\nfunction treeUpdateParents<T>(tree: Tree<T>) {\n  if (tree.parent !== null) {\n    treeUpdateChild(tree.parent, tree.name, tree);\n  }\n}\n\n/**\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\n *\n * @param childName - The name of the child to update.\n * @param child - The child to update.\n */\nfunction treeUpdateChild<T>(tree: Tree<T>, childName: string, child: Tree<T>) {\n  const childEmpty = treeIsEmpty(child);\n  const childExists = contains(tree.node.children, childName);\n  if (childEmpty && childExists) {\n    delete tree.node.children[childName];\n    tree.node.childCount--;\n    treeUpdateParents(tree);\n  } else if (!childEmpty && !childExists) {\n    tree.node.children[childName] = child.node;\n    tree.node.childCount++;\n    treeUpdateParents(tree);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  contains,\n  errorPrefix as errorPrefixFxn,\n  safeGet,\n  stringLength\n} from '@firebase/util';\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport {\n  Path,\n  pathChild,\n  pathCompare,\n  pathContains,\n  pathGetBack,\n  pathGetFront,\n  pathSlice,\n  ValidationPath,\n  validationPathPop,\n  validationPathPush,\n  validationPathToErrorString\n} from './Path';\nimport { each, isInvalidJSONNumber } from './util';\n\n/**\n * True for invalid Firebase keys\n */\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n */\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Maximum number of characters to allow in leaf value\n */\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\nexport const isValidKey = function (key: unknown): boolean {\n  return (\n    typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key)\n  );\n};\n\nexport const isValidPathString = function (pathString: string): boolean {\n  return (\n    typeof pathString === 'string' &&\n    pathString.length !== 0 &&\n    !INVALID_PATH_REGEX_.test(pathString)\n  );\n};\n\nexport const isValidRootPathString = function (pathString: string): boolean {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\nexport const isValidPriority = function (priority: unknown): boolean {\n  return (\n    priority === null ||\n    typeof priority === 'string' ||\n    (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n    (priority &&\n      typeof priority === 'object' &&\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      contains(priority as any, '.sv'))\n  );\n};\n\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n */\nexport const validateFirebaseDataArg = function (\n  fnName: string,\n  value: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && value === undefined) {\n    return;\n  }\n\n  validateFirebaseData(errorPrefixFxn(fnName, 'value'), value, path);\n};\n\n/**\n * Validate a data object client-side before sending to server.\n */\nexport const validateFirebaseData = function (\n  errorPrefix: string,\n  data: unknown,\n  path_: Path | ValidationPath\n) {\n  const path =\n    path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(\n      errorPrefix + 'contains undefined ' + validationPathToErrorString(path)\n    );\n  }\n  if (typeof data === 'function') {\n    throw new Error(\n      errorPrefix +\n        'contains a function ' +\n        validationPathToErrorString(path) +\n        ' with contents = ' +\n        data.toString()\n    );\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(\n      errorPrefix +\n        'contains ' +\n        data.toString() +\n        ' ' +\n        validationPathToErrorString(path)\n    );\n  }\n\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (\n    typeof data === 'string' &&\n    data.length > MAX_LEAF_SIZE_ / 3 &&\n    stringLength(data) > MAX_LEAF_SIZE_\n  ) {\n    throw new Error(\n      errorPrefix +\n        'contains a string greater than ' +\n        MAX_LEAF_SIZE_ +\n        ' utf8 bytes ' +\n        validationPathToErrorString(path) +\n        \" ('\" +\n        data.substring(0, 50) +\n        \"...')\"\n    );\n  }\n\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key: string, value: unknown) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(\n            errorPrefix +\n              ' contains an invalid key (' +\n              key +\n              ') ' +\n              validationPathToErrorString(path) +\n              '.  Keys must be non-empty strings ' +\n              'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n          );\n        }\n      }\n\n      validationPathPush(path, key);\n      validateFirebaseData(errorPrefix, value, path);\n      validationPathPop(path);\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(\n        errorPrefix +\n          ' contains \".value\" child ' +\n          validationPathToErrorString(path) +\n          ' in addition to actual children.'\n      );\n    }\n  }\n};\n\n/**\n * Pre-validate paths passed in the firebase function.\n */\nexport const validateFirebaseMergePaths = function (\n  errorPrefix: string,\n  mergePaths: Path[]\n) {\n  let i, curPath: Path;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = pathSlice(curPath);\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) {\n        // .priority is OK\n      } else if (!isValidKey(keys[j])) {\n        throw new Error(\n          errorPrefix +\n            'contains an invalid key (' +\n            keys[j] +\n            ') in path ' +\n            curPath.toString() +\n            '. Keys must be non-empty strings ' +\n            'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n        );\n      }\n    }\n  }\n\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(pathCompare);\n  let prevPath: Path | null = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && pathContains(prevPath, curPath)) {\n      throw new Error(\n        errorPrefix +\n          'contains a path ' +\n          prevPath.toString() +\n          ' that is ancestor of another path ' +\n          curPath.toString()\n      );\n    }\n    prevPath = curPath;\n  }\n};\n\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n */\nexport const validateFirebaseMergeDataArg = function (\n  fnName: string,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  const errorPrefix = errorPrefixFxn(fnName, 'values');\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(\n      errorPrefix + ' must be an object containing the children to replace.'\n    );\n  }\n\n  const mergePaths: Path[] = [];\n  each(data, (key: string, value: unknown) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, pathChild(path, curPath));\n    if (pathGetBack(curPath) === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(\n          errorPrefix +\n            \"contains an invalid value for '\" +\n            curPath.toString() +\n            \"', which must be a valid \" +\n            'Firebase priority (a string, finite number, server value, or null).'\n        );\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nexport const validatePriority = function (\n  fnName: string,\n  priority: unknown,\n  optional: boolean\n) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'is ' +\n        priority.toString() +\n        ', but must be a valid Firebase priority (a string, finite number, ' +\n        'server value, or null).'\n    );\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'must be a valid Firebase priority ' +\n        '(a string, finite number, server value, or null).'\n    );\n  }\n};\n\nexport const validateKey = function (\n  fnName: string,\n  argumentName: string,\n  key: string,\n  optional: boolean\n) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid key = \"' +\n        key +\n        '\".  Firebase keys must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").'\n    );\n  }\n};\n\n/**\n * @internal\n */\nexport const validatePathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid path = \"' +\n        pathString +\n        '\". Paths must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"'\n    );\n  }\n};\n\nexport const validateRootPathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentName, pathString, optional);\n};\n\n/**\n * @internal\n */\nexport const validateWritablePath = function (fnName: string, path: Path) {\n  if (pathGetFront(path) === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nexport const validateUrl = function (\n  fnName: string,\n  parsedUrl: { repoInfo: RepoInfo; path: Path }\n) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (\n    !(typeof parsedUrl.repoInfo.host === 'string') ||\n    parsedUrl.repoInfo.host.length === 0 ||\n    (!isValidKey(parsedUrl.repoInfo.namespace) &&\n      parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n    (pathString.length !== 0 && !isValidRootPathString(pathString))\n  ) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'url') +\n        'must be a valid firebase URL and ' +\n        'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".'\n    );\n  }\n};\n\nexport const validateString = function (\n  fnName: string,\n  argumentName: string,\n  string: unknown,\n  optional: boolean\n) {\n  if (optional && string === undefined) {\n    return;\n  }\n  if (!(typeof string === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid string.'\n    );\n  }\n};\n\nexport const validateObject = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  optional: boolean\n) {\n  if (optional && obj === undefined) {\n    return;\n  }\n  if (!(obj && typeof obj === 'object') || obj === null) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid object.'\n    );\n  }\n};\n\nexport const validateObjectContainsKey = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  key: string,\n  optional: boolean,\n  optType?: string\n) {\n  const objectContainsKey =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj && typeof obj === 'object' && contains(obj as any, key);\n\n  if (!objectContainsKey) {\n    if (optional) {\n      return;\n    } else {\n      throw new Error(\n        errorPrefixFxn(fnName, argumentName) +\n          'must contain the key \"' +\n          key +\n          '\"'\n      );\n    }\n  }\n\n  if (optType) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const val = safeGet(obj as any, key);\n    if (\n      (optType === 'number' && !(typeof val === 'number')) ||\n      (optType === 'string' && !(typeof val === 'string')) ||\n      (optType === 'boolean' && !(typeof val === 'boolean')) ||\n      (optType === 'function' && !(typeof val === 'function')) ||\n      (optType === 'object' && !(typeof val === 'object') && val)\n    ) {\n      if (optional) {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'contains invalid value for key \"' +\n            key +\n            '\" (must be of type \"' +\n            optType +\n            '\")'\n        );\n      } else {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'must contain the key \"' +\n            key +\n            '\" with type \"' +\n            optType +\n            '\"'\n        );\n      }\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path, pathContains, pathEquals } from '../util/Path';\nimport { exceptionGuard, log, logger } from '../util/util';\n\nimport { Event } from './Event';\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n */\nexport class EventQueue {\n  eventLists_: EventList[] = [];\n\n  /**\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n   */\n  recursionDepth_ = 0;\n}\n\n/**\n * @param eventDataList - The new events to queue.\n */\nexport function eventQueueQueueEvents(\n  eventQueue: EventQueue,\n  eventDataList: Event[]\n) {\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  let currList: EventList | null = null;\n  for (let i = 0; i < eventDataList.length; i++) {\n    const data = eventDataList[i];\n    const path = data.getPath();\n    if (currList !== null && !pathEquals(path, currList.path)) {\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n    }\n\n    if (currList === null) {\n      currList = { events: [], path };\n    }\n\n    currList.events.push(data);\n  }\n  if (currList) {\n    eventQueue.eventLists_.push(currList);\n  }\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones)\n * for the specified path.\n *\n * It is assumed that the new events are all for the specified path.\n *\n * @param path - The path to raise events for.\n * @param eventDataList - The new events to raise.\n */\nexport function eventQueueRaiseEventsAtPath(\n  eventQueue: EventQueue,\n  path: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath =>\n    pathEquals(eventPath, path)\n  );\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\n * locations related to the specified change path (i.e. all ancestors and descendants).\n *\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n *\n * @param changedPath - The path to raise events for.\n * @param eventDataList - The events to raise\n */\nexport function eventQueueRaiseEventsForChangedPath(\n  eventQueue: EventQueue,\n  changedPath: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(\n    eventQueue,\n    eventPath =>\n      pathContains(eventPath, changedPath) ||\n      pathContains(changedPath, eventPath)\n  );\n}\n\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(\n  eventQueue: EventQueue,\n  predicate: (path: Path) => boolean\n) {\n  eventQueue.recursionDepth_++;\n\n  let sentAll = true;\n  for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n    const eventList = eventQueue.eventLists_[i];\n    if (eventList) {\n      const eventPath = eventList.path;\n      if (predicate(eventPath)) {\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n      } else {\n        sentAll = false;\n      }\n    }\n  }\n\n  if (sentAll) {\n    eventQueue.eventLists_ = [];\n  }\n\n  eventQueue.recursionDepth_--;\n}\n\ninterface EventList {\n  events: Event[];\n  path: Path;\n}\n\n/**\n * Iterates through the list and raises each event\n */\nfunction eventListRaise(eventList: EventList) {\n  for (let i = 0; i < eventList.events.length; i++) {\n    const eventData = eventList.events[i];\n    if (eventData !== null) {\n      eventList.events[i] = null;\n      const eventFn = eventData.getEventRunner();\n      if (logger) {\n        log('event: ' + eventData.toString());\n      }\n      exceptionGuard(eventFn);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  isEmpty,\n  map,\n  safeGet,\n  stringify\n} from '@firebase/util';\n\nimport { ValueEventRegistration } from '../api/Reference_impl';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { PersistentConnection } from './PersistentConnection';\nimport { ReadonlyRestClient } from './ReadonlyRestClient';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { SnapshotHolder } from './SnapshotHolder';\nimport {\n  newSparseSnapshotTree,\n  SparseSnapshotTree,\n  sparseSnapshotTreeForEachTree,\n  sparseSnapshotTreeForget,\n  sparseSnapshotTreeRemember\n} from './SparseSnapshotTree';\nimport { StatsCollection } from './stats/StatsCollection';\nimport { StatsListener } from './stats/StatsListener';\nimport {\n  statsManagerGetCollection,\n  statsManagerGetOrCreateReporter\n} from './stats/StatsManager';\nimport { StatsReporter, statsReporterIncludeStat } from './stats/StatsReporter';\nimport {\n  SyncTree,\n  syncTreeAckUserWrite,\n  syncTreeAddEventRegistration,\n  syncTreeApplyServerMerge,\n  syncTreeApplyServerOverwrite,\n  syncTreeApplyTaggedQueryMerge,\n  syncTreeApplyTaggedQueryOverwrite,\n  syncTreeApplyUserMerge,\n  syncTreeApplyUserOverwrite,\n  syncTreeCalcCompleteEventCache,\n  syncTreeGetServerValue,\n  syncTreeRemoveEventRegistration,\n  syncTreeTagForQuery\n} from './SyncTree';\nimport { Indexable } from './util/misc';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathPopFront\n} from './util/Path';\nimport {\n  generateWithValues,\n  resolveDeferredValueSnapshot,\n  resolveDeferredValueTree\n} from './util/ServerValues';\nimport {\n  Tree,\n  treeForEachAncestor,\n  treeForEachChild,\n  treeForEachDescendant,\n  treeGetPath,\n  treeGetValue,\n  treeHasChildren,\n  treeSetValue,\n  treeSubTree\n} from './util/Tree';\nimport {\n  beingCrawled,\n  each,\n  exceptionGuard,\n  log,\n  LUIDGenerator,\n  warn\n} from './util/util';\nimport { isValidPriority, validateFirebaseData } from './util/validation';\nimport { Event } from './view/Event';\nimport {\n  EventQueue,\n  eventQueueQueueEvents,\n  eventQueueRaiseEventsAtPath,\n  eventQueueRaiseEventsForChangedPath\n} from './view/EventQueue';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n\n/**\n * If a transaction does not succeed after 25 retries, we abort it. Among other\n * things this ensure that if there's ever a bug causing a mismatch between\n * client / server hashes for some data, we won't retry indefinitely.\n */\nconst MAX_TRANSACTION_RETRIES = 25;\n\nconst enum TransactionStatus {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  RUN,\n\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  SENT,\n\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  COMPLETED,\n\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  SENT_NEEDS_ABORT,\n\n  // Temporary state used to mark transactions that need to be aborted.\n  NEEDS_ABORT\n}\n\ninterface Transaction {\n  path: Path;\n  update: (a: unknown) => unknown;\n  onComplete: (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => void;\n  status: TransactionStatus;\n  order: number;\n  applyLocally: boolean;\n  retryCount: number;\n  unwatcher: () => void;\n  abortReason: string | null;\n  currentWriteId: number;\n  currentInputSnapshot: Node | null;\n  currentOutputSnapshotRaw: Node | null;\n  currentOutputSnapshotResolved: Node | null;\n}\n\n/**\n * A connection to a single data repository.\n */\nexport class Repo {\n  /** Key for uniquely identifying this repo, used in RepoManager */\n  readonly key: string;\n\n  dataUpdateCount = 0;\n  infoSyncTree_: SyncTree;\n  serverSyncTree_: SyncTree;\n\n  stats_: StatsCollection;\n  statsListener_: StatsListener | null = null;\n  eventQueue_ = new EventQueue();\n  nextWriteId_ = 1;\n  server_: ServerActions;\n  statsReporter_: StatsReporter;\n  infoData_: SnapshotHolder;\n  interceptServerDataCallback_: ((a: string, b: unknown) => void) | null = null;\n\n  /** A list of data pieces and paths to be set when this client disconnects. */\n  onDisconnect_: SparseSnapshotTree = newSparseSnapshotTree();\n\n  /** Stores queues of outstanding transactions for Firebase locations. */\n  transactionQueueTree_ = new Tree<Transaction[]>();\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  persistentConnection_: PersistentConnection | null = null;\n\n  constructor(\n    public repoInfo_: RepoInfo,\n    public forceRestClient_: boolean,\n    public authTokenProvider_: AuthTokenProvider,\n    public appCheckProvider_: AppCheckTokenProvider\n  ) {\n    // This key is intentionally not updated if RepoInfo is later changed or replaced\n    this.key = this.repoInfo_.toURLString();\n  }\n\n  /**\n   * @returns The URL corresponding to the root of this Firebase.\n   */\n  toString(): string {\n    return (\n      (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host\n    );\n  }\n}\n\nexport function repoStart(\n  repo: Repo,\n  appId: string,\n  authOverride?: object\n): void {\n  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n\n  if (repo.forceRestClient_ || beingCrawled()) {\n    repo.server_ = new ReadonlyRestClient(\n      repo.repoInfo_,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_\n    );\n\n    // Minor hack: Fire onConnect immediately, since there's no actual connection.\n    setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\n  } else {\n    // Validate authOverride\n    if (typeof authOverride !== 'undefined' && authOverride !== null) {\n      if (typeof authOverride !== 'object') {\n        throw new Error(\n          'Only objects are supported for option databaseAuthVariableOverride'\n        );\n      }\n      try {\n        stringify(authOverride);\n      } catch (e) {\n        throw new Error('Invalid authOverride provided: ' + e);\n      }\n    }\n\n    repo.persistentConnection_ = new PersistentConnection(\n      repo.repoInfo_,\n      appId,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      (connectStatus: boolean) => {\n        repoOnConnectStatus(repo, connectStatus);\n      },\n      (updates: object) => {\n        repoOnServerInfoUpdate(repo, updates);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_,\n      authOverride\n    );\n\n    repo.server_ = repo.persistentConnection_;\n  }\n\n  repo.authTokenProvider_.addTokenChangeListener(token => {\n    repo.server_.refreshAuthToken(token);\n  });\n\n  repo.appCheckProvider_.addTokenChangeListener(result => {\n    repo.server_.refreshAppCheckToken(result.token);\n  });\n\n  // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n  repo.statsReporter_ = statsManagerGetOrCreateReporter(\n    repo.repoInfo_,\n    () => new StatsReporter(repo.stats_, repo.server_)\n  );\n\n  // Used for .info.\n  repo.infoData_ = new SnapshotHolder();\n  repo.infoSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      let infoEvents: Event[] = [];\n      const node = repo.infoData_.getNode(query._path);\n      // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n      // on initial data...\n      if (!node.isEmpty()) {\n        infoEvents = syncTreeApplyServerOverwrite(\n          repo.infoSyncTree_,\n          query._path,\n          node\n        );\n        setTimeout(() => {\n          onComplete('ok');\n        }, 0);\n      }\n      return infoEvents;\n    },\n    stopListening: () => {}\n  });\n  repoUpdateInfo(repo, 'connected', false);\n\n  repo.serverSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n        const events = onComplete(status, data);\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          query._path,\n          events\n        );\n      });\n      // No synchronous events for network-backed sync trees\n      return [];\n    },\n    stopListening: (query, tag) => {\n      repo.server_.unlisten(query, tag);\n    }\n  });\n}\n\n/**\n * @returns The time in milliseconds, taking the server offset into account if we have one.\n */\nexport function repoServerTime(repo: Repo): number {\n  const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n  const offset = (offsetNode.val() as number) || 0;\n  return new Date().getTime() + offset;\n}\n\n/**\n * Generate ServerValues using some variables from the repo object.\n */\nexport function repoGenerateServerValues(repo: Repo): Indexable {\n  return generateWithValues({\n    timestamp: repoServerTime(repo)\n  });\n}\n\n/**\n * Called by realtime when we get new messages from the server.\n */\nfunction repoOnDataUpdate(\n  repo: Repo,\n  pathString: string,\n  data: unknown,\n  isMerge: boolean,\n  tag: number | null\n): void {\n  // For testing.\n  repo.dataUpdateCount++;\n  const path = new Path(pathString);\n  data = repo.interceptServerDataCallback_\n    ? repo.interceptServerDataCallback_(pathString, data)\n    : data;\n  let events = [];\n  if (tag) {\n    if (isMerge) {\n      const taggedChildren = map(\n        data as { [k: string]: unknown },\n        (raw: unknown) => nodeFromJSON(raw)\n      );\n      events = syncTreeApplyTaggedQueryMerge(\n        repo.serverSyncTree_,\n        path,\n        taggedChildren,\n        tag\n      );\n    } else {\n      const taggedSnap = nodeFromJSON(data);\n      events = syncTreeApplyTaggedQueryOverwrite(\n        repo.serverSyncTree_,\n        path,\n        taggedSnap,\n        tag\n      );\n    }\n  } else if (isMerge) {\n    const changedChildren = map(\n      data as { [k: string]: unknown },\n      (raw: unknown) => nodeFromJSON(raw)\n    );\n    events = syncTreeApplyServerMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren\n    );\n  } else {\n    const snap = nodeFromJSON(data);\n    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n  }\n  let affectedPath = path;\n  if (events.length > 0) {\n    // Since we have a listener outstanding for each transaction, receiving any events\n    // is a proxy for some change having occurred.\n    affectedPath = repoRerunTransactions(repo, path);\n  }\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\n\n// TODO: This should be @private but it's used by test_access.js and internal.js\nexport function repoInterceptServerData(\n  repo: Repo,\n  callback: ((a: string, b: unknown) => unknown) | null\n): void {\n  repo.interceptServerDataCallback_ = callback;\n}\n\nfunction repoOnConnectStatus(repo: Repo, connectStatus: boolean): void {\n  repoUpdateInfo(repo, 'connected', connectStatus);\n  if (connectStatus === false) {\n    repoRunOnDisconnectEvents(repo);\n  }\n}\n\nfunction repoOnServerInfoUpdate(repo: Repo, updates: object): void {\n  each(updates, (key: string, value: unknown) => {\n    repoUpdateInfo(repo, key, value);\n  });\n}\n\nfunction repoUpdateInfo(repo: Repo, pathString: string, value: unknown): void {\n  const path = new Path('/.info/' + pathString);\n  const newNode = nodeFromJSON(value);\n  repo.infoData_.updateSnapshot(path, newNode);\n  const events = syncTreeApplyServerOverwrite(\n    repo.infoSyncTree_,\n    path,\n    newNode\n  );\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\n\nfunction repoGetNextWriteId(repo: Repo): number {\n  return repo.nextWriteId_++;\n}\n\n/**\n * The purpose of `getValue` is to return the latest known value\n * satisfying `query`.\n *\n * This method will first check for in-memory cached values\n * belonging to active listeners. If they are found, such values\n * are considered to be the most up-to-date.\n *\n * If the client is not connected, this method will wait until the\n *  repo has established a connection and then request the value for `query`.\n * If the client is not able to retrieve the query result for another reason,\n * it reports an error.\n *\n * @param query - The query to surface a value for.\n */\nexport function repoGetValue(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: ValueEventRegistration\n): Promise<Node> {\n  // Only active queries are cached. There is no persisted cache.\n  const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n  if (cached != null) {\n    return Promise.resolve(cached);\n  }\n  return repo.server_.get(query).then(\n    payload => {\n      const node = nodeFromJSON(payload).withIndex(\n        query._queryParams.getIndex()\n      );\n      /**\n       * Below we simulate the actions of an `onlyOnce` `onValue()` event where:\n       * Add an event registration,\n       * Update data at the path,\n       * Raise any events,\n       * Cleanup the SyncTree\n       */\n      syncTreeAddEventRegistration(\n        repo.serverSyncTree_,\n        query,\n        eventRegistration,\n        true\n      );\n      let events: Event[];\n      if (query._queryParams.loadsAllData()) {\n        events = syncTreeApplyServerOverwrite(\n          repo.serverSyncTree_,\n          query._path,\n          node\n        );\n      } else {\n        const tag = syncTreeTagForQuery(repo.serverSyncTree_, query);\n        events = syncTreeApplyTaggedQueryOverwrite(\n          repo.serverSyncTree_,\n          query._path,\n          node,\n          tag\n        );\n      }\n      /*\n       * We need to raise events in the scenario where `get()` is called at a parent path, and\n       * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting\n       * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree\n       * and its corresponding serverCache, including the child location where `onValue` is called. Then,\n       * `onValue` will receive the event from the server, but look at the syncTree and see that the data received\n       * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.\n       * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and\n       * ensure the corresponding child events will get fired.\n       */\n      eventQueueRaiseEventsForChangedPath(\n        repo.eventQueue_,\n        query._path,\n        events\n      );\n      syncTreeRemoveEventRegistration(\n        repo.serverSyncTree_,\n        query,\n        eventRegistration,\n        null,\n        true\n      );\n      return node;\n    },\n    err => {\n      repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n      return Promise.reject(new Error(err as string));\n    }\n  );\n}\n\nexport function repoSetWithPriority(\n  repo: Repo,\n  path: Path,\n  newVal: unknown,\n  newPriority: number | string | null,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'set', {\n    path: path.toString(),\n    value: newVal,\n    priority: newPriority\n  });\n\n  // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n  // (b) store unresolved paths on JSON parse\n  const serverValues = repoGenerateServerValues(repo);\n  const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n  const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n  const newNode = resolveDeferredValueSnapshot(\n    newNodeUnresolved,\n    existing,\n    serverValues\n  );\n\n  const writeId = repoGetNextWriteId(repo);\n  const events = syncTreeApplyUserOverwrite(\n    repo.serverSyncTree_,\n    path,\n    newNode,\n    writeId,\n    true\n  );\n  eventQueueQueueEvents(repo.eventQueue_, events);\n  repo.server_.put(\n    path.toString(),\n    newNodeUnresolved.val(/*export=*/ true),\n    (status, errorReason) => {\n      const success = status === 'ok';\n      if (!success) {\n        warn('set at ' + path + ' failed: ' + status);\n      }\n\n      const clearEvents = syncTreeAckUserWrite(\n        repo.serverSyncTree_,\n        writeId,\n        !success\n      );\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n  const affectedPath = repoAbortTransactions(repo, path);\n  repoRerunTransactions(repo, affectedPath);\n  // We queued the events above, so just flush the queue here\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\n\nexport function repoUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\n\n  // Start with our existing data and merge each child into it.\n  let empty = true;\n  const serverValues = repoGenerateServerValues(repo);\n  const changedChildren: { [k: string]: Node } = {};\n  each(childrenToMerge, (changedKey: string, changedValue: unknown) => {\n    empty = false;\n    changedChildren[changedKey] = resolveDeferredValueTree(\n      pathChild(path, changedKey),\n      nodeFromJSON(changedValue),\n      repo.serverSyncTree_,\n      serverValues\n    );\n  });\n\n  if (!empty) {\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren,\n      writeId\n    );\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.merge(\n      path.toString(),\n      childrenToMerge,\n      (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n          warn('update at ' + path + ' failed: ' + status);\n        }\n\n        const clearEvents = syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          writeId,\n          !success\n        );\n        const affectedPath =\n          clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          affectedPath,\n          clearEvents\n        );\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n      }\n    );\n\n    each(childrenToMerge, (changedPath: string) => {\n      const affectedPath = repoAbortTransactions(\n        repo,\n        pathChild(path, changedPath)\n      );\n      repoRerunTransactions(repo, affectedPath);\n    });\n\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n  } else {\n    log(\"update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n  }\n}\n\n/**\n * Applies all of the changes stored up in the onDisconnect_ tree.\n */\nfunction repoRunOnDisconnectEvents(repo: Repo): void {\n  repoLog(repo, 'onDisconnectEvents');\n\n  const serverValues = repoGenerateServerValues(repo);\n  const resolvedOnDisconnectTree = newSparseSnapshotTree();\n  sparseSnapshotTreeForEachTree(\n    repo.onDisconnect_,\n    newEmptyPath(),\n    (path, node) => {\n      const resolved = resolveDeferredValueTree(\n        path,\n        node,\n        repo.serverSyncTree_,\n        serverValues\n      );\n      sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n    }\n  );\n  let events: Event[] = [];\n\n  sparseSnapshotTreeForEachTree(\n    resolvedOnDisconnectTree,\n    newEmptyPath(),\n    (path, snap) => {\n      events = events.concat(\n        syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap)\n      );\n      const affectedPath = repoAbortTransactions(repo, path);\n      repoRerunTransactions(repo, affectedPath);\n    }\n  );\n\n  repo.onDisconnect_ = newSparseSnapshotTree();\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\n\nexport function repoOnDisconnectCancel(\n  repo: Repo,\n  path: Path,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeForget(repo.onDisconnect_, path);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nexport function repoOnDisconnectSet(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectSetWithPriority(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  priority: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value, priority);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  if (isEmpty(childrenToMerge)) {\n    log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    return;\n  }\n\n  repo.server_.onDisconnectMerge(\n    path.toString(),\n    childrenToMerge,\n    (status, errorReason) => {\n      if (status === 'ok') {\n        each(childrenToMerge, (childName: string, childNode: unknown) => {\n          const newChildNode = nodeFromJSON(childNode);\n          sparseSnapshotTreeRemember(\n            repo.onDisconnect_,\n            pathChild(path, childName),\n            newChildNode\n          );\n        });\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoAddEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeAddEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeAddEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoRemoveEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n  // a little bit by handling the return values anyways.\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeRemoveEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeRemoveEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoInterrupt(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n  }\n}\n\nexport function repoResume(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.resume(INTERRUPT_REASON);\n  }\n}\n\nexport function repoStats(repo: Repo, showDelta: boolean = false): void {\n  if (typeof console === 'undefined') {\n    return;\n  }\n\n  let stats: { [k: string]: unknown };\n  if (showDelta) {\n    if (!repo.statsListener_) {\n      repo.statsListener_ = new StatsListener(repo.stats_);\n    }\n    stats = repo.statsListener_.get();\n  } else {\n    stats = repo.stats_.get();\n  }\n\n  const longestName = Object.keys(stats).reduce(\n    (previousValue, currentValue) =>\n      Math.max(currentValue.length, previousValue),\n    0\n  );\n\n  each(stats, (stat: string, value: unknown) => {\n    let paddedStat = stat;\n    // pad stat names to be the same length (plus 2 extra spaces).\n    for (let i = stat.length; i < longestName + 2; i++) {\n      paddedStat += ' ';\n    }\n    console.log(paddedStat + value);\n  });\n}\n\nexport function repoStatsIncrementCounter(repo: Repo, metric: string): void {\n  repo.stats_.incrementCounter(metric);\n  statsReporterIncludeStat(repo.statsReporter_, metric);\n}\n\nfunction repoLog(repo: Repo, ...varArgs: unknown[]): void {\n  let prefix = '';\n  if (repo.persistentConnection_) {\n    prefix = repo.persistentConnection_.id + ':';\n  }\n  log(prefix, ...varArgs);\n}\n\nexport function repoCallOnCompleteCallback(\n  repo: Repo,\n  callback: ((status: Error | null, errorReason?: string) => void) | null,\n  status: string,\n  errorReason?: string | null\n): void {\n  if (callback) {\n    exceptionGuard(() => {\n      if (status === 'ok') {\n        callback(null);\n      } else {\n        const code = (status || 'error').toUpperCase();\n        let message = code;\n        if (errorReason) {\n          message += ': ' + errorReason;\n        }\n\n        const error = new Error(message);\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (error as any).code = code;\n        callback(error);\n      }\n    });\n  }\n}\n\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and\n * sends it to the server if possible.\n *\n * @param path - Path at which to do transaction.\n * @param transactionUpdate - Update callback.\n * @param onComplete - Completion callback.\n * @param unwatcher - Function that will be called when the transaction no longer\n * need data updates for `path`.\n * @param applyLocally - Whether or not to make intermediate results visible\n */\nexport function repoStartTransaction(\n  repo: Repo,\n  path: Path,\n  transactionUpdate: (a: unknown) => unknown,\n  onComplete: ((error: Error, committed: boolean, node: Node) => void) | null,\n  unwatcher: () => void,\n  applyLocally: boolean\n): void {\n  repoLog(repo, 'transaction on ' + path);\n\n  // Initialize transaction.\n  const transaction: Transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out\n    // which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  };\n\n  // Run transaction initially.\n  const currentState = repoGetLatestState(repo, path, undefined);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      transaction.onComplete(null, false, transaction.currentInputSnapshot);\n    }\n  } else {\n    validateFirebaseData(\n      'transaction failed: Data returned ',\n      newVal,\n      transaction.path\n    );\n\n    // Mark as run and add to our queue.\n    transaction.status = TransactionStatus.RUN;\n    const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n    const nodeQueue = treeGetValue(queueNode) || [];\n    nodeQueue.push(transaction);\n\n    treeSetValue(queueNode, nodeQueue);\n\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our\n    // transaction state, since the user could start new transactions from the\n    // event callbacks.\n    let priorityForNode;\n    if (\n      typeof newVal === 'object' &&\n      newVal !== null &&\n      contains(newVal, '.priority')\n    ) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal as any, '.priority');\n      assert(\n        isValidPriority(priorityForNode),\n        'Invalid priority returned by transaction. ' +\n          'Priority must be a valid string, finite number, server value, or null.'\n      );\n    } else {\n      const currentNode =\n        syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\n        ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      currentState,\n      serverValues\n    );\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = repoGetNextWriteId(repo);\n\n    const events = syncTreeApplyUserOverwrite(\n      repo.serverSyncTree_,\n      path,\n      newNode,\n      transaction.currentWriteId,\n      transaction.applyLocally\n    );\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n  }\n}\n\n/**\n * @param excludeSets - A specific set to exclude\n */\nfunction repoGetLatestState(\n  repo: Repo,\n  path: Path,\n  excludeSets?: number[]\n): Node {\n  return (\n    syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\n    ChildrenNode.EMPTY_NODE\n  );\n}\n\n/**\n * Sends any already-run transactions that aren't waiting for outstanding\n * transactions to complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively\n * with a particular transactionQueueTree node to recurse through the tree.\n *\n * @param node - transactionQueueTree node to start at.\n */\nfunction repoSendReadyTransactions(\n  repo: Repo,\n  node: Tree<Transaction[]> = repo.transactionQueueTree_\n): void {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    repoPruneCompletedTransactionsBelowNode(repo, node);\n  }\n\n  if (treeGetValue(node)) {\n    const queue = repoBuildTransactionQueue(repo, node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n\n    const allRun = queue.every(\n      (transaction: Transaction) => transaction.status === TransactionStatus.RUN\n    );\n\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      repoSendTransactionQueue(repo, treeGetPath(node), queue);\n    }\n  } else if (treeHasChildren(node)) {\n    treeForEachChild(node, childNode => {\n      repoSendReadyTransactions(repo, childNode);\n    });\n  }\n}\n\n/**\n * Given a list of run transactions, send them to the server and then handle\n * the result (success or failure).\n *\n * @param path - The location of the queue.\n * @param queue - Queue of transactions under the specified location.\n */\nfunction repoSendTransactionQueue(\n  repo: Repo,\n  path: Path,\n  queue: Transaction[]\n): void {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = repoGetLatestState(repo, path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(\n      txn.status === TransactionStatus.RUN,\n      'tryToSendTransactionQueue_: items in queue should all be run.'\n    );\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    const relativePath = newRelativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(\n      relativePath /** @type {!Node} */,\n      txn.currentOutputSnapshotRaw\n    );\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n\n  // Send the put.\n  repo.server_.put(\n    pathToSend.toString(),\n    dataToSend,\n    (status: string) => {\n      repoLog(repo, 'transaction put response', {\n        path: pathToSend.toString(),\n        status\n      });\n\n      let events: Event[] = [];\n      if (status === 'ok') {\n        // Queue up the callbacks and fire them after cleaning up all of our\n        // transaction state, since the callback could trigger more\n        // transactions or sets.\n        const callbacks = [];\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.COMPLETED;\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId)\n          );\n          if (queue[i].onComplete) {\n            // We never unset the output snapshot, and given that this\n            // transaction is complete, it should be set\n            callbacks.push(() =>\n              queue[i].onComplete(\n                null,\n                true,\n                queue[i].currentOutputSnapshotResolved\n              )\n            );\n          }\n          queue[i].unwatcher();\n        }\n\n        // Now remove the completed transactions.\n        repoPruneCompletedTransactionsBelowNode(\n          repo,\n          treeSubTree(repo.transactionQueueTree_, path)\n        );\n        // There may be pending transactions that we can now send.\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n        // Finally, trigger onComplete callbacks.\n        for (let i = 0; i < callbacks.length; i++) {\n          exceptionGuard(callbacks[i]);\n        }\n      } else {\n        // transactions are no longer sent.  Update their status appropriately.\n        if (status === 'datastale') {\n          for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n              queue[i].status = TransactionStatus.NEEDS_ABORT;\n            } else {\n              queue[i].status = TransactionStatus.RUN;\n            }\n          }\n        } else {\n          warn(\n            'transaction at ' + pathToSend.toString() + ' failed: ' + status\n          );\n          for (let i = 0; i < queue.length; i++) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n            queue[i].abortReason = status;\n          }\n        }\n\n        repoRerunTransactions(repo, path);\n      }\n    },\n    latestHash\n  );\n}\n\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions. This\n * is the path at which events need to be raised for.\n *\n * @param changedPath - The path in mergedData that changed.\n * @returns The rootmost path that was affected by rerunning transactions.\n */\nfunction repoRerunTransactions(repo: Repo, changedPath: Path): Path {\n  const rootMostTransactionNode = repoGetAncestorTransactionNode(\n    repo,\n    changedPath\n  );\n  const path = treeGetPath(rootMostTransactionNode);\n\n  const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n  repoRerunTransactionQueue(repo, queue, path);\n\n  return path;\n}\n\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted\n * transactions and whatnot).\n *\n * @param queue - The queue of transactions to run.\n * @param path - The path the queue is for.\n */\nfunction repoRerunTransactionQueue(\n  repo: Repo,\n  queue: Transaction[],\n  path: Path\n): void {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n\n  // Queue up the callbacks and fire them after cleaning up all of our\n  // transaction state, since the callback could trigger more transactions or\n  // sets.\n  const callbacks = [];\n  let events: Event[] = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => {\n    return q.status === TransactionStatus.RUN;\n  });\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = newRelativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(\n      relativePath !== null,\n      'rerunTransactionsUnderNode_: relativePath should not be null.'\n    );\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(\n        syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          transaction.currentWriteId,\n          true\n        )\n      );\n    } else if (transaction.status === TransactionStatus.RUN) {\n      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            transaction.currentWriteId,\n            true\n          )\n        );\n      } else {\n        // This code reruns a transaction\n        const currentNode = repoGetLatestState(\n          repo,\n          transaction.path,\n          setsToIgnore\n        );\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData(\n            'transaction failed: Data returned ',\n            newData,\n            transaction.path\n          );\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority =\n            typeof newData === 'object' &&\n            newData != null &&\n            contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = repoGenerateServerValues(repo);\n          const newNodeResolved = resolveDeferredValueSnapshot(\n            newDataNode,\n            currentNode,\n            serverValues\n          );\n\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = repoGetNextWriteId(repo);\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(\n            syncTreeApplyUserOverwrite(\n              repo.serverSyncTree_,\n              transaction.path,\n              newNodeResolved,\n              transaction.currentWriteId,\n              transaction.applyLocally\n            )\n          );\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true)\n          );\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(\n            syncTreeAckUserWrite(\n              repo.serverSyncTree_,\n              transaction.currentWriteId,\n              true\n            )\n          );\n        }\n      }\n    }\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED;\n\n      // Removing a listener can trigger pruning which can muck with\n      // mergedData/visibleData (as it prunes data). So defer the unwatcher\n      // until we're done.\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          callbacks.push(() =>\n            queue[i].onComplete(null, false, queue[i].currentInputSnapshot)\n          );\n        } else {\n          callbacks.push(() =>\n            queue[i].onComplete(new Error(abortReason), false, null)\n          );\n        }\n      }\n    }\n  }\n\n  // Clean up completed transactions.\n  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\n\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n\n  // Try to send the transaction result to the server.\n  repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending\n * transaction on it, or just returns the node for the given path if there are\n * no pending transactions on any ancestor.\n *\n * @param path - The location to start at.\n * @returns The rootmost node with a transaction.\n */\nfunction repoGetAncestorTransactionNode(\n  repo: Repo,\n  path: Path\n): Tree<Transaction[]> {\n  let front;\n\n  // Start at the root and walk deeper into the tree towards path until we\n  // find a node with pending transactions.\n  let transactionNode = repo.transactionQueueTree_;\n  front = pathGetFront(path);\n  while (front !== null && treeGetValue(transactionNode) === undefined) {\n    transactionNode = treeSubTree(transactionNode, front);\n    path = pathPopFront(path);\n    front = pathGetFront(path);\n  }\n\n  return transactionNode;\n}\n\n/**\n * Builds the queue of all transactions at or below the specified\n * transactionNode.\n *\n * @param transactionNode\n * @returns The generated queue.\n */\nfunction repoBuildTransactionQueue(\n  repo: Repo,\n  transactionNode: Tree<Transaction[]>\n): Transaction[] {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue: Transaction[] = [];\n  repoAggregateTransactionQueuesForNode(\n    repo,\n    transactionNode,\n    transactionQueue\n  );\n\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => a.order - b.order);\n\n  return transactionQueue;\n}\n\nfunction repoAggregateTransactionQueuesForNode(\n  repo: Repo,\n  node: Tree<Transaction[]>,\n  queue: Transaction[]\n): void {\n  const nodeQueue = treeGetValue(node);\n  if (nodeQueue) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  treeForEachChild(node, child => {\n    repoAggregateTransactionQueuesForNode(repo, child, queue);\n  });\n}\n\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n */\nfunction repoPruneCompletedTransactionsBelowNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    treeSetValue(node, queue.length > 0 ? queue : undefined);\n  }\n\n  treeForEachChild(node, childNode => {\n    repoPruneCompletedTransactionsBelowNode(repo, childNode);\n  });\n}\n\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.\n * Called when doing a set() or update() since we consider them incompatible\n * with transactions.\n *\n * @param path - Path for which we want to abort related transactions.\n */\nfunction repoAbortTransactions(repo: Repo, path: Path): Path {\n  const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n\n  const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n\n  treeForEachAncestor(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  repoAbortTransactionsOnNode(repo, transactionNode);\n\n  treeForEachDescendant(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  return affectedPath;\n}\n\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param node - Node to abort transactions for.\n */\nfunction repoAbortTransactionsOnNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions\n    // or sets.\n    const callbacks = [];\n\n    // Go through queue.  Any already-sent transactions must be marked for\n    // abort, while the unsent ones can be immediately aborted and removed.\n    let events: Event[] = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n        // Already marked.  No action needed.\n      } else if (queue[i].status === TransactionStatus.SENT) {\n        assert(\n          lastSent === i - 1,\n          'All SENT items should be at beginning of queue.'\n        );\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(\n          queue[i].status === TransactionStatus.RUN,\n          'Unexpected transaction status in abort'\n        );\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            queue[i].currentWriteId,\n            true\n          )\n        );\n        if (queue[i].onComplete) {\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error('set'), false, null)\n          );\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      treeSetValue(node, undefined);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n\n    // Now fire the callbacks.\n    eventQueueRaiseEventsForChangedPath(\n      repo.eventQueue_,\n      treeGetPath(node),\n      events\n    );\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../../RepoInfo';\nimport { Path } from '../Path';\nimport { warnIfPageIsSecure, warn, fatal } from '../util';\n\nfunction decodePath(pathString: string): string {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n\n/**\n * @returns key value hash\n */\nfunction decodeQuery(queryString: string): { [key: string]: string } {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\n\nexport const parseRepoInfo = function (\n  dataURL: string,\n  nodeAdmin: boolean\n): { repoInfo: RepoInfo; path: Path } {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(\n      parsedUrl.host +\n        ' is no longer supported. ' +\n        'Please use <YOUR FIREBASE>.firebaseio.com instead'\n    );\n  }\n\n  // Catch common error of uninitialized namespace value.\n  if (\n    (!namespace || namespace === 'undefined') &&\n    parsedUrl.domain !== 'localhost'\n  ) {\n    fatal(\n      'Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com'\n    );\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n\n  return {\n    repoInfo: new RepoInfo(\n      parsedUrl.host,\n      parsedUrl.secure,\n      namespace,\n      webSocketOnly,\n      nodeAdmin,\n      /*persistenceKey=*/ '',\n      /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain\n    ),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\nexport const parseDatabaseURL = function (dataURL: string): {\n  host: string;\n  port: number;\n  domain: string;\n  subdomain: string;\n  secure: boolean;\n  scheme: string;\n  pathString: string;\n  namespace: string;\n} {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(\n      dataURL.substring(Math.min(dataURL.length, questionMarkInd))\n    );\n\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n\n    const hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringify } from '@firebase/util';\n\nimport { DataSnapshot as ExpDataSnapshot } from '../../api/Reference_impl';\nimport { Path } from '../util/Path';\n\nimport { EventRegistration } from './EventRegistration';\n\n/**\n * Encapsulates the data needed to raise an event\n * @interface\n */\nexport interface Event {\n  getPath(): Path;\n\n  getEventType(): string;\n\n  getEventRunner(): () => void;\n\n  toString(): string;\n}\n\n/**\n * One of the following strings: \"value\", \"child_added\", \"child_changed\",\n * \"child_removed\", or \"child_moved.\"\n */\nexport type EventType =\n  | 'value'\n  | 'child_added'\n  | 'child_changed'\n  | 'child_moved'\n  | 'child_removed';\n\n/**\n * Encapsulates the data needed to raise an event\n */\nexport class DataEvent implements Event {\n  /**\n   * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\n   * @param eventRegistration - The function to call to with the event data. User provided\n   * @param snapshot - The data backing the event\n   * @param prevName - Optional, the name of the previous child for child_* events.\n   */\n  constructor(\n    public eventType: EventType,\n    public eventRegistration: EventRegistration,\n    public snapshot: ExpDataSnapshot,\n    public prevName?: string | null\n  ) {}\n  getPath(): Path {\n    const ref = this.snapshot.ref;\n    if (this.eventType === 'value') {\n      return ref._path;\n    } else {\n      return ref.parent._path;\n    }\n  }\n  getEventType(): string {\n    return this.eventType;\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return (\n      this.getPath().toString() +\n      ':' +\n      this.eventType +\n      ':' +\n      stringify(this.snapshot.exportVal())\n    );\n  }\n}\n\nexport class CancelEvent implements Event {\n  constructor(\n    public eventRegistration: EventRegistration,\n    public error: Error,\n    public path: Path\n  ) {}\n  getPath(): Path {\n    return this.path;\n  }\n  getEventType(): string {\n    return 'cancel';\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return this.path.toString() + ':cancel';\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { DataSnapshot } from '../../api/Reference_impl';\nimport { Repo } from '../Repo';\nimport { Path } from '../util/Path';\n\nimport { Change } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport { QueryParams } from './QueryParams';\n\n/**\n * A user callback. Callbacks issues from the Legacy SDK maintain references\n * to the original user-issued callbacks, which allows equality\n * comparison by reference even though this callbacks are wrapped before\n * they can be passed to the firebase@exp SDK.\n *\n * @internal\n */\nexport interface UserCallback {\n  (dataSnapshot: DataSnapshot, previousChildName?: string | null): unknown;\n  userCallback?: unknown;\n  context?: object | null;\n}\n\n/**\n * A wrapper class that converts events from the database@exp SDK to the legacy\n * Database SDK. Events are not converted directly as event registration relies\n * on reference comparison of the original user callback (see `matches()`) and\n * relies on equality of the legacy SDK's `context` object.\n */\nexport class CallbackContext {\n  constructor(\n    private readonly snapshotCallback: UserCallback,\n    private readonly cancelCallback?: (error: Error) => unknown\n  ) {}\n\n  onValue(\n    expDataSnapshot: DataSnapshot,\n    previousChildName?: string | null\n  ): void {\n    this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n  }\n\n  onCancel(error: Error): void {\n    assert(\n      this.hasCancelCallback,\n      'Raising a cancel event on a listener with no cancel callback'\n    );\n    return this.cancelCallback.call(null, error);\n  }\n\n  get hasCancelCallback(): boolean {\n    return !!this.cancelCallback;\n  }\n\n  matches(other: CallbackContext): boolean {\n    return (\n      this.snapshotCallback === other.snapshotCallback ||\n      (this.snapshotCallback.userCallback !== undefined &&\n        this.snapshotCallback.userCallback ===\n          other.snapshotCallback.userCallback &&\n        this.snapshotCallback.context === other.snapshotCallback.context)\n    );\n  }\n}\n\nexport interface QueryContext {\n  readonly _queryIdentifier: string;\n  readonly _queryObject: object;\n  readonly _repo: Repo;\n  readonly _path: Path;\n  readonly _queryParams: QueryParams;\n}\n\n/**\n * An EventRegistration is basically an event type ('value', 'child_added', etc.) and a callback\n * to be notified of that type of event.\n *\n * That said, it can also contain a cancel callback to be notified if the event is canceled.  And\n * currently, this code is organized around the idea that you would register multiple child_ callbacks\n * together, as a single EventRegistration.  Though currently we don't do that.\n */\nexport interface EventRegistration {\n  /**\n   * True if this container has a callback to trigger for this event type\n   */\n  respondsTo(eventType: string): boolean;\n\n  createEvent(change: Change, query: QueryContext): Event;\n\n  /**\n   * Given event data, return a function to trigger the user's callback\n   */\n  getEventRunner(eventData: Event): () => void;\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null;\n\n  matches(other: EventRegistration): boolean;\n\n  /**\n   * False basically means this is a \"dummy\" callback container being used as a sentinel\n   * to remove all callback containers of a particular type.  (e.g. if the user does\n   * ref.off('value') without specifying a specific callback).\n   *\n   * (TODO: Rework this, since it's hacky)\n   *\n   */\n  hasAnyCallback(): boolean;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, getModularInstance, Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoAddEventCallbackForQuery,\n  repoGetValue,\n  repoRemoveEventCallbackForQuery,\n  repoServerTime,\n  repoSetWithPriority,\n  repoUpdate\n} from '../core/Repo';\nimport { ChildrenNode } from '../core/snap/ChildrenNode';\nimport { Index } from '../core/snap/indexes/Index';\nimport { KEY_INDEX } from '../core/snap/indexes/KeyIndex';\nimport { PathIndex } from '../core/snap/indexes/PathIndex';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\nimport { Node } from '../core/snap/Node';\nimport { syncPointSetReferenceConstructor } from '../core/SyncPoint';\nimport { syncTreeSetReferenceConstructor } from '../core/SyncTree';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { nextPushId } from '../core/util/NextPushId';\nimport {\n  Path,\n  pathEquals,\n  pathGetBack,\n  pathGetFront,\n  pathChild,\n  pathParent,\n  pathToUrlEncodedString,\n  pathIsEmpty\n} from '../core/util/Path';\nimport {\n  fatal,\n  MAX_NAME,\n  MIN_NAME,\n  ObjectToUniqueKey\n} from '../core/util/util';\nimport {\n  isValidPriority,\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validateKey,\n  validatePathString,\n  validatePriority,\n  validateRootPathString,\n  validateUrl,\n  validateWritablePath\n} from '../core/util/validation';\nimport { Change } from '../core/view/Change';\nimport { CancelEvent, DataEvent, EventType } from '../core/view/Event';\nimport {\n  CallbackContext,\n  EventRegistration,\n  QueryContext,\n  UserCallback\n} from '../core/view/EventRegistration';\nimport {\n  QueryParams,\n  queryParamsEndAt,\n  queryParamsEndBefore,\n  queryParamsGetQueryObject,\n  queryParamsLimitToFirst,\n  queryParamsLimitToLast,\n  queryParamsOrderBy,\n  queryParamsStartAfter,\n  queryParamsStartAt\n} from '../core/view/QueryParams';\n\nimport { Database } from './Database';\nimport { OnDisconnect } from './OnDisconnect';\nimport {\n  ListenOptions,\n  Query as Query,\n  DatabaseReference,\n  Unsubscribe,\n  ThenableReference\n} from './Reference';\n\n/**\n * @internal\n */\nexport class QueryImpl implements Query, QueryContext {\n  /**\n   * @hideconstructor\n   */\n  constructor(\n    readonly _repo: Repo,\n    readonly _path: Path,\n    readonly _queryParams: QueryParams,\n    readonly _orderByCalled: boolean\n  ) {}\n\n  get key(): string | null {\n    if (pathIsEmpty(this._path)) {\n      return null;\n    } else {\n      return pathGetBack(this._path);\n    }\n  }\n\n  get ref(): DatabaseReference {\n    return new ReferenceImpl(this._repo, this._path);\n  }\n\n  get _queryIdentifier(): string {\n    const obj = queryParamsGetQueryObject(this._queryParams);\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n\n  /**\n   * An object representation of the query parameters used by this Query.\n   */\n  get _queryObject(): object {\n    return queryParamsGetQueryObject(this._queryParams);\n  }\n\n  isEqual(other: QueryImpl | null): boolean {\n    other = getModularInstance(other);\n    if (!(other instanceof QueryImpl)) {\n      return false;\n    }\n\n    const sameRepo = this._repo === other._repo;\n    const samePath = pathEquals(this._path, other._path);\n    const sameQueryIdentifier =\n      this._queryIdentifier === other._queryIdentifier;\n\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  toJSON(): string {\n    return this.toString();\n  }\n\n  toString(): string {\n    return this._repo.toString() + pathToUrlEncodedString(this._path);\n  }\n}\n\n/**\n * Validates that no other order by call has been made\n */\nfunction validateNoPreviousOrderByCall(query: QueryImpl, fnName: string) {\n  if (query._orderByCalled === true) {\n    throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n  }\n}\n\n/**\n * Validates start/end values for queries.\n */\nfunction validateQueryEndpoints(params: QueryParams) {\n  let startNode = null;\n  let endNode = null;\n  if (params.hasStart()) {\n    startNode = params.getIndexStartValue();\n  }\n  if (params.hasEnd()) {\n    endNode = params.getIndexEndValue();\n  }\n\n  if (params.getIndex() === KEY_INDEX) {\n    const tooManyArgsError =\n      'Query: When ordering by key, you may only pass one argument to ' +\n      'startAt(), endAt(), or equalTo().';\n    const wrongArgTypeError =\n      'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\n      'endAt(), endBefore(), or equalTo() must be a string.';\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      if (startName !== MIN_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof startNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      if (endName !== MAX_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof endNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n  } else if (params.getIndex() === PRIORITY_INDEX) {\n    if (\n      (startNode != null && !isValidPriority(startNode)) ||\n      (endNode != null && !isValidPriority(endNode))\n    ) {\n      throw new Error(\n        'Query: When ordering by priority, the first argument passed to startAt(), ' +\n          'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\n          '(null, a number, or a string).'\n      );\n    }\n  } else {\n    assert(\n      params.getIndex() instanceof PathIndex ||\n        params.getIndex() === VALUE_INDEX,\n      'unknown index type.'\n    );\n    if (\n      (startNode != null && typeof startNode === 'object') ||\n      (endNode != null && typeof endNode === 'object')\n    ) {\n      throw new Error(\n        'Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\n          'equalTo() cannot be an object.'\n      );\n    }\n  }\n}\n\n/**\n * Validates that limit* has been called with the correct combination of parameters\n */\nfunction validateLimit(params: QueryParams) {\n  if (\n    params.hasStart() &&\n    params.hasEnd() &&\n    params.hasLimit() &&\n    !params.hasAnchoredLimit()\n  ) {\n    throw new Error(\n      \"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\n        'limitToFirst() or limitToLast() instead.'\n    );\n  }\n}\n/**\n * @internal\n */\nexport class ReferenceImpl extends QueryImpl implements DatabaseReference {\n  /** @hideconstructor */\n  constructor(repo: Repo, path: Path) {\n    super(repo, path, new QueryParams(), false);\n  }\n\n  get parent(): ReferenceImpl | null {\n    const parentPath = pathParent(this._path);\n    return parentPath === null\n      ? null\n      : new ReferenceImpl(this._repo, parentPath);\n  }\n\n  get root(): ReferenceImpl {\n    let ref: ReferenceImpl = this;\n    while (ref.parent !== null) {\n      ref = ref.parent;\n    }\n    return ref;\n  }\n}\n\n/**\n * A `DataSnapshot` contains data from a Database location.\n *\n * Any time you read data from the Database, you receive the data as a\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\n * JavaScript object by calling the `val()` method. Alternatively, you can\n * traverse into the snapshot by calling `child()` to return child snapshots\n * (which you could then call `val()` on).\n *\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\n * a Database location. It cannot be modified and will never change (to modify\n * data, you always call the `set()` method on a `Reference` directly).\n */\nexport class DataSnapshot {\n  /**\n   * @param _node - A SnapshotNode to wrap.\n   * @param ref - The location this snapshot came from.\n   * @param _index - The iteration order for this snapshot\n   * @hideconstructor\n   */\n  constructor(\n    readonly _node: Node,\n    /**\n     * The location of this DataSnapshot.\n     */\n    readonly ref: DatabaseReference,\n    readonly _index: Index\n  ) {}\n\n  /**\n   * Gets the priority value of the data in this `DataSnapshot`.\n   *\n   * Applications need not use priority but can order collections by\n   * ordinary properties (see\n   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\n   * ).\n   */\n  get priority(): string | number | null {\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this._node.getPriority().val() as string | number | null;\n  }\n\n  /**\n   * The key (last part of the path) of the location of this `DataSnapshot`.\n   *\n   * The last token in a Database location is considered its key. For example,\n   * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\n   * `DataSnapshot` will return the key for the location that generated it.\n   * However, accessing the key on the root URL of a Database will return\n   * `null`.\n   */\n  get key(): string | null {\n    return this.ref.key;\n  }\n\n  /** Returns the number of child properties of this `DataSnapshot`. */\n  get size(): number {\n    return this._node.numChildren();\n  }\n\n  /**\n   * Gets another `DataSnapshot` for the location at the specified relative path.\n   *\n   * Passing a relative path to the `child()` method of a DataSnapshot returns\n   * another `DataSnapshot` for the location at the specified relative path. The\n   * relative path can either be a simple child name (for example, \"ada\") or a\n   * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\n   * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\n   * whose value is `null`) is returned.\n   *\n   * @param path - A relative path to the location of child data.\n   */\n  child(path: string): DataSnapshot {\n    const childPath = new Path(path);\n    const childRef = child(this.ref, path);\n    return new DataSnapshot(\n      this._node.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n  }\n  /**\n   * Returns true if this `DataSnapshot` contains any data. It is slightly more\n   * efficient than using `snapshot.val() !== null`.\n   */\n  exists(): boolean {\n    return !this._node.isEmpty();\n  }\n\n  /**\n   * Exports the entire contents of the DataSnapshot as a JavaScript object.\n   *\n   * The `exportVal()` method is similar to `val()`, except priority information\n   * is included (if available), making it suitable for backing up your data.\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  exportVal(): any {\n    return this._node.val(true);\n  }\n\n  /**\n   * Enumerates the top-level children in the `DataSnapshot`.\n   *\n   * Because of the way JavaScript objects work, the ordering of data in the\n   * JavaScript object returned by `val()` is not guaranteed to match the\n   * ordering on the server nor the ordering of `onChildAdded()` events. That is\n   * where `forEach()` comes in handy. It guarantees the children of a\n   * `DataSnapshot` will be iterated in their query order.\n   *\n   * If no explicit `orderBy*()` method is used, results are returned\n   * ordered by key (unless priorities are used, in which case, results are\n   * returned by priority).\n   *\n   * @param action - A function that will be called for each child DataSnapshot.\n   * The callback can return true to cancel further enumeration.\n   * @returns true if enumeration was canceled due to your callback returning\n   * true.\n   */\n  forEach(action: (child: DataSnapshot) => boolean | void): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    }\n\n    const childrenNode = this._node as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this._index, (key, node) => {\n      return action(\n        new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX)\n      );\n    });\n  }\n\n  /**\n   * Returns true if the specified child path has (non-null) data.\n   *\n   * @param path - A relative path to the location of a potential child.\n   * @returns `true` if data exists at the specified child path; else\n   *  `false`.\n   */\n  hasChild(path: string): boolean {\n    const childPath = new Path(path);\n    return !this._node.getChild(childPath).isEmpty();\n  }\n\n  /**\n   * Returns whether or not the `DataSnapshot` has any non-`null` child\n   * properties.\n   *\n   * You can use `hasChildren()` to determine if a `DataSnapshot` has any\n   * children. If it does, you can enumerate them using `forEach()`. If it\n   * doesn't, then either this snapshot contains a primitive value (which can be\n   * retrieved with `val()`) or it is empty (in which case, `val()` will return\n   * `null`).\n   *\n   * @returns true if this snapshot has any children; else false.\n   */\n  hasChildren(): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    } else {\n      return !this._node.isEmpty();\n    }\n  }\n\n  /**\n   * Returns a JSON-serializable representation of this object.\n   */\n  toJSON(): object | null {\n    return this.exportVal();\n  }\n\n  /**\n   * Extracts a JavaScript value from a `DataSnapshot`.\n   *\n   * Depending on the data in a `DataSnapshot`, the `val()` method may return a\n   * scalar type (string, number, or boolean), an array, or an object. It may\n   * also return null, indicating that the `DataSnapshot` is empty (contains no\n   * data).\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  val(): any {\n    return this._node.val();\n  }\n}\n\n/**\n *\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided path. If no path is provided, the `Reference`\n * will point to the root of the Database.\n *\n * @param db - The database instance to obtain a reference for.\n * @param path - Optional path representing the location the returned\n *   `Reference` will point. If not provided, the returned `Reference` will\n *   point to the root of the Database.\n * @returns If a path is provided, a `Reference`\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\n *   root of the Database.\n */\nexport function ref(db: Database, path?: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('ref');\n  return path !== undefined ? child(db._root, path) : db._root;\n}\n\n/**\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided Firebase URL.\n *\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\n * has a different domain than the current `Database` instance.\n *\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\n * and are not applied to the returned `Reference`.\n *\n * @param db - The database instance to obtain a reference for.\n * @param url - The Firebase URL at which the returned `Reference` will\n *   point.\n * @returns A `Reference` pointing to the provided\n *   Firebase URL.\n */\nexport function refFromURL(db: Database, url: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('refFromURL');\n  const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n  validateUrl('refFromURL', parsedURL);\n\n  const repoInfo = parsedURL.repoInfo;\n  if (\n    !db._repo.repoInfo_.isCustomHost() &&\n    repoInfo.host !== db._repo.repoInfo_.host\n  ) {\n    fatal(\n      'refFromURL' +\n        ': Host name does not match the current database: ' +\n        '(found ' +\n        repoInfo.host +\n        ' but expected ' +\n        db._repo.repoInfo_.host +\n        ')'\n    );\n  }\n\n  return ref(db, parsedURL.path.toString());\n}\n/**\n * Gets a `Reference` for the location at the specified relative path.\n *\n * The relative path can either be a simple child name (for example, \"ada\") or\n * a deeper slash-separated path (for example, \"ada/name/first\").\n *\n * @param parent - The parent location.\n * @param path - A relative path from this location to the desired child\n *   location.\n * @returns The specified child location.\n */\nexport function child(\n  parent: DatabaseReference,\n  path: string\n): DatabaseReference {\n  parent = getModularInstance(parent);\n  if (pathGetFront(parent._path) === null) {\n    validateRootPathString('child', 'path', path, false);\n  } else {\n    validatePathString('child', 'path', path, false);\n  }\n  return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n\n/**\n * Returns an `OnDisconnect` object - see\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information on how to use it.\n *\n * @param ref - The reference to add OnDisconnect triggers for.\n */\nexport function onDisconnect(ref: DatabaseReference): OnDisconnect {\n  ref = getModularInstance(ref) as ReferenceImpl;\n  return new OnDisconnect(ref._repo, ref._path);\n}\n\nexport interface ThenableReferenceImpl\n  extends ReferenceImpl,\n    Pick<Promise<ReferenceImpl>, 'then' | 'catch'> {}\n\n/**\n * Generates a new child location using a unique key and returns its\n * `Reference`.\n *\n * This is the most common pattern for adding data to a collection of items.\n *\n * If you provide a value to `push()`, the value is written to the\n * generated location. If you don't pass a value, nothing is written to the\n * database and the child remains empty (but you can use the `Reference`\n * elsewhere).\n *\n * The unique keys generated by `push()` are ordered by the current time, so the\n * resulting list of items is chronologically sorted. The keys are also\n * designed to be unguessable (they contain 72 random bits of entropy).\n *\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}.\n * See {@link https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}.\n *\n * @param parent - The parent location.\n * @param value - Optional value to be written at the generated location.\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\n * but can be used immediately as the `Reference` to the child location.\n */\nexport function push(\n  parent: DatabaseReference,\n  value?: unknown\n): ThenableReference {\n  parent = getModularInstance(parent);\n  validateWritablePath('push', parent._path);\n  validateFirebaseDataArg('push', value, parent._path, true);\n  const now = repoServerTime(parent._repo);\n  const name = nextPushId(now);\n\n  // push() returns a ThennableReference whose promise is fulfilled with a\n  // regular Reference. We use child() to create handles to two different\n  // references. The first is turned into a ThennableReference below by adding\n  // then() and catch() methods and is used as the return value of push(). The\n  // second remains a regular Reference and is used as the fulfilled value of\n  // the first ThennableReference.\n  const thennablePushRef: Partial<ThenableReferenceImpl> = child(\n    parent,\n    name\n  ) as ReferenceImpl;\n  const pushRef = child(parent, name) as ReferenceImpl;\n\n  let promise: Promise<ReferenceImpl>;\n  if (value != null) {\n    promise = set(pushRef, value).then(() => pushRef);\n  } else {\n    promise = Promise.resolve(pushRef);\n  }\n\n  thennablePushRef.then = promise.then.bind(promise);\n  thennablePushRef.catch = promise.then.bind(promise, undefined);\n  return thennablePushRef as ThenableReferenceImpl;\n}\n\n/**\n * Removes the data at this Database location.\n *\n * Any data at child locations will also be deleted.\n *\n * The effect of the remove will be visible immediately and the corresponding\n * event 'value' will be triggered. Synchronization of the remove to the\n * Firebase servers will also be started, and the returned Promise will resolve\n * when complete. If provided, the onComplete callback will be called\n * asynchronously after synchronization has finished.\n *\n * @param ref - The location to remove.\n * @returns Resolves when remove on server is complete.\n */\nexport function remove(ref: DatabaseReference): Promise<void> {\n  validateWritablePath('remove', ref._path);\n  return set(ref, null);\n}\n\n/**\n * Writes data to this Database location.\n *\n * This will overwrite any data at this location and all child locations.\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\n * all data at this location and all child locations will be deleted.\n *\n * `set()` will remove any priority stored at this location, so if priority is\n * meant to be preserved, you need to use `setWithPriority()` instead.\n *\n * Note that modifying data with `set()` will cancel any pending transactions\n * at that location, so extreme care should be taken if mixing `set()` and\n * `transaction()` to modify the same data.\n *\n * A single `set()` will generate a single \"value\" event at the location where\n * the `set()` was performed.\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function set(ref: DatabaseReference, value: unknown): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('set', ref._path);\n  validateFirebaseDataArg('set', value, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    /*priority=*/ null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Sets a priority for the data at this Database location.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setPriority(\n  ref: DatabaseReference,\n  priority: string | number | null\n): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('setPriority', ref._path);\n  validatePriority('setPriority', priority, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    pathChild(ref._path, '.priority'),\n    priority,\n    null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes data the Database location. Like `set()` but also specifies the\n * priority for that data.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setWithPriority(\n  ref: DatabaseReference,\n  value: unknown,\n  priority: string | number | null\n): Promise<void> {\n  validateWritablePath('setWithPriority', ref._path);\n  validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n  validatePriority('setWithPriority', priority, false);\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n  }\n\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    priority,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes multiple values to the Database at once.\n *\n * The `values` argument contains multiple property-value pairs that will be\n * written to the Database together. Each child property can either be a simple\n * property (for example, \"name\") or a relative path (for example,\n * \"name/first\") from the current location to the data to update.\n *\n * As opposed to the `set()` method, `update()` can be use to selectively update\n * only the referenced properties at the current location (instead of replacing\n * all the child properties at the current location).\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * A single `update()` will generate a single \"value\" event at the location\n * where the `update()` was performed, regardless of how many children were\n * modified.\n *\n * Note that modifying data with `update()` will cancel any pending\n * transactions at that location, so extreme care should be taken if mixing\n * `update()` and `transaction()` to modify the same data.\n *\n * Passing `null` to `update()` will remove the data at this location.\n *\n * See\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\n *\n * @param ref - The location to write to.\n * @param values - Object containing multiple values.\n * @returns Resolves when update on server is complete.\n */\nexport function update(ref: DatabaseReference, values: object): Promise<void> {\n  validateFirebaseMergeDataArg('update', values, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoUpdate(\n    ref._repo,\n    ref._path,\n    values as Record<string, unknown>,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Gets the most up-to-date result for this query.\n *\n * @param query - The query to run.\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\n * available, or rejects if the client is unable to return a value (e.g., if the\n * server is unreachable and there is nothing cached).\n */\nexport function get(query: Query): Promise<DataSnapshot> {\n  query = getModularInstance(query) as QueryImpl;\n  const callbackContext = new CallbackContext(() => {});\n  const container = new ValueEventRegistration(callbackContext);\n  return repoGetValue(query._repo, query, container).then(node => {\n    return new DataSnapshot(\n      node,\n      new ReferenceImpl(query._repo, query._path),\n      query._queryParams.getIndex()\n    );\n  });\n}\n/**\n * Represents registration for 'value' events.\n */\nexport class ValueEventRegistration implements EventRegistration {\n  constructor(private callbackContext: CallbackContext) {}\n\n  respondsTo(eventType: string): boolean {\n    return eventType === 'value';\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      'value',\n      this,\n      new DataSnapshot(\n        change.snapshotNode,\n        new ReferenceImpl(query._repo, query._path),\n        index\n      )\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue((eventData as DataEvent).snapshot, null);\n    }\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callbackContext || !this.callbackContext) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callbackContext.matches(this.callbackContext);\n    }\n  }\n\n  hasAnyCallback(): boolean {\n    return this.callbackContext !== null;\n  }\n}\n\n/**\n * Represents the registration of a child_x event.\n */\nexport class ChildEventRegistration implements EventRegistration {\n  constructor(\n    private eventType: string,\n    private callbackContext: CallbackContext | null\n  ) {}\n\n  respondsTo(eventType: string): boolean {\n    let eventToCheck =\n      eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck =\n      eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return this.eventType === eventToCheck;\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const childRef = child(\n      new ReferenceImpl(query._repo, query._path),\n      change.childName\n    );\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      change.type as EventType,\n      this,\n      new DataSnapshot(change.snapshotNode, childRef, index),\n      change.prevName\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue(\n          (eventData as DataEvent).snapshot,\n          (eventData as DataEvent).prevName\n        );\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (other instanceof ChildEventRegistration) {\n      return (\n        this.eventType === other.eventType &&\n        (!this.callbackContext ||\n          !other.callbackContext ||\n          this.callbackContext.matches(other.callbackContext))\n      );\n    }\n\n    return false;\n  }\n\n  hasAnyCallback(): boolean {\n    return !!this.callbackContext;\n  }\n}\n\nfunction addEventListener(\n  query: Query,\n  eventType: EventType,\n  callback: UserCallback,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n) {\n  let cancelCallback: ((error: Error) => unknown) | undefined;\n  if (typeof cancelCallbackOrListenOptions === 'object') {\n    cancelCallback = undefined;\n    options = cancelCallbackOrListenOptions;\n  }\n  if (typeof cancelCallbackOrListenOptions === 'function') {\n    cancelCallback = cancelCallbackOrListenOptions;\n  }\n\n  if (options && options.onlyOnce) {\n    const userCallback = callback;\n    const onceCallback: UserCallback = (dataSnapshot, previousChildName) => {\n      repoRemoveEventCallbackForQuery(query._repo, query, container);\n      userCallback(dataSnapshot, previousChildName);\n    };\n    onceCallback.userCallback = callback.userCallback;\n    onceCallback.context = callback.context;\n    callback = onceCallback;\n  }\n\n  const callbackContext = new CallbackContext(\n    callback,\n    cancelCallback || undefined\n  );\n  const container =\n    eventType === 'value'\n      ? new ValueEventRegistration(callbackContext)\n      : new ChildEventRegistration(eventType, callbackContext);\n  repoAddEventCallbackForQuery(query._repo, query, container);\n  return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'value',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_added',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_changed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_moved',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_removed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\nexport { EventType };\n\n/**\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.\n * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from\n * the respective `on*` callbacks.\n *\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener\n * will not automatically remove listeners registered on child nodes, `off()`\n * must also be called on any child listeners to remove the callback.\n *\n * If a callback is not specified, all callbacks for the specified eventType\n * will be removed. Similarly, if no eventType is specified, all callbacks\n * for the `Reference` will be removed.\n *\n * Individual listeners can also be removed by invoking their unsubscribe\n * callbacks.\n *\n * @param query - The query that the listener was registered with.\n * @param eventType - One of the following strings: \"value\", \"child_added\",\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\n * for the `Reference` will be removed.\n * @param callback - The callback function that was passed to `on()` or\n * `undefined` to remove all callbacks.\n */\nexport function off(\n  query: Query,\n  eventType?: EventType,\n  callback?: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown\n): void {\n  let container: EventRegistration | null = null;\n  const expCallback = callback ? new CallbackContext(callback) : null;\n  if (eventType === 'value') {\n    container = new ValueEventRegistration(expCallback);\n  } else if (eventType) {\n    container = new ChildEventRegistration(eventType, expCallback);\n  }\n  repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/** Describes the different query constraints available in this SDK. */\nexport type QueryConstraintType =\n  | 'endAt'\n  | 'endBefore'\n  | 'startAt'\n  | 'startAfter'\n  | 'limitToFirst'\n  | 'limitToLast'\n  | 'orderByChild'\n  | 'orderByKey'\n  | 'orderByPriority'\n  | 'orderByValue'\n  | 'equalTo';\n\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\n * {@link orderByValue}  or {@link equalTo} and\n * can then be passed to {@link query} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nexport abstract class QueryConstraint {\n  /** The type of this query constraints */\n  abstract readonly type: QueryConstraintType;\n\n  /**\n   * Takes the provided `Query` and returns a copy of the `Query` with this\n   * `QueryConstraint` applied.\n   */\n  abstract _apply<T>(query: QueryImpl): QueryImpl;\n}\n\nclass QueryEndAtConstraint extends QueryConstraint {\n  readonly type: 'endAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endAt', this._value, query._path, true);\n    const newParams = queryParamsEndAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endAt: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name less than or equal\n * to the specified key.\n *\n * You can read more about `endAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to end at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end at, among the children with the previously\n * specified priority. This argument is only allowed if ordering by child,\n * value, or priority.\n */\nexport function endAt(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endAt', 'key', key, true);\n  return new QueryEndAtConstraint(value, key);\n}\n\nclass QueryEndBeforeConstraint extends QueryConstraint {\n  readonly type: 'endBefore';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endBefore', this._value, query._path, false);\n    const newParams = queryParamsEndBefore(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endBefore: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is exclusive. If only a value is provided, children\n * with a value less than the specified value will be included in the query.\n * If a key is specified, then children must have a value less than or equal\n * to the specified value and a key name less than the specified key.\n *\n * @param value - The value to end before. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end before, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function endBefore(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endBefore', 'key', key, true);\n  return new QueryEndBeforeConstraint(value, key);\n}\n\nclass QueryStartAtConstraint extends QueryConstraint {\n  readonly type: 'startAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAt', this._value, query._path, true);\n    const newParams = queryParamsStartAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAt: Starting point was already set (by another call to startAt, ' +\n          'startBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name greater than or\n * equal to the specified key.\n *\n * You can read more about `startAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to start at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAt(\n  value: number | string | boolean | null = null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAt', 'key', key, true);\n  return new QueryStartAtConstraint(value, key);\n}\n\nclass QueryStartAfterConstraint extends QueryConstraint {\n  readonly type: 'startAfter';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAfter', this._value, query._path, false);\n    const newParams = queryParamsStartAfter(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAfter: Starting point was already set (by another call to startAt, ' +\n          'startAfter, or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is exclusive. If only a value is provided, children\n * with a value greater than the specified value will be included in the query.\n * If a key is specified, then children must have a value greater than or equal\n * to the specified value and a a key name greater than the specified key.\n *\n * @param value - The value to start after. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start after. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAfter(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAfter', 'key', key, true);\n  return new QueryStartAfterConstraint(value, key);\n}\n\nclass QueryLimitToFirstConstraint extends QueryConstraint {\n  readonly type: 'limitToFirst';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToFirst: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToFirst(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that if limited to the first specific number\n * of children.\n *\n * The `limitToFirst()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the first 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToFirst()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToFirst(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToFirst: First argument must be a positive integer.');\n  }\n  return new QueryLimitToFirstConstraint(limit);\n}\n\nclass QueryLimitToLastConstraint extends QueryConstraint {\n  readonly type: 'limitToLast';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToLast: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToLast(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that is limited to return only the last\n * specified number of children.\n *\n * The `limitToLast()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the last 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToLast()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToLast(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToLast: First argument must be a positive integer.');\n  }\n\n  return new QueryLimitToLastConstraint(limit);\n}\n\nclass QueryOrderByChildConstraint extends QueryConstraint {\n  readonly type: 'orderByChild';\n\n  constructor(private readonly _path: string) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByChild');\n    const parsedPath = new Path(this._path);\n    if (pathIsEmpty(parsedPath)) {\n      throw new Error(\n        'orderByChild: cannot pass in empty path. Use orderByValue() instead.'\n      );\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = queryParamsOrderBy(query._queryParams, index);\n    validateQueryEndpoints(newParams);\n\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the specified child key.\n *\n * Queries can only order by one key at a time. Calling `orderByChild()`\n * multiple times on the same query is an error.\n *\n * Firebase queries allow you to order your data by any child key on the fly.\n * However, if you know in advance what your indexes will be, you can define\n * them via the .indexOn rule in your Security Rules for better performance. See\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\n * rule for more information.\n *\n * You can read more about `orderByChild()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n *\n * @param path - The path to order by.\n */\nexport function orderByChild(path: string): QueryConstraint {\n  if (path === '$key') {\n    throw new Error(\n      'orderByChild: \"$key\" is invalid.  Use orderByKey() instead.'\n    );\n  } else if (path === '$priority') {\n    throw new Error(\n      'orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.'\n    );\n  } else if (path === '$value') {\n    throw new Error(\n      'orderByChild: \"$value\" is invalid.  Use orderByValue() instead.'\n    );\n  }\n  validatePathString('orderByChild', 'path', path, false);\n  return new QueryOrderByChildConstraint(path);\n}\n\nclass QueryOrderByKeyConstraint extends QueryConstraint {\n  readonly type: 'orderByKey';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByKey');\n    const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the key.\n *\n * Sorts the results of a query by their (ascending) key values.\n *\n * You can read more about `orderByKey()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByKey(): QueryConstraint {\n  return new QueryOrderByKeyConstraint();\n}\n\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\n  readonly type: 'orderByPriority';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByPriority');\n    const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by priority.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\n * for alternatives to priority.\n */\nexport function orderByPriority(): QueryConstraint {\n  return new QueryOrderByPriorityConstraint();\n}\n\nclass QueryOrderByValueConstraint extends QueryConstraint {\n  readonly type: 'orderByValue';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByValue');\n    const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by value.\n *\n * If the children of a query are all scalar values (string, number, or\n * boolean), you can order the results by their (ascending) values.\n *\n * You can read more about `orderByValue()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByValue(): QueryConstraint {\n  return new QueryOrderByValueConstraint();\n}\n\nclass QueryEqualToValueConstraint extends QueryConstraint {\n  readonly type: 'equalTo';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('equalTo', this._value, query._path, false);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\n          'equalTo).'\n      );\n    }\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\n          'equalTo).'\n      );\n    }\n    return new QueryEndAtConstraint(this._value, this._key)._apply(\n      new QueryStartAtConstraint(this._value, this._key)._apply(query)\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` that includes children that match the specified\n * value.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The optional key argument can be used to further limit the range of the\n * query. If it is specified, then children that have exactly the specified\n * value must also have exactly the specified key as their key name. This can be\n * used to filter result sets with many matches for the same value.\n *\n * You can read more about `equalTo()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to match for. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function equalTo(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('equalTo', 'key', key, true);\n  return new QueryEqualToValueConstraint(value, key);\n}\n\n/**\n * Creates a new immutable instance of `Query` that is extended to also include\n * additional query constraints.\n *\n * @param query - The Query instance to use as a base for the new constraints.\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\n * @throws if any of the provided query constraints cannot be combined with the\n * existing or new constraints.\n */\nexport function query(\n  query: Query,\n  ...queryConstraints: QueryConstraint[]\n): Query {\n  let queryImpl = getModularInstance(query) as QueryImpl;\n  for (const constraint of queryConstraints) {\n    queryImpl = constraint._apply(queryImpl);\n  }\n  return queryImpl;\n}\n\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _FirebaseService,\n  _getProvider,\n  FirebaseApp,\n  getApp\n} from '@firebase/app';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport {\n  getModularInstance,\n  createMockUserToken,\n  EmulatorMockTokenOptions,\n  getDefaultEmulatorHostnameAndPort\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from '../core/AppCheckTokenProvider';\nimport {\n  AuthTokenProvider,\n  EmulatorTokenProvider,\n  FirebaseAuthTokenProvider\n} from '../core/AuthTokenProvider';\nimport { Repo, repoInterrupt, repoResume, repoStart } from '../core/Repo';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { newEmptyPath, pathIsEmpty } from '../core/util/Path';\nimport {\n  warn,\n  fatal,\n  log,\n  enableLogging as enableLoggingImpl\n} from '../core/util/util';\nimport { validateUrl } from '../core/util/validation';\nimport { BrowserPollConnection } from '../realtime/BrowserPollConnection';\nimport { TransportManager } from '../realtime/TransportManager';\nimport { WebSocketConnection } from '../realtime/WebSocketConnection';\n\nimport { ReferenceImpl } from './Reference_impl';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n/**\n * This variable is also defined in the firebase Node.js Admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n\n/**\n * Creates and caches `Repo` instances.\n */\nconst repos: {\n  [appName: string]: {\n    [dbUrl: string]: Repo;\n  };\n} = {};\n\n/**\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\n */\nlet useRestClient = false;\n\n/**\n * Update an existing `Repo` in place to point to a new host/port.\n */\nfunction repoManagerApplyEmulatorSettings(\n  repo: Repo,\n  host: string,\n  port: number,\n  tokenProvider?: AuthTokenProvider\n): void {\n  repo.repoInfo_ = new RepoInfo(\n    `${host}:${port}`,\n    /* secure= */ false,\n    repo.repoInfo_.namespace,\n    repo.repoInfo_.webSocketOnly,\n    repo.repoInfo_.nodeAdmin,\n    repo.repoInfo_.persistenceKey,\n    repo.repoInfo_.includeNamespaceInQueryParams\n  );\n\n  if (tokenProvider) {\n    repo.authTokenProvider_ = tokenProvider;\n  }\n}\n\n/**\n * This function should only ever be called to CREATE a new database instance.\n * @internal\n */\nexport function repoManagerDatabaseFromApp(\n  app: FirebaseApp,\n  authProvider: Provider<FirebaseAuthInternalName>,\n  appCheckProvider?: Provider<AppCheckInternalComponentName>,\n  url?: string,\n  nodeAdmin?: boolean\n): Database {\n  let dbUrl: string | undefined = url || app.options.databaseURL;\n  if (dbUrl === undefined) {\n    if (!app.options.projectId) {\n      fatal(\n        \"Can't determine Firebase Database URL. Be sure to include \" +\n          ' a Project ID when calling firebase.initializeApp().'\n      );\n    }\n\n    log('Using default host for project ', app.options.projectId);\n    dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n  }\n\n  let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n  let repoInfo = parsedUrl.repoInfo;\n\n  let isEmulator: boolean;\n\n  let dbEmulatorHost: string | undefined = undefined;\n  if (typeof process !== 'undefined' && process.env) {\n    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n  }\n\n  if (dbEmulatorHost) {\n    isEmulator = true;\n    dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    repoInfo = parsedUrl.repoInfo;\n  } else {\n    isEmulator = !parsedUrl.repoInfo.secure;\n  }\n\n  const authTokenProvider =\n    nodeAdmin && isEmulator\n      ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\n      : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n\n  validateUrl('Invalid Firebase Database URL', parsedUrl);\n  if (!pathIsEmpty(parsedUrl.path)) {\n    fatal(\n      'Database URL must point to the root of a Firebase Database ' +\n        '(not including a child path).'\n    );\n  }\n\n  const repo = repoManagerCreateRepo(\n    repoInfo,\n    app,\n    authTokenProvider,\n    new AppCheckTokenProvider(app.name, appCheckProvider)\n  );\n  return new Database(repo, app);\n}\n\n/**\n * Remove the repo and make sure it is disconnected.\n *\n */\nfunction repoManagerDeleteRepo(repo: Repo, appName: string): void {\n  const appRepos = repos[appName];\n  // This should never happen...\n  if (!appRepos || appRepos[repo.key] !== repo) {\n    fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\n  }\n  repoInterrupt(repo);\n  delete appRepos[repo.key];\n}\n\n/**\n * Ensures a repo doesn't already exist and then creates one using the\n * provided app.\n *\n * @param repoInfo - The metadata about the Repo\n * @returns The Repo object for the specified server / repoName.\n */\nfunction repoManagerCreateRepo(\n  repoInfo: RepoInfo,\n  app: FirebaseApp,\n  authTokenProvider: AuthTokenProvider,\n  appCheckProvider: AppCheckTokenProvider\n): Repo {\n  let appRepos = repos[app.name];\n\n  if (!appRepos) {\n    appRepos = {};\n    repos[app.name] = appRepos;\n  }\n\n  let repo = appRepos[repoInfo.toURLString()];\n  if (repo) {\n    fatal(\n      'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n    );\n  }\n  repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n  appRepos[repoInfo.toURLString()] = repo;\n\n  return repo;\n}\n\n/**\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n */\nexport function repoManagerForceRestClient(forceRestClient: boolean): void {\n  useRestClient = forceRestClient;\n}\n\n/**\n * Class representing a Firebase Realtime Database.\n */\nexport class Database implements _FirebaseService {\n  /** Represents a `Database` instance. */\n  readonly 'type' = 'database';\n\n  /** Track if the instance has been used (root or repo accessed) */\n  _instanceStarted: boolean = false;\n\n  /** Backing state for root_ */\n  private _rootInternal?: ReferenceImpl;\n\n  /** @hideconstructor */\n  constructor(\n    public _repoInternal: Repo,\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\n    readonly app: FirebaseApp\n  ) {}\n\n  get _repo(): Repo {\n    if (!this._instanceStarted) {\n      repoStart(\n        this._repoInternal,\n        this.app.options.appId,\n        this.app.options['databaseAuthVariableOverride']\n      );\n      this._instanceStarted = true;\n    }\n    return this._repoInternal;\n  }\n\n  get _root(): ReferenceImpl {\n    if (!this._rootInternal) {\n      this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n    }\n    return this._rootInternal;\n  }\n\n  _delete(): Promise<void> {\n    if (this._rootInternal !== null) {\n      repoManagerDeleteRepo(this._repo, this.app.name);\n      this._repoInternal = null;\n      this._rootInternal = null;\n    }\n    return Promise.resolve();\n  }\n\n  _checkNotDeleted(apiName: string) {\n    if (this._rootInternal === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n}\n\nfunction checkTransportInit() {\n  if (TransportManager.IS_TRANSPORT_INITIALIZED) {\n    warn(\n      'Transport has already been initialized. Please call this function before calling ref or setting up a listener'\n    );\n  }\n}\n\n/**\n * Force the use of websockets instead of longPolling.\n */\nexport function forceWebSockets() {\n  checkTransportInit();\n  BrowserPollConnection.forceDisallow();\n}\n\n/**\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\n */\nexport function forceLongPolling() {\n  checkTransportInit();\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n}\n\n/**\n * Returns the instance of the Realtime Database SDK that is associated\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\n * with default settings if no instance exists or if the existing instance uses\n * a custom database URL.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\n * Database instance is associated with.\n * @param url - The URL of the Realtime Database instance to connect to. If not\n * provided, the SDK connects to the default instance of the Firebase App.\n * @returns The `Database` instance of the provided app.\n */\nexport function getDatabase(\n  app: FirebaseApp = getApp(),\n  url?: string\n): Database {\n  const db = _getProvider(app, 'database').getImmediate({\n    identifier: url\n  }) as Database;\n  const emulator = getDefaultEmulatorHostnameAndPort('database');\n  if (emulator) {\n    connectDatabaseEmulator(db, ...emulator);\n  }\n  return db;\n}\n\n/**\n * Modify the provided instance to communicate with the Realtime Database\n * emulator.\n *\n * <p>Note: This method must be called before performing any other operation.\n *\n * @param db - The instance to modify.\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 8080)\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\n */\nexport function connectDatabaseEmulator(\n  db: Database,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('useEmulator');\n  if (db._instanceStarted) {\n    fatal(\n      'Cannot call useEmulator() after instance has already been initialized.'\n    );\n  }\n\n  const repo = db._repoInternal;\n  let tokenProvider: EmulatorTokenProvider | undefined = undefined;\n  if (repo.repoInfo_.nodeAdmin) {\n    if (options.mockUserToken) {\n      fatal(\n        'mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".'\n      );\n    }\n    tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n  } else if (options.mockUserToken) {\n    const token =\n      typeof options.mockUserToken === 'string'\n        ? options.mockUserToken\n        : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n    tokenProvider = new EmulatorTokenProvider(token);\n  }\n\n  // Modify the repo to apply emulator settings\n  repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\n}\n\n/**\n * Disconnects from the server (all Database operations will be completed\n * offline).\n *\n * The client automatically maintains a persistent connection to the Database\n * server, which will remain active indefinitely and reconnect when\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\n * to control the client connection in cases where a persistent connection is\n * undesirable.\n *\n * While offline, the client will no longer receive data updates from the\n * Database. However, all Database operations performed locally will continue to\n * immediately fire events, allowing your application to continue behaving\n * normally. Additionally, each operation performed locally will automatically\n * be queued and retried upon reconnection to the Database server.\n *\n * To reconnect to the Database and begin receiving remote events, see\n * `goOnline()`.\n *\n * @param db - The instance to disconnect.\n */\nexport function goOffline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOffline');\n  repoInterrupt(db._repo);\n}\n\n/**\n * Reconnects to the server and synchronizes the offline Database state\n * with the server state.\n *\n * This method should be used after disabling the active connection with\n * `goOffline()`. Once reconnected, the client will transmit the proper data\n * and fire the appropriate events so that your client \"catches up\"\n * automatically.\n *\n * @param db - The instance to reconnect.\n */\nexport function goOnline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOnline');\n  repoResume(db._repo);\n}\n\n/**\n * Logs debugging information to the console.\n *\n * @param enabled - Enables logging if `true`, disables logging if `false`.\n * @param persistent - Remembers the logging state between page refreshes if\n * `true`.\n */\nexport function enableLogging(enabled: boolean, persistent?: boolean);\n\n/**\n * Logs debugging information to the console.\n *\n * @param logger - A custom logger function to control how things get logged.\n */\nexport function enableLogging(logger: (message: string) => unknown);\n\nexport function enableLogging(\n  logger: boolean | ((message: string) => unknown),\n  persistent?: boolean\n): void {\n  enableLoggingImpl(logger, persistent);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PersistentConnection } from '../core/PersistentConnection';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { Connection } from '../realtime/Connection';\n\nimport { repoManagerForceRestClient } from './Database';\n\nexport const DataConnection = PersistentConnection;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).simpleListen = function (\n  pathString: string,\n  onComplete: (a: unknown) => void\n) {\n  this.sendRequest('q', { p: pathString }, onComplete);\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).echo = function (\n  data: unknown,\n  onEcho: (a: unknown) => void\n) {\n  this.sendRequest('echo', { d: data }, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\n/**\n * @internal\n */\nexport const hijackHash = function (newHash: () => string) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (\n    pathString,\n    data,\n    onComplete,\n    hash\n  ) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\nexport const ConnectionTarget = RepoInfo;\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n * @internal\n */\nexport const forceRestClient = function (forceRestClient: boolean) {\n  repoManagerForceRestClient(forceRestClient);\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\nimport { Component, ComponentType } from '@firebase/component';\n\nimport { name, version } from '../package.json';\nimport { setSDKVersion } from '../src/core/version';\n\nimport { repoManagerDatabaseFromApp } from './api/Database';\n\nexport function registerDatabase(variant?: string): void {\n  setSDKVersion(SDK_VERSION);\n  _registerComponent(\n    new Component(\n      'database',\n      (container, { instanceIdentifier: url }) => {\n        const app = container.getProvider('app').getImmediate()!;\n        const authProvider = container.getProvider('auth-internal');\n        const appCheckProvider = container.getProvider('app-check-internal');\n        return repoManagerDatabaseFromApp(\n          app,\n          authProvider,\n          appCheckProvider,\n          url\n        );\n      },\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}","export function warn() {\n  if (console && console.warn) {\n    var _console;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (typeof args[0] === 'string') args[0] = \"react-i18next:: \".concat(args[0]);\n\n    (_console = console).warn.apply(_console, args);\n  }\n}\nvar alreadyWarned = {};\nexport function warnOnce() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  if (typeof args[0] === 'string' && alreadyWarned[args[0]]) return;\n  if (typeof args[0] === 'string') alreadyWarned[args[0]] = new Date();\n  warn.apply(void 0, args);\n}\nexport function loadNamespaces(i18n, ns, cb) {\n  i18n.loadNamespaces(ns, function () {\n    if (i18n.isInitialized) {\n      cb();\n    } else {\n      var initialized = function initialized() {\n        setTimeout(function () {\n          i18n.off('initialized', initialized);\n        }, 0);\n        cb();\n      };\n\n      i18n.on('initialized', initialized);\n    }\n  });\n}\n\nfunction oldI18nextHasLoadedNamespace(ns, i18n) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var lng = i18n.languages[0];\n  var fallbackLng = i18n.options ? i18n.options.fallbackLng : false;\n  var lastLng = i18n.languages[i18n.languages.length - 1];\n  if (lng.toLowerCase() === 'cimode') return true;\n\n  var loadNotPending = function loadNotPending(l, n) {\n    var loadState = i18n.services.backendConnector.state[\"\".concat(l, \"|\").concat(n)];\n    return loadState === -1 || loadState === 2;\n  };\n\n  if (options.bindI18n && options.bindI18n.indexOf('languageChanging') > -1 && i18n.services.backendConnector.backend && i18n.isLanguageChangingTo && !loadNotPending(i18n.isLanguageChangingTo, ns)) return false;\n  if (i18n.hasResourceBundle(lng, ns)) return true;\n  if (!i18n.services.backendConnector.backend || i18n.options.resources && !i18n.options.partialBundledLanguages) return true;\n  if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns))) return true;\n  return false;\n}\n\nexport function hasLoadedNamespace(ns, i18n) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (!i18n.languages || !i18n.languages.length) {\n    warnOnce('i18n.languages were undefined or empty', i18n.languages);\n    return true;\n  }\n\n  var isNewerI18next = i18n.options.ignoreJSONStructure !== undefined;\n\n  if (!isNewerI18next) {\n    return oldI18nextHasLoadedNamespace(ns, i18n, options);\n  }\n\n  return i18n.hasLoadedNamespace(ns, {\n    precheck: function precheck(i18nInstance, loadNotPending) {\n      if (options.bindI18n && options.bindI18n.indexOf('languageChanging') > -1 && i18nInstance.services.backendConnector.backend && i18nInstance.isLanguageChangingTo && !loadNotPending(i18nInstance.isLanguageChangingTo, ns)) return false;\n    }\n  });\n}\nexport function getDisplayName(Component) {\n  return Component.displayName || Component.name || (typeof Component === 'string' && Component.length > 0 ? Component : 'Unknown');\n}","import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, useEffect, useContext, useRef } from 'react';\nimport { getI18n, getDefaults, ReportNamespaces, I18nContext } from './context';\nimport { warnOnce, loadNamespaces, hasLoadedNamespace } from './utils';\n\nvar usePrevious = function usePrevious(value, ignore) {\n  var ref = useRef();\n  useEffect(function () {\n    ref.current = ignore ? ref.current : value;\n  }, [value, ignore]);\n  return ref.current;\n};\n\nexport function useTranslation(ns) {\n  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var i18nFromProps = props.i18n;\n\n  var _ref = useContext(I18nContext) || {},\n      i18nFromContext = _ref.i18n,\n      defaultNSFromContext = _ref.defaultNS;\n\n  var i18n = i18nFromProps || i18nFromContext || getI18n();\n  if (i18n && !i18n.reportNamespaces) i18n.reportNamespaces = new ReportNamespaces();\n\n  if (!i18n) {\n    warnOnce('You will need to pass in an i18next instance by using initReactI18next');\n\n    var notReadyT = function notReadyT(k) {\n      return Array.isArray(k) ? k[k.length - 1] : k;\n    };\n\n    var retNotReady = [notReadyT, {}, false];\n    retNotReady.t = notReadyT;\n    retNotReady.i18n = {};\n    retNotReady.ready = false;\n    return retNotReady;\n  }\n\n  if (i18n.options.react && i18n.options.react.wait !== undefined) warnOnce('It seems you are still using the old wait option, you may migrate to the new useSuspense behaviour.');\n\n  var i18nOptions = _objectSpread(_objectSpread(_objectSpread({}, getDefaults()), i18n.options.react), props);\n\n  var useSuspense = i18nOptions.useSuspense,\n      keyPrefix = i18nOptions.keyPrefix;\n  var namespaces = ns || defaultNSFromContext || i18n.options && i18n.options.defaultNS;\n  namespaces = typeof namespaces === 'string' ? [namespaces] : namespaces || ['translation'];\n  if (i18n.reportNamespaces.addUsedNamespaces) i18n.reportNamespaces.addUsedNamespaces(namespaces);\n  var ready = (i18n.isInitialized || i18n.initializedStoreOnce) && namespaces.every(function (n) {\n    return hasLoadedNamespace(n, i18n, i18nOptions);\n  });\n\n  function getT() {\n    return i18n.getFixedT(null, i18nOptions.nsMode === 'fallback' ? namespaces : namespaces[0], keyPrefix);\n  }\n\n  var _useState = useState(getT),\n      _useState2 = _slicedToArray(_useState, 2),\n      t = _useState2[0],\n      setT = _useState2[1];\n\n  var joinedNS = namespaces.join();\n  var previousJoinedNS = usePrevious(joinedNS);\n  var isMounted = useRef(true);\n  useEffect(function () {\n    var bindI18n = i18nOptions.bindI18n,\n        bindI18nStore = i18nOptions.bindI18nStore;\n    isMounted.current = true;\n\n    if (!ready && !useSuspense) {\n      loadNamespaces(i18n, namespaces, function () {\n        if (isMounted.current) setT(getT);\n      });\n    }\n\n    if (ready && previousJoinedNS && previousJoinedNS !== joinedNS && isMounted.current) {\n      setT(getT);\n    }\n\n    function boundReset() {\n      if (isMounted.current) setT(getT);\n    }\n\n    if (bindI18n && i18n) i18n.on(bindI18n, boundReset);\n    if (bindI18nStore && i18n) i18n.store.on(bindI18nStore, boundReset);\n    return function () {\n      isMounted.current = false;\n      if (bindI18n && i18n) bindI18n.split(' ').forEach(function (e) {\n        return i18n.off(e, boundReset);\n      });\n      if (bindI18nStore && i18n) bindI18nStore.split(' ').forEach(function (e) {\n        return i18n.store.off(e, boundReset);\n      });\n    };\n  }, [i18n, joinedNS]);\n  var isInitial = useRef(true);\n  useEffect(function () {\n    if (isMounted.current && !isInitial.current) {\n      setT(getT);\n    }\n\n    isInitial.current = false;\n  }, [i18n, keyPrefix]);\n  var ret = [t, i18n, ready];\n  ret.t = t;\n  ret.i18n = i18n;\n  ret.ready = ready;\n  if (ready) return ret;\n  if (!ready && !useSuspense) return ret;\n  throw new Promise(function (resolve) {\n    loadNamespaces(i18n, namespaces, function () {\n      resolve();\n    });\n  });\n}","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\n        });\n    }\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking)\n            db.addEventListener('versionchange', () => blocking());\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ComponentContainer,\n  ComponentType,\n  Provider,\n  Name\n} from '@firebase/component';\nimport { PlatformLoggerService, VersionService } from './types';\n\nexport class PlatformLoggerServiceImpl implements PlatformLoggerService {\n  constructor(private readonly container: ComponentContainer) {}\n  // In initial implementation, this will be called by installations on\n  // auth token refresh, and installations will send this string.\n  getPlatformInfoString(): string {\n    const providers = this.container.getProviders();\n    // Loop through providers and get library/version pairs from any that are\n    // version components.\n    return providers\n      .map(provider => {\n        if (isVersionServiceProvider(provider)) {\n          const service = provider.getImmediate() as VersionService;\n          return `${service.library}/${service.version}`;\n        } else {\n          return null;\n        }\n      })\n      .filter(logString => logString)\n      .join(' ');\n  }\n}\n/**\n *\n * @param provider check if this provider provides a VersionService\n *\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\n * provides VersionService. The provider is not necessarily a 'app-version'\n * provider.\n */\nfunction isVersionServiceProvider(provider: Provider<Name>): boolean {\n  const component = provider.getComponent();\n  return component?.type === ComponentType.VERSION;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/app');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { name as appName } from '../package.json';\nimport { name as appCompatName } from '../../app-compat/package.json';\nimport { name as analyticsCompatName } from '../../../packages/analytics-compat/package.json';\nimport { name as analyticsName } from '../../../packages/analytics/package.json';\nimport { name as appCheckCompatName } from '../../../packages/app-check-compat/package.json';\nimport { name as appCheckName } from '../../../packages/app-check/package.json';\nimport { name as authName } from '../../../packages/auth/package.json';\nimport { name as authCompatName } from '../../../packages/auth-compat/package.json';\nimport { name as databaseName } from '../../../packages/database/package.json';\nimport { name as databaseCompatName } from '../../../packages/database-compat/package.json';\nimport { name as functionsName } from '../../../packages/functions/package.json';\nimport { name as functionsCompatName } from '../../../packages/functions-compat/package.json';\nimport { name as installationsName } from '../../../packages/installations/package.json';\nimport { name as installationsCompatName } from '../../../packages/installations-compat/package.json';\nimport { name as messagingName } from '../../../packages/messaging/package.json';\nimport { name as messagingCompatName } from '../../../packages/messaging-compat/package.json';\nimport { name as performanceName } from '../../../packages/performance/package.json';\nimport { name as performanceCompatName } from '../../../packages/performance-compat/package.json';\nimport { name as remoteConfigName } from '../../../packages/remote-config/package.json';\nimport { name as remoteConfigCompatName } from '../../../packages/remote-config-compat/package.json';\nimport { name as storageName } from '../../../packages/storage/package.json';\nimport { name as storageCompatName } from '../../../packages/storage-compat/package.json';\nimport { name as firestoreName } from '../../../packages/firestore/package.json';\nimport { name as firestoreCompatName } from '../../../packages/firestore-compat/package.json';\nimport { name as packageName } from '../../../packages/firebase/package.json';\n\n/**\n * The default app name\n *\n * @internal\n */\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\nexport const PLATFORM_LOG_STRING = {\n  [appName]: 'fire-core',\n  [appCompatName]: 'fire-core-compat',\n  [analyticsName]: 'fire-analytics',\n  [analyticsCompatName]: 'fire-analytics-compat',\n  [appCheckName]: 'fire-app-check',\n  [appCheckCompatName]: 'fire-app-check-compat',\n  [authName]: 'fire-auth',\n  [authCompatName]: 'fire-auth-compat',\n  [databaseName]: 'fire-rtdb',\n  [databaseCompatName]: 'fire-rtdb-compat',\n  [functionsName]: 'fire-fn',\n  [functionsCompatName]: 'fire-fn-compat',\n  [installationsName]: 'fire-iid',\n  [installationsCompatName]: 'fire-iid-compat',\n  [messagingName]: 'fire-fcm',\n  [messagingCompatName]: 'fire-fcm-compat',\n  [performanceName]: 'fire-perf',\n  [performanceCompatName]: 'fire-perf-compat',\n  [remoteConfigName]: 'fire-rc',\n  [remoteConfigCompatName]: 'fire-rc-compat',\n  [storageName]: 'fire-gcs',\n  [storageCompatName]: 'fire-gcs-compat',\n  [firestoreName]: 'fire-fst',\n  [firestoreCompatName]: 'fire-fst-compat',\n  'fire-js': 'fire-js', // Platform identifier for JS SDK.\n  [packageName]: 'fire-js-all'\n} as const;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from './public-types';\nimport { Component, Provider, Name } from '@firebase/component';\nimport { logger } from './logger';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport { FirebaseAppImpl } from './firebaseApp';\n\n/**\n * @internal\n */\nexport const _apps = new Map<string, FirebaseApp>();\n\n/**\n * Registered components.\n *\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const _components = new Map<string, Component<any>>();\n\n/**\n * @param component - the component being added to this app's container\n *\n * @internal\n */\nexport function _addComponent<T extends Name>(\n  app: FirebaseApp,\n  component: Component<T>\n): void {\n  try {\n    (app as FirebaseAppImpl).container.addComponent(component);\n  } catch (e) {\n    logger.debug(\n      `Component ${component.name} failed to register with FirebaseApp ${app.name}`,\n      e\n    );\n  }\n}\n\n/**\n *\n * @internal\n */\nexport function _addOrOverwriteComponent(\n  app: FirebaseApp,\n  component: Component\n): void {\n  (app as FirebaseAppImpl).container.addOrOverwriteComponent(component);\n}\n\n/**\n *\n * @param component - the component to register\n * @returns whether or not the component is registered successfully\n *\n * @internal\n */\nexport function _registerComponent<T extends Name>(\n  component: Component<T>\n): boolean {\n  const componentName = component.name;\n  if (_components.has(componentName)) {\n    logger.debug(\n      `There were multiple attempts to register component ${componentName}.`\n    );\n\n    return false;\n  }\n\n  _components.set(componentName, component);\n\n  // add the component to existing app instances\n  for (const app of _apps.values()) {\n    _addComponent(app as FirebaseAppImpl, component);\n  }\n\n  return true;\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n *\n * @returns the provider for the service with the matching name\n *\n * @internal\n */\nexport function _getProvider<T extends Name>(\n  app: FirebaseApp,\n  name: T\n): Provider<T> {\n  const heartbeatController = (app as FirebaseAppImpl).container\n    .getProvider('heartbeat')\n    .getImmediate({ optional: true });\n  if (heartbeatController) {\n    void heartbeatController.triggerHeartbeat();\n  }\n  return (app as FirebaseAppImpl).container.getProvider(name);\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\n *\n * @internal\n */\nexport function _removeServiceInstance<T extends Name>(\n  app: FirebaseApp,\n  name: T,\n  instanceIdentifier: string = DEFAULT_ENTRY_NAME\n): void {\n  _getProvider(app, name).clearInstance(instanceIdentifier);\n}\n\n/**\n * Test only\n *\n * @internal\n */\nexport function _clearComponents(): void {\n  _components.clear();\n}\n\n/**\n * Exported in order to be used in app-compat package\n */\nexport { DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppError {\n  NO_APP = 'no-app',\n  BAD_APP_NAME = 'bad-app-name',\n  DUPLICATE_APP = 'duplicate-app',\n  APP_DELETED = 'app-deleted',\n  NO_OPTIONS = 'no-options',\n  INVALID_APP_ARGUMENT = 'invalid-app-argument',\n  INVALID_LOG_ARGUMENT = 'invalid-log-argument',\n  IDB_OPEN = 'idb-open',\n  IDB_GET = 'idb-get',\n  IDB_WRITE = 'idb-set',\n  IDB_DELETE = 'idb-delete'\n}\n\nconst ERRORS: ErrorMap<AppError> = {\n  [AppError.NO_APP]:\n    \"No Firebase App '{$appName}' has been created - \" +\n    'call Firebase App.initializeApp()',\n  [AppError.BAD_APP_NAME]: \"Illegal App name: '{$appName}\",\n  [AppError.DUPLICATE_APP]:\n    \"Firebase App named '{$appName}' already exists with different options or config\",\n  [AppError.APP_DELETED]: \"Firebase App named '{$appName}' already deleted\",\n  [AppError.NO_OPTIONS]:\n    'Need to provide options, when not being deployed to hosting via source.',\n  [AppError.INVALID_APP_ARGUMENT]:\n    'firebase.{$appName}() takes either no argument or a ' +\n    'Firebase App instance.',\n  [AppError.INVALID_LOG_ARGUMENT]:\n    'First argument to `onLog` must be null or a function.',\n  [AppError.IDB_OPEN]:\n    'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_GET]:\n    'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_WRITE]:\n    'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_DELETE]:\n    'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.'\n};\n\ninterface ErrorParams {\n  [AppError.NO_APP]: { appName: string };\n  [AppError.BAD_APP_NAME]: { appName: string };\n  [AppError.DUPLICATE_APP]: { appName: string };\n  [AppError.APP_DELETED]: { appName: string };\n  [AppError.INVALID_APP_ARGUMENT]: { appName: string };\n  [AppError.IDB_OPEN]: { originalErrorMessage?: string };\n  [AppError.IDB_GET]: { originalErrorMessage?: string };\n  [AppError.IDB_WRITE]: { originalErrorMessage?: string };\n  [AppError.IDB_DELETE]: { originalErrorMessage?: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AppError, ErrorParams>(\n  'app',\n  'Firebase',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport {\n  ComponentContainer,\n  Component,\n  ComponentType\n} from '@firebase/component';\nimport { ERROR_FACTORY, AppError } from './errors';\n\nexport class FirebaseAppImpl implements FirebaseApp {\n  private readonly _options: FirebaseOptions;\n  private readonly _name: string;\n  /**\n   * Original config values passed in as a constructor parameter.\n   * It is only used to compare with another config object to support idempotent initializeApp().\n   *\n   * Updating automaticDataCollectionEnabled on the App instance will not change its value in _config.\n   */\n  private readonly _config: Required<FirebaseAppSettings>;\n  private _automaticDataCollectionEnabled: boolean;\n  private _isDeleted = false;\n  private readonly _container: ComponentContainer;\n\n  constructor(\n    options: FirebaseOptions,\n    config: Required<FirebaseAppSettings>,\n    container: ComponentContainer\n  ) {\n    this._options = { ...options };\n    this._config = { ...config };\n    this._name = config.name;\n    this._automaticDataCollectionEnabled =\n      config.automaticDataCollectionEnabled;\n    this._container = container;\n    this.container.addComponent(\n      new Component('app', () => this, ComponentType.PUBLIC)\n    );\n  }\n\n  get automaticDataCollectionEnabled(): boolean {\n    this.checkDestroyed();\n    return this._automaticDataCollectionEnabled;\n  }\n\n  set automaticDataCollectionEnabled(val: boolean) {\n    this.checkDestroyed();\n    this._automaticDataCollectionEnabled = val;\n  }\n\n  get name(): string {\n    this.checkDestroyed();\n    return this._name;\n  }\n\n  get options(): FirebaseOptions {\n    this.checkDestroyed();\n    return this._options;\n  }\n\n  get config(): Required<FirebaseAppSettings> {\n    this.checkDestroyed();\n    return this._config;\n  }\n\n  get container(): ComponentContainer {\n    return this._container;\n  }\n\n  get isDeleted(): boolean {\n    return this._isDeleted;\n  }\n\n  set isDeleted(val: boolean) {\n    this._isDeleted = val;\n  }\n\n  /**\n   * This function will throw an Error if the App has already been deleted -\n   * use before performing API actions on the App.\n   */\n  private checkDestroyed(): void {\n    if (this.isDeleted) {\n      throw ERROR_FACTORY.create(AppError.APP_DELETED, { appName: this._name });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport { DEFAULT_ENTRY_NAME, PLATFORM_LOG_STRING } from './constants';\nimport { ERROR_FACTORY, AppError } from './errors';\nimport {\n  ComponentContainer,\n  Component,\n  Name,\n  ComponentType\n} from '@firebase/component';\nimport { version } from '../../firebase/package.json';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { _apps, _components, _registerComponent } from './internal';\nimport { logger } from './logger';\nimport {\n  LogLevelString,\n  setLogLevel as setLogLevelImpl,\n  LogCallback,\n  LogOptions,\n  setUserLogHandler\n} from '@firebase/logger';\nimport { deepEqual, getDefaultAppConfig } from '@firebase/util';\n\nexport { FirebaseError } from '@firebase/util';\n\n/**\n * The current SDK version.\n *\n * @public\n */\nexport const SDK_VERSION = version;\n\n/**\n * Creates and initializes a {@link @firebase/app#FirebaseApp} instance.\n *\n * See\n * {@link\n *   https://firebase.google.com/docs/web/setup#add_firebase_to_your_app\n *   | Add Firebase to your app} and\n * {@link\n *   https://firebase.google.com/docs/web/setup#multiple-projects\n *   | Initialize multiple projects} for detailed documentation.\n *\n * @example\n * ```javascript\n *\n * // Initialize default app\n * // Retrieve your own options values by adding a web app on\n * // https://console.firebase.google.com\n * initializeApp({\n *   apiKey: \"AIza....\",                             // Auth / General Use\n *   authDomain: \"YOUR_APP.firebaseapp.com\",         // Auth with popup/redirect\n *   databaseURL: \"https://YOUR_APP.firebaseio.com\", // Realtime Database\n *   storageBucket: \"YOUR_APP.appspot.com\",          // Storage\n *   messagingSenderId: \"123456789\"                  // Cloud Messaging\n * });\n * ```\n *\n * @example\n * ```javascript\n *\n * // Initialize another app\n * const otherApp = initializeApp({\n *   databaseURL: \"https://<OTHER_DATABASE_NAME>.firebaseio.com\",\n *   storageBucket: \"<OTHER_STORAGE_BUCKET>.appspot.com\"\n * }, \"otherApp\");\n * ```\n *\n * @param options - Options to configure the app's services.\n * @param name - Optional name of the app to initialize. If no name\n *   is provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The initialized app.\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  name?: string\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @param options - Options to configure the app's services.\n * @param config - FirebaseApp Configuration\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  config?: FirebaseAppSettings\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @public\n */\nexport function initializeApp(): FirebaseApp;\nexport function initializeApp(\n  _options?: FirebaseOptions,\n  rawConfig = {}\n): FirebaseApp {\n  let options = _options;\n\n  if (typeof rawConfig !== 'object') {\n    const name = rawConfig;\n    rawConfig = { name };\n  }\n\n  const config: Required<FirebaseAppSettings> = {\n    name: DEFAULT_ENTRY_NAME,\n    automaticDataCollectionEnabled: false,\n    ...rawConfig\n  };\n  const name = config.name;\n\n  if (typeof name !== 'string' || !name) {\n    throw ERROR_FACTORY.create(AppError.BAD_APP_NAME, {\n      appName: String(name)\n    });\n  }\n\n  options ||= getDefaultAppConfig();\n\n  if (!options) {\n    throw ERROR_FACTORY.create(AppError.NO_OPTIONS);\n  }\n\n  const existingApp = _apps.get(name) as FirebaseAppImpl;\n  if (existingApp) {\n    // return the existing app if options and config deep equal the ones in the existing app.\n    if (\n      deepEqual(options, existingApp.options) &&\n      deepEqual(config, existingApp.config)\n    ) {\n      return existingApp;\n    } else {\n      throw ERROR_FACTORY.create(AppError.DUPLICATE_APP, { appName: name });\n    }\n  }\n\n  const container = new ComponentContainer(name);\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n\n  const newApp = new FirebaseAppImpl(options, config, container);\n\n  _apps.set(name, newApp);\n\n  return newApp;\n}\n\n/**\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\n *\n * When called with no arguments, the default app is returned. When an app name\n * is provided, the app corresponding to that name is returned.\n *\n * An exception is thrown if the app being retrieved has not yet been\n * initialized.\n *\n * @example\n * ```javascript\n * // Return the default app\n * const app = getApp();\n * ```\n *\n * @example\n * ```javascript\n * // Return a named app\n * const otherApp = getApp(\"otherApp\");\n * ```\n *\n * @param name - Optional name of the app to return. If no name is\n *   provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The app corresponding to the provided app name.\n *   If no app name is provided, the default app is returned.\n *\n * @public\n */\nexport function getApp(name: string = DEFAULT_ENTRY_NAME): FirebaseApp {\n  const app = _apps.get(name);\n  if (!app && name === DEFAULT_ENTRY_NAME) {\n    return initializeApp();\n  }\n  if (!app) {\n    throw ERROR_FACTORY.create(AppError.NO_APP, { appName: name });\n  }\n\n  return app;\n}\n\n/**\n * A (read-only) array of all initialized apps.\n * @public\n */\nexport function getApps(): FirebaseApp[] {\n  return Array.from(_apps.values());\n}\n\n/**\n * Renders this app unusable and frees the resources of all associated\n * services.\n *\n * @example\n * ```javascript\n * deleteApp(app)\n *   .then(function() {\n *     console.log(\"App deleted successfully\");\n *   })\n *   .catch(function(error) {\n *     console.log(\"Error deleting app:\", error);\n *   });\n * ```\n *\n * @public\n */\nexport async function deleteApp(app: FirebaseApp): Promise<void> {\n  const name = app.name;\n  if (_apps.has(name)) {\n    _apps.delete(name);\n    await Promise.all(\n      (app as FirebaseAppImpl).container\n        .getProviders()\n        .map(provider => provider.delete())\n    );\n    (app as FirebaseAppImpl).isDeleted = true;\n  }\n}\n\n/**\n * Registers a library's name and version for platform logging purposes.\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\n * @param version - Current version of that library.\n * @param variant - Bundle variant, e.g., node, rn, etc.\n *\n * @public\n */\nexport function registerVersion(\n  libraryKeyOrName: string,\n  version: string,\n  variant?: string\n): void {\n  // TODO: We can use this check to whitelist strings when/if we set up\n  // a good whitelist system.\n  let library = PLATFORM_LOG_STRING[libraryKeyOrName] ?? libraryKeyOrName;\n  if (variant) {\n    library += `-${variant}`;\n  }\n  const libraryMismatch = library.match(/\\s|\\//);\n  const versionMismatch = version.match(/\\s|\\//);\n  if (libraryMismatch || versionMismatch) {\n    const warning = [\n      `Unable to register library \"${library}\" with version \"${version}\":`\n    ];\n    if (libraryMismatch) {\n      warning.push(\n        `library name \"${library}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    if (libraryMismatch && versionMismatch) {\n      warning.push('and');\n    }\n    if (versionMismatch) {\n      warning.push(\n        `version name \"${version}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    logger.warn(warning.join(' '));\n    return;\n  }\n  _registerComponent(\n    new Component(\n      `${library}-version` as Name,\n      () => ({ library, version }),\n      ComponentType.VERSION\n    )\n  );\n}\n\n/**\n * Sets log handler for all Firebase SDKs.\n * @param logCallback - An optional custom log handler that executes user code whenever\n * the Firebase SDK makes a logging call.\n *\n * @public\n */\nexport function onLog(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  if (logCallback !== null && typeof logCallback !== 'function') {\n    throw ERROR_FACTORY.create(AppError.INVALID_LOG_ARGUMENT);\n  }\n  setUserLogHandler(logCallback, options);\n}\n\n/**\n * Sets log level for all Firebase SDKs.\n *\n * All of the log types above the current log level are captured (i.e. if\n * you set the log level to `info`, errors are logged, but `debug` and\n * `verbose` logs are not).\n *\n * @public\n */\nexport function setLogLevel(logLevel: LogLevelString): void {\n  setLogLevelImpl(logLevel);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { DBSchema, openDB, IDBPDatabase } from 'idb';\nimport { AppError, ERROR_FACTORY } from './errors';\nimport { FirebaseApp } from './public-types';\nimport { HeartbeatsInIndexedDB } from './types';\nimport { logger } from './logger';\n\nconst DB_NAME = 'firebase-heartbeat-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-heartbeat-store';\n\ninterface AppDB extends DBSchema {\n  'firebase-heartbeat-store': {\n    key: string;\n    value: HeartbeatsInIndexedDB;\n  };\n}\n\nlet dbPromise: Promise<IDBPDatabase<AppDB>> | null = null;\nfunction getDbPromise(): Promise<IDBPDatabase<AppDB>> {\n  if (!dbPromise) {\n    dbPromise = openDB<AppDB>(DB_NAME, DB_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME);\n        }\n      }\n    }).catch(e => {\n      throw ERROR_FACTORY.create(AppError.IDB_OPEN, {\n        originalErrorMessage: e.message\n      });\n    });\n  }\n  return dbPromise;\n}\n\nexport async function readHeartbeatsFromIndexedDB(\n  app: FirebaseApp\n): Promise<HeartbeatsInIndexedDB | undefined> {\n  try {\n    const db = await getDbPromise();\n    return db\n      .transaction(STORE_NAME)\n      .objectStore(STORE_NAME)\n      .get(computeKey(app)) as Promise<HeartbeatsInIndexedDB | undefined>;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_GET, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nexport async function writeHeartbeatsToIndexedDB(\n  app: FirebaseApp,\n  heartbeatObject: HeartbeatsInIndexedDB\n): Promise<void> {\n  try {\n    const db = await getDbPromise();\n    const tx = db.transaction(STORE_NAME, 'readwrite');\n    const objectStore = tx.objectStore(STORE_NAME);\n    await objectStore.put(heartbeatObject, computeKey(app));\n    return tx.done;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_WRITE, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nfunction computeKey(app: FirebaseApp): string {\n  return `${app.name}!${app.options.appId}`;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ComponentContainer } from '@firebase/component';\nimport {\n  base64urlEncodeWithoutPadding,\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport {\n  readHeartbeatsFromIndexedDB,\n  writeHeartbeatsToIndexedDB\n} from './indexeddb';\nimport { FirebaseApp } from './public-types';\nimport {\n  HeartbeatsByUserAgent,\n  HeartbeatService,\n  HeartbeatsInIndexedDB,\n  HeartbeatStorage,\n  SingleDateHeartbeat\n} from './types';\n\nconst MAX_HEADER_BYTES = 1024;\n// 30 days\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\n\nexport class HeartbeatServiceImpl implements HeartbeatService {\n  /**\n   * The persistence layer for heartbeats\n   * Leave public for easier testing.\n   */\n  _storage: HeartbeatStorageImpl;\n\n  /**\n   * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\n   * the header string.\n   * Stores one record per date. This will be consolidated into the standard\n   * format of one record per user agent string before being sent as a header.\n   * Populated from indexedDB when the controller is instantiated and should\n   * be kept in sync with indexedDB.\n   * Leave public for easier testing.\n   */\n  _heartbeatsCache: HeartbeatsInIndexedDB | null = null;\n\n  /**\n   * the initialization promise for populating heartbeatCache.\n   * If getHeartbeatsHeader() is called before the promise resolves\n   * (hearbeatsCache == null), it should wait for this promise\n   * Leave public for easier testing.\n   */\n  _heartbeatsCachePromise: Promise<HeartbeatsInIndexedDB>;\n  constructor(private readonly container: ComponentContainer) {\n    const app = this.container.getProvider('app').getImmediate();\n    this._storage = new HeartbeatStorageImpl(app);\n    this._heartbeatsCachePromise = this._storage.read().then(result => {\n      this._heartbeatsCache = result;\n      return result;\n    });\n  }\n\n  /**\n   * Called to report a heartbeat. The function will generate\n   * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\n   * to IndexedDB.\n   * Note that we only store one heartbeat per day. So if a heartbeat for today is\n   * already logged, subsequent calls to this function in the same day will be ignored.\n   */\n  async triggerHeartbeat(): Promise<void> {\n    const platformLogger = this.container\n      .getProvider('platform-logger')\n      .getImmediate();\n\n    // This is the \"Firebase user agent\" string from the platform logger\n    // service, not the browser user agent.\n    const agent = platformLogger.getPlatformInfoString();\n    const date = getUTCDateString();\n    if (this._heartbeatsCache === null) {\n      this._heartbeatsCache = await this._heartbeatsCachePromise;\n    }\n    // Do not store a heartbeat if one is already stored for this day\n    // or if a header has already been sent today.\n    if (\n      this._heartbeatsCache.lastSentHeartbeatDate === date ||\n      this._heartbeatsCache.heartbeats.some(\n        singleDateHeartbeat => singleDateHeartbeat.date === date\n      )\n    ) {\n      return;\n    } else {\n      // There is no entry for this date. Create one.\n      this._heartbeatsCache.heartbeats.push({ date, agent });\n    }\n    // Remove entries older than 30 days.\n    this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(\n      singleDateHeartbeat => {\n        const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\n        const now = Date.now();\n        return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\n      }\n    );\n    return this._storage.overwrite(this._heartbeatsCache);\n  }\n\n  /**\n   * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\n   * It also clears all heartbeats from memory as well as in IndexedDB.\n   *\n   * NOTE: Consuming product SDKs should not send the header if this method\n   * returns an empty string.\n   */\n  async getHeartbeatsHeader(): Promise<string> {\n    if (this._heartbeatsCache === null) {\n      await this._heartbeatsCachePromise;\n    }\n    // If it's still null or the array is empty, there is no data to send.\n    if (\n      this._heartbeatsCache === null ||\n      this._heartbeatsCache.heartbeats.length === 0\n    ) {\n      return '';\n    }\n    const date = getUTCDateString();\n    // Extract as many heartbeats from the cache as will fit under the size limit.\n    const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(\n      this._heartbeatsCache.heartbeats\n    );\n    const headerString = base64urlEncodeWithoutPadding(\n      JSON.stringify({ version: 2, heartbeats: heartbeatsToSend })\n    );\n    // Store last sent date to prevent another being logged/sent for the same day.\n    this._heartbeatsCache.lastSentHeartbeatDate = date;\n    if (unsentEntries.length > 0) {\n      // Store any unsent entries if they exist.\n      this._heartbeatsCache.heartbeats = unsentEntries;\n      // This seems more likely than emptying the array (below) to lead to some odd state\n      // since the cache isn't empty and this will be called again on the next request,\n      // and is probably safest if we await it.\n      await this._storage.overwrite(this._heartbeatsCache);\n    } else {\n      this._heartbeatsCache.heartbeats = [];\n      // Do not wait for this, to reduce latency.\n      void this._storage.overwrite(this._heartbeatsCache);\n    }\n    return headerString;\n  }\n}\n\nfunction getUTCDateString(): string {\n  const today = new Date();\n  // Returns date format 'YYYY-MM-DD'\n  return today.toISOString().substring(0, 10);\n}\n\nexport function extractHeartbeatsForHeader(\n  heartbeatsCache: SingleDateHeartbeat[],\n  maxSize = MAX_HEADER_BYTES\n): {\n  heartbeatsToSend: HeartbeatsByUserAgent[];\n  unsentEntries: SingleDateHeartbeat[];\n} {\n  // Heartbeats grouped by user agent in the standard format to be sent in\n  // the header.\n  const heartbeatsToSend: HeartbeatsByUserAgent[] = [];\n  // Single date format heartbeats that are not sent.\n  let unsentEntries = heartbeatsCache.slice();\n  for (const singleDateHeartbeat of heartbeatsCache) {\n    // Look for an existing entry with the same user agent.\n    const heartbeatEntry = heartbeatsToSend.find(\n      hb => hb.agent === singleDateHeartbeat.agent\n    );\n    if (!heartbeatEntry) {\n      // If no entry for this user agent exists, create one.\n      heartbeatsToSend.push({\n        agent: singleDateHeartbeat.agent,\n        dates: [singleDateHeartbeat.date]\n      });\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        // If the header would exceed max size, remove the added heartbeat\n        // entry and stop adding to the header.\n        heartbeatsToSend.pop();\n        break;\n      }\n    } else {\n      heartbeatEntry.dates.push(singleDateHeartbeat.date);\n      // If the header would exceed max size, remove the added date\n      // and stop adding to the header.\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        heartbeatEntry.dates.pop();\n        break;\n      }\n    }\n    // Pop unsent entry from queue. (Skipped if adding the entry exceeded\n    // quota and the loop breaks early.)\n    unsentEntries = unsentEntries.slice(1);\n  }\n  return {\n    heartbeatsToSend,\n    unsentEntries\n  };\n}\n\nexport class HeartbeatStorageImpl implements HeartbeatStorage {\n  private _canUseIndexedDBPromise: Promise<boolean>;\n  constructor(public app: FirebaseApp) {\n    this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\n  }\n  async runIndexedDBEnvironmentCheck(): Promise<boolean> {\n    if (!isIndexedDBAvailable()) {\n      return false;\n    } else {\n      return validateIndexedDBOpenable()\n        .then(() => true)\n        .catch(() => false);\n    }\n  }\n  /**\n   * Read all heartbeats.\n   */\n  async read(): Promise<HeartbeatsInIndexedDB> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return { heartbeats: [] };\n    } else {\n      const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\n      return idbHeartbeatObject || { heartbeats: [] };\n    }\n  }\n  // overwrite the storage with the provided heartbeats\n  async overwrite(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: heartbeatsObject.heartbeats\n      });\n    }\n  }\n  // add heartbeats\n  async add(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: [\n          ...existingHeartbeatsObject.heartbeats,\n          ...heartbeatsObject.heartbeats\n        ]\n      });\n    }\n  }\n}\n\n/**\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\n * in a platform logging header JSON object, stringified, and converted\n * to base 64.\n */\nexport function countBytes(heartbeatsCache: HeartbeatsByUserAgent[]): number {\n  // base64 has a restricted set of characters, all of which should be 1 byte.\n  return base64urlEncodeWithoutPadding(\n    // heartbeatsCache wrapper properties\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })\n  ).length;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ComponentType } from '@firebase/component';\nimport { PlatformLoggerServiceImpl } from './platformLoggerService';\nimport { name, version } from '../package.json';\nimport { _registerComponent } from './internal';\nimport { registerVersion } from './api';\nimport { HeartbeatServiceImpl } from './heartbeatService';\n\nexport function registerCoreComponents(variant?: string): void {\n  _registerComponent(\n    new Component(\n      'platform-logger',\n      container => new PlatformLoggerServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n  _registerComponent(\n    new Component(\n      'heartbeat',\n      container => new HeartbeatServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n\n  // Register `app` package.\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n  // Register platform SDK identifier (no version).\n  registerVersion('fire-js', '');\n}\n","/**\n * Firebase App\n *\n * @remarks This package coordinates the communication between the different Firebase components\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerCoreComponents } from './registerCoreComponents';\n\nexport * from './api';\nexport * from './internal';\nexport * from './public-types';\n\nregisterCoreComponents('__RUNTIME_ENV__');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  InstantiationMode,\n  InstanceFactory,\n  ComponentType,\n  Dictionary,\n  Name,\n  onInstanceCreatedCallback\n} from './types';\n\n/**\n * Component for service name T, e.g. `auth`, `auth-internal`\n */\nexport class Component<T extends Name = Name> {\n  multipleInstances = false;\n  /**\n   * Properties to be added to the service namespace\n   */\n  serviceProps: Dictionary = {};\n\n  instantiationMode = InstantiationMode.LAZY;\n\n  onInstanceCreated: onInstanceCreatedCallback<T> | null = null;\n\n  /**\n   *\n   * @param name The public service name, e.g. app, auth, firestore, database\n   * @param instanceFactory Service factory responsible for creating the public interface\n   * @param type whether the service provided by the component is public or private\n   */\n  constructor(\n    readonly name: T,\n    readonly instanceFactory: InstanceFactory<T>,\n    readonly type: ComponentType\n  ) {}\n\n  setInstantiationMode(mode: InstantiationMode): this {\n    this.instantiationMode = mode;\n    return this;\n  }\n\n  setMultipleInstances(multipleInstances: boolean): this {\n    this.multipleInstances = multipleInstances;\n    return this;\n  }\n\n  setServiceProps(props: Dictionary): this {\n    this.serviceProps = props;\n    return this;\n  }\n\n  setInstanceCreatedCallback(callback: onInstanceCreatedCallback<T>): this {\n    this.onInstanceCreated = callback;\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\nimport { ComponentContainer } from './component_container';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport {\n  InitializeOptions,\n  InstantiationMode,\n  Name,\n  NameServiceMapping,\n  OnInitCallBack\n} from './types';\nimport { Component } from './component';\n\n/**\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\n * NameServiceMapping[T] is an alias for the type of the instance\n */\nexport class Provider<T extends Name> {\n  private component: Component<T> | null = null;\n  private readonly instances: Map<string, NameServiceMapping[T]> = new Map();\n  private readonly instancesDeferred: Map<\n    string,\n    Deferred<NameServiceMapping[T]>\n  > = new Map();\n  private readonly instancesOptions: Map<string, Record<string, unknown>> =\n    new Map();\n  private onInitCallbacks: Map<string, Set<OnInitCallBack<T>>> = new Map();\n\n  constructor(\n    private readonly name: T,\n    private readonly container: ComponentContainer\n  ) {}\n\n  /**\n   * @param identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   */\n  get(identifier?: string): Promise<NameServiceMapping[T]> {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\n      const deferred = new Deferred<NameServiceMapping[T]>();\n      this.instancesDeferred.set(normalizedIdentifier, deferred);\n\n      if (\n        this.isInitialized(normalizedIdentifier) ||\n        this.shouldAutoInitialize()\n      ) {\n        // initialize the service if it can be auto-initialized\n        try {\n          const instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n          if (instance) {\n            deferred.resolve(instance);\n          }\n        } catch (e) {\n          // when the instance factory throws an exception during get(), it should not cause\n          // a fatal error. We just return the unresolved promise in this case.\n        }\n      }\n    }\n\n    return this.instancesDeferred.get(normalizedIdentifier)!.promise;\n  }\n\n  /**\n   *\n   * @param options.identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   * @param options.optional If optional is false or not provided, the method throws an error when\n   * the service is not immediately available.\n   * If optional is true, the method returns null if the service is not immediately available.\n   */\n  getImmediate(options: {\n    identifier?: string;\n    optional: true;\n  }): NameServiceMapping[T] | null;\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: false;\n  }): NameServiceMapping[T];\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: boolean;\n  }): NameServiceMapping[T] | null {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      options?.identifier\n    );\n    const optional = options?.optional ?? false;\n\n    if (\n      this.isInitialized(normalizedIdentifier) ||\n      this.shouldAutoInitialize()\n    ) {\n      try {\n        return this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        });\n      } catch (e) {\n        if (optional) {\n          return null;\n        } else {\n          throw e;\n        }\n      }\n    } else {\n      // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\n      if (optional) {\n        return null;\n      } else {\n        throw Error(`Service ${this.name} is not available`);\n      }\n    }\n  }\n\n  getComponent(): Component<T> | null {\n    return this.component;\n  }\n\n  setComponent(component: Component<T>): void {\n    if (component.name !== this.name) {\n      throw Error(\n        `Mismatching Component ${component.name} for Provider ${this.name}.`\n      );\n    }\n\n    if (this.component) {\n      throw Error(`Component for ${this.name} has already been provided`);\n    }\n\n    this.component = component;\n\n    // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\n    if (!this.shouldAutoInitialize()) {\n      return;\n    }\n\n    // if the service is eager, initialize the default instance\n    if (isComponentEager(component)) {\n      try {\n        this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\n      } catch (e) {\n        // when the instance factory for an eager Component throws an exception during the eager\n        // initialization, it should not cause a fatal error.\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\n        // a fatal error in this case?\n      }\n    }\n\n    // Create service instances for the pending promises and resolve them\n    // NOTE: if this.multipleInstances is false, only the default instance will be created\n    // and all promises with resolve with it regardless of the identifier.\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n\n      try {\n        // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n        const instance = this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        })!;\n        instanceDeferred.resolve(instance);\n      } catch (e) {\n        // when the instance factory throws an exception, it should not cause\n        // a fatal error. We just leave the promise unresolved.\n      }\n    }\n  }\n\n  clearInstance(identifier: string = DEFAULT_ENTRY_NAME): void {\n    this.instancesDeferred.delete(identifier);\n    this.instancesOptions.delete(identifier);\n    this.instances.delete(identifier);\n  }\n\n  // app.delete() will call this method on every provider to delete the services\n  // TODO: should we mark the provider as deleted?\n  async delete(): Promise<void> {\n    const services = Array.from(this.instances.values());\n\n    await Promise.all([\n      ...services\n        .filter(service => 'INTERNAL' in service) // legacy services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any).INTERNAL!.delete()),\n      ...services\n        .filter(service => '_delete' in service) // modularized services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any)._delete())\n    ]);\n  }\n\n  isComponentSet(): boolean {\n    return this.component != null;\n  }\n\n  isInitialized(identifier: string = DEFAULT_ENTRY_NAME): boolean {\n    return this.instances.has(identifier);\n  }\n\n  getOptions(identifier: string = DEFAULT_ENTRY_NAME): Record<string, unknown> {\n    return this.instancesOptions.get(identifier) || {};\n  }\n\n  initialize(opts: InitializeOptions = {}): NameServiceMapping[T] {\n    const { options = {} } = opts;\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      opts.instanceIdentifier\n    );\n    if (this.isInitialized(normalizedIdentifier)) {\n      throw Error(\n        `${this.name}(${normalizedIdentifier}) has already been initialized`\n      );\n    }\n\n    if (!this.isComponentSet()) {\n      throw Error(`Component ${this.name} has not been registered yet`);\n    }\n\n    const instance = this.getOrInitializeService({\n      instanceIdentifier: normalizedIdentifier,\n      options\n    })!;\n\n    // resolve any pending promise waiting for the service instance\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedDeferredIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n      if (normalizedIdentifier === normalizedDeferredIdentifier) {\n        instanceDeferred.resolve(instance);\n      }\n    }\n\n    return instance;\n  }\n\n  /**\n   *\n   * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\n   * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\n   *\n   * @param identifier An optional instance identifier\n   * @returns a function to unregister the callback\n   */\n  onInit(callback: OnInitCallBack<T>, identifier?: string): () => void {\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n    const existingCallbacks =\n      this.onInitCallbacks.get(normalizedIdentifier) ??\n      new Set<OnInitCallBack<T>>();\n    existingCallbacks.add(callback);\n    this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\n\n    const existingInstance = this.instances.get(normalizedIdentifier);\n    if (existingInstance) {\n      callback(existingInstance, normalizedIdentifier);\n    }\n\n    return () => {\n      existingCallbacks.delete(callback);\n    };\n  }\n\n  /**\n   * Invoke onInit callbacks synchronously\n   * @param instance the service instance`\n   */\n  private invokeOnInitCallbacks(\n    instance: NameServiceMapping[T],\n    identifier: string\n  ): void {\n    const callbacks = this.onInitCallbacks.get(identifier);\n    if (!callbacks) {\n      return;\n    }\n    for (const callback of callbacks) {\n      try {\n        callback(instance, identifier);\n      } catch {\n        // ignore errors in the onInit callback\n      }\n    }\n  }\n\n  private getOrInitializeService({\n    instanceIdentifier,\n    options = {}\n  }: {\n    instanceIdentifier: string;\n    options?: Record<string, unknown>;\n  }): NameServiceMapping[T] | null {\n    let instance = this.instances.get(instanceIdentifier);\n    if (!instance && this.component) {\n      instance = this.component.instanceFactory(this.container, {\n        instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\n        options\n      });\n      this.instances.set(instanceIdentifier, instance);\n      this.instancesOptions.set(instanceIdentifier, options);\n\n      /**\n       * Invoke onInit listeners.\n       * Note this.component.onInstanceCreated is different, which is used by the component creator,\n       * while onInit listeners are registered by consumers of the provider.\n       */\n      this.invokeOnInitCallbacks(instance, instanceIdentifier);\n\n      /**\n       * Order is important\n       * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\n       * makes `isInitialized()` return true.\n       */\n      if (this.component.onInstanceCreated) {\n        try {\n          this.component.onInstanceCreated(\n            this.container,\n            instanceIdentifier,\n            instance\n          );\n        } catch {\n          // ignore errors in the onInstanceCreatedCallback\n        }\n      }\n    }\n\n    return instance || null;\n  }\n\n  private normalizeInstanceIdentifier(\n    identifier: string = DEFAULT_ENTRY_NAME\n  ): string {\n    if (this.component) {\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n    } else {\n      return identifier; // assume multiple instances are supported before the component is provided.\n    }\n  }\n\n  private shouldAutoInitialize(): boolean {\n    return (\n      !!this.component &&\n      this.component.instantiationMode !== InstantiationMode.EXPLICIT\n    );\n  }\n}\n\n// undefined should be passed to the service factory for the default instance\nfunction normalizeIdentifierForFactory(identifier: string): string | undefined {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\n\nfunction isComponentEager<T extends Name>(component: Component<T>): boolean {\n  return component.instantiationMode === InstantiationMode.EAGER;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Provider } from './provider';\nimport { Component } from './component';\nimport { Name } from './types';\n\n/**\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\n */\nexport class ComponentContainer {\n  private readonly providers = new Map<string, Provider<Name>>();\n\n  constructor(private readonly name: string) {}\n\n  /**\n   *\n   * @param component Component being added\n   * @param overwrite When a component with the same name has already been registered,\n   * if overwrite is true: overwrite the existing component with the new component and create a new\n   * provider with the new component. It can be useful in tests where you want to use different mocks\n   * for different tests.\n   * if overwrite is false: throw an exception\n   */\n  addComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      throw new Error(\n        `Component ${component.name} has already been registered with ${this.name}`\n      );\n    }\n\n    provider.setComponent(component);\n  }\n\n  addOrOverwriteComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      // delete the existing provider from the container, so we can register the new component\n      this.providers.delete(component.name);\n    }\n\n    this.addComponent(component);\n  }\n\n  /**\n   * getProvider provides a type safe interface where it can only be called with a field name\n   * present in NameServiceMapping interface.\n   *\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\n   * themselves.\n   */\n  getProvider<T extends Name>(name: T): Provider<T> {\n    if (this.providers.has(name)) {\n      return this.providers.get(name) as unknown as Provider<T>;\n    }\n\n    // create a Provider for a service that hasn't registered with Firebase\n    const provider = new Provider<T>(name, this);\n    this.providers.set(name, provider as unknown as Provider<Name>);\n\n    return provider as Provider<T>;\n  }\n\n  getProviders(): Array<Provider<Name>> {\n    return Array.from(this.providers.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type LogLevelString =\n  | 'debug'\n  | 'verbose'\n  | 'info'\n  | 'warn'\n  | 'error'\n  | 'silent';\n\nexport interface LogOptions {\n  level: LogLevelString;\n}\n\nexport type LogCallback = (callbackParams: LogCallbackParams) => void;\n\nexport interface LogCallbackParams {\n  level: LogLevelString;\n  message: string;\n  args: unknown[];\n  type: string;\n}\n\n/**\n * A container for all of the Logger instances\n */\nexport const instances: Logger[] = [];\n\n/**\n * The JS SDK supports 5 log levels and also allows a user the ability to\n * silence the logs altogether.\n *\n * The order is a follows:\n * DEBUG < VERBOSE < INFO < WARN < ERROR\n *\n * All of the log types above the current log level will be captured (i.e. if\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\n * `VERBOSE` logs will not)\n */\nexport enum LogLevel {\n  DEBUG,\n  VERBOSE,\n  INFO,\n  WARN,\n  ERROR,\n  SILENT\n}\n\nconst levelStringToEnum: { [key in LogLevelString]: LogLevel } = {\n  'debug': LogLevel.DEBUG,\n  'verbose': LogLevel.VERBOSE,\n  'info': LogLevel.INFO,\n  'warn': LogLevel.WARN,\n  'error': LogLevel.ERROR,\n  'silent': LogLevel.SILENT\n};\n\n/**\n * The default log level\n */\nconst defaultLogLevel: LogLevel = LogLevel.INFO;\n\n/**\n * We allow users the ability to pass their own log handler. We will pass the\n * type of log, the current log level, and any other arguments passed (i.e. the\n * messages that the user wants to log) to this function.\n */\nexport type LogHandler = (\n  loggerInstance: Logger,\n  logType: LogLevel,\n  ...args: unknown[]\n) => void;\n\n/**\n * By default, `console.debug` is not displayed in the developer console (in\n * chrome). To avoid forcing users to have to opt-in to these logs twice\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\n * logs to the `console.log` function.\n */\nconst ConsoleMethod = {\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.VERBOSE]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error'\n};\n\n/**\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\n * messages on to their corresponding console counterparts (if the log method\n * is supported by the current log level)\n */\nconst defaultLogHandler: LogHandler = (instance, logType, ...args): void => {\n  if (logType < instance.logLevel) {\n    return;\n  }\n  const now = new Date().toISOString();\n  const method = ConsoleMethod[logType as keyof typeof ConsoleMethod];\n  if (method) {\n    console[method as 'log' | 'info' | 'warn' | 'error'](\n      `[${now}]  ${instance.name}:`,\n      ...args\n    );\n  } else {\n    throw new Error(\n      `Attempted to log a message with an invalid logType (value: ${logType})`\n    );\n  }\n};\n\nexport class Logger {\n  /**\n   * Gives you an instance of a Logger to capture messages according to\n   * Firebase's logging scheme.\n   *\n   * @param name The name that the logs will be associated with\n   */\n  constructor(public name: string) {\n    /**\n     * Capture the current instance for later use\n     */\n    instances.push(this);\n  }\n\n  /**\n   * The log level of the given Logger instance.\n   */\n  private _logLevel = defaultLogLevel;\n\n  get logLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  set logLevel(val: LogLevel) {\n    if (!(val in LogLevel)) {\n      throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\n    }\n    this._logLevel = val;\n  }\n\n  // Workaround for setter/getter having to be the same type.\n  setLogLevel(val: LogLevel | LogLevelString): void {\n    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n  }\n\n  /**\n   * The main (internal) log handler for the Logger instance.\n   * Can be set to a new function in internal package code but not by user.\n   */\n  private _logHandler: LogHandler = defaultLogHandler;\n  get logHandler(): LogHandler {\n    return this._logHandler;\n  }\n  set logHandler(val: LogHandler) {\n    if (typeof val !== 'function') {\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n    }\n    this._logHandler = val;\n  }\n\n  /**\n   * The optional, additional, user-defined log handler for the Logger instance.\n   */\n  private _userLogHandler: LogHandler | null = null;\n  get userLogHandler(): LogHandler | null {\n    return this._userLogHandler;\n  }\n  set userLogHandler(val: LogHandler | null) {\n    this._userLogHandler = val;\n  }\n\n  /**\n   * The functions below are all based on the `console` interface\n   */\n\n  debug(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n  }\n  log(...args: unknown[]): void {\n    this._userLogHandler &&\n      this._userLogHandler(this, LogLevel.VERBOSE, ...args);\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n  }\n  info(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\n    this._logHandler(this, LogLevel.INFO, ...args);\n  }\n  warn(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\n    this._logHandler(this, LogLevel.WARN, ...args);\n  }\n  error(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\n    this._logHandler(this, LogLevel.ERROR, ...args);\n  }\n}\n\nexport function setLogLevel(level: LogLevelString | LogLevel): void {\n  instances.forEach(inst => {\n    inst.setLogLevel(level);\n  });\n}\n\nexport function setUserLogHandler(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  for (const instance of instances) {\n    let customLogLevel: LogLevel | null = null;\n    if (options && options.level) {\n      customLogLevel = levelStringToEnum[options.level];\n    }\n    if (logCallback === null) {\n      instance.userLogHandler = null;\n    } else {\n      instance.userLogHandler = (\n        instance: Logger,\n        level: LogLevel,\n        ...args: unknown[]\n      ) => {\n        const message = args\n          .map(arg => {\n            if (arg == null) {\n              return null;\n            } else if (typeof arg === 'string') {\n              return arg;\n            } else if (typeof arg === 'number' || typeof arg === 'boolean') {\n              return arg.toString();\n            } else if (arg instanceof Error) {\n              return arg.message;\n            } else {\n              try {\n                return JSON.stringify(arg);\n              } catch (ignored) {\n                return null;\n              }\n            }\n          })\n          .filter(arg => arg)\n          .join(' ');\n        if (level >= (customLogLevel ?? instance.logLevel)) {\n          logCallback({\n            level: LogLevel[level].toLowerCase() as LogLevelString,\n            message,\n            args,\n            type: instance.name\n          });\n        }\n      };\n    }\n  }\n}\n"],"names":["CONSTANTS","assert","assertion","message","assertionError","Error","stringToByteArray","str","out","p","i","length","c","charCodeAt","base64","byteToCharMap_","charToByteMap_","byteToCharMapWebSafe_","charToByteMapWebSafe_","ENCODED_VALS_BASE","ENCODED_VALS","this","ENCODED_VALS_WEBSAFE","HAS_NATIVE_SUPPORT","atob","encodeByteArray","input","webSafe","Array","isArray","init_","byteToCharMap","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","push","join","encodeString","btoa","decodeString","bytes","pos","c1","String","fromCharCode","c2","u","c3","byteArrayToString","decodeStringToByteArray","charToByteMap","charAt","byte4","base64Encode","utf8Bytes","base64urlEncodeWithoutPadding","replace","base64Decode","e","console","error","deepCopy","value","deepExtend","undefined","target","source","Object","constructor","Date","getTime","prop","hasOwnProperty","getUA","navigator","isMobileCordova","window","test","isReactNative","isNodeSdk","isIndexedDBAvailable","indexedDB","validateIndexedDBOpenable","Promise","resolve","reject","preExist","DB_CHECK_NAME","request","self","open","onsuccess","result","close","deleteDatabase","onupgradeneeded","onerror","getDefaultsFromGlobal","global","getGlobal","__FIREBASE_DEFAULTS__","getDefaults","process","defaultsJsonString","JSON","parse","getDefaultsFromEnvVariable","document","match","cookie","decoded","getDefaultsFromCookie","info","getDefaultEmulatorHostnameAndPort","productName","host","emulatorHosts","getDefaultEmulatorHost","separatorIndex","lastIndexOf","port","parseInt","substring","getDefaultAppConfig","config","Deferred","promise","wrapCallback","callback","catch","createMockUserToken","token","projectId","uid","project","iat","sub","user_id","payload","iss","aud","exp","auth_time","firebase","sign_in_provider","identities","stringify","alg","type","FirebaseError","code","customData","super","setPrototypeOf","prototype","captureStackTrace","ErrorFactory","create","service","serviceName","errors","fullCode","template","data","PATTERN","_","key","replaceTemplate","fullMessage","jsonEval","decode","header","claims","signature","parts","split","isValidFormat","isAdmin","contains","obj","call","safeGet","isEmpty","map","fn","contextObj","res","deepEqual","a","b","aKeys","keys","bKeys","k","includes","aProp","bProp","isObject","thing","querystring","querystringParams","params","entries","forEach","arrayVal","encodeURIComponent","Sha1","blockSize","pad_","reset","chain_","inbuf_","total_","compress_","buf","offset","W","W_","t","f","d","update","lengthMinusBlock","n","buf_","inbuf","digest","totalBits","j","errorPrefix","fnName","argName","high","stringLength","getModularInstance","_delegate","registerVersion","SDK_VERSION","DOMStorageWrapper","domStorage_","set","removeItem","prefixedName_","setItem","get","storedVal","getItem","remove","name","prefix_","toString","MemoryStorage","cache_","createStoragefor","domStorageName","domStorage","PersistentStorage","SessionStorage","logClient","Logger","LUIDGenerator","id","sha1","sha1Bytes","buildLogMessage_","arg","apply","logger","firstLog_","enableLogging","logger_","persistent","logLevel","LogLevel","log","bind","varArgs","logWrapper","prefix","fatal","warn","isInvalidJSONNumber","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","MIN_NAME","MAX_NAME","nameCompare","aAsInt","tryParseInt","bAsInt","stringCompare","requireKey","ObjectToUniqueKey","sort","splitStringBySize","segsize","len","dataSegs","each","doubleToIEEE754String","v","bias","s","ln","Infinity","Math","abs","pow","min","floor","LN2","round","bits","reverse","hexByteString","hexByte","substr","toLowerCase","INTEGER_REGEXP_","RegExp","INTEGER_32_MIN","INTEGER_32_MAX","intVal","exceptionGuard","setTimeout","stack","setTimeoutNonBlocking","time","timeout","Deno","unrefTimer","AppCheckTokenProvider","appName_","appCheckProvider","appCheck","getImmediate","optional","then","getToken","forceRefresh","addTokenChangeListener","listener","addTokenListener","notifyForInvalidToken","FirebaseAuthTokenProvider","firebaseOptions_","authProvider_","auth_","onInit","auth","addAuthTokenListener","removeTokenChangeListener","removeAuthTokenListener","errorMessage","EmulatorTokenProvider","accessToken","PROTOCOL_VERSION","FORGE_DOMAIN_RE","WEBSOCKET","LONG_POLLING","RepoInfo","secure","namespace","webSocketOnly","nodeAdmin","persistenceKey","includeNamespaceInQueryParams","_host","_domain","indexOf","internalHost","isCacheableHost","isCustomHost","newHost","toURLString","protocol","query","repoInfoConnectionURL","repoInfo","connURL","repoInfoNeedsQueryParam","pairs","StatsCollection","incrementCounter","amount","counters_","collections","reporters","statsManagerGetCollection","hashString","PacketReceiver","onMessage_","closeAfter","responseNum","closeAfterResponse","onClose","currentResponseNum","handleResponse","requestNum","pendingResponses","toProcess","FIREBASE_LONGPOLL_START_PARAM","FIREBASE_LONGPOLL_CLOSE_COMMAND","BrowserPollConnection","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","log_","stats_","urlFn","onMessage","onDisconnect","curSegmentNum","onDisconnect_","myPacketOrderer","isClosed_","connectTimeoutTimer_","onClosed_","readyState","called","wrappedFn","body","addEventListener","attachEvent","executeWhenDOMReady","scriptTagHolder","FirebaseIFrameScriptHolder","args","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","clearTimeout","everConnected_","password","sendNewPolls","pN","urlParams","random","uniqueCallbackIdentifier","location","hostname","connectURL","addTag","start","startLongPoll","addDisconnectPingFrame","static","forceAllow_","forceDisallow_","createElement","href","Windows","UI","markConnectionHealthy","shutdown_","myDisconnFrame","removeChild","send","dataStr","bytesSent","base64data","MAX_URL_DATA_SIZE","enqueueSegment","pw","src","style","display","appendChild","bytesReceived","commandCB","onMessageCB","outstandingRequests","Set","currentSerial","myIFrame","createIFrame_","script","domain","iframeContents","doc","write","iframe","contentWindow","contentDocument","alive","innerHTML","myID","myPW","newRequest_","size","pendingSegs","theURL","curDataString","theSeg","shift","seg","ts","addLongPollTag_","segnum","totalsegs","url","serial","add","doNewRequest","delete","keepaliveTimeout","loadCB","doNodeLongPoll","newScript","async","onload","onreadystatechange","rstate","parentNode","WebSocketImpl","MozWebSocket","WebSocket","WebSocketConnection","connectionURL_","options","device","headers","platform","env","proxy","origin","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","userAgent","oldAndroidRegex","oldAndroidMatch","parseFloat","isInMemoryStorage","appendFrame_","frames","totalFrames","fullMess","jsonMess","handleNewFrameCount_","frameCount","extractFrameCount_","isNaN","mess","resetKeepAlive","remainingData","sendString_","keepaliveTimer","clearInterval","setInterval","TransportManager","initTransports_","ALL_TRANSPORTS","IS_TRANSPORT_INITIALIZED","globalTransportInitialized_","isWebSocketsAvailable","isSkipPollConnection","previouslyFailed","transports_","transports","transport","initialTransport","upgradeTransport","Connection","repoInfo_","applicationId_","appCheckToken_","authToken_","onReady_","onKill_","state_","transportManager_","start_","conn","conn_","nextTransportId_","primaryResponsesRequired_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","isHealthy_","healthyTimeoutMS","healthyTimeout_","connectionCount","everConnected","onConnectionLost_","onSecondaryConnectionLost_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","sendRequest","dataMsg","msg","sendData_","tryCleanupConnection","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","pendingDataMessages","proceedWithUpgrade_","onControl_","onDataMessage_","onPrimaryResponse_","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","version","h","sessionId","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","closeConnections_","reason","ServerActions","put","pathString","onComplete","hash","merge","refreshAuthToken","refreshAppCheckToken","onDisconnectPut","onDisconnectMerge","onDisconnectCancel","reportStats","stats","EventEmitter","allowedEvents_","trigger","eventType","listeners_","listeners","context","on","validateEventType_","eventData","getInitialEvent","off","splice","find","et","OnlineMonitor","online_","currentlyOnline","Path","pathOrString","pieceNum","pieces_","copyTo","pieceNum_","newEmptyPath","pathGetFront","path","pathGetLength","pathPopFront","pathGetBack","pathSlice","begin","slice","pathParent","pieces","pathChild","childPathObj","childPieces","pathIsEmpty","newRelativePath","outerPath","innerPath","outer","inner","pathCompare","left","right","leftKeys","rightKeys","cmp","pathEquals","other","pathContains","ValidationPath","errorPrefix_","parts_","byteLength_","max","validationPathCheckValid","validationPath","validationPathToErrorString","VisibilityMonitor","hidden","visibilityChange","visible_","visible","RECONNECT_MIN_DELAY","PersistentConnection","onDataUpdate_","onConnectStatus_","onServerInfoUpdate_","authTokenProvider_","appCheckTokenProvider_","authOverride_","nextPersistentConnectionId_","listens","Map","getInstance","onVisible_","onOnline_","action","onResponse","curReqNum","requestNumber_","r","connected_","realtime_","requestCBHash_","initConnection_","deferred","outstandingGet","_path","q","_queryObject","outstandingGets_","outstandingGetCount_","index","sendGet_","listen","currentHashFn","tag","queryId","_queryIdentifier","has","_queryParams","isDefault","loadsAllData","listenSpec","hashFn","sendListen_","req","status","warnOnListenWarnings_","removeListen_","warnings","indexSpec","getIndex","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","maxReconnectDelay_","tryAppCheck","authMethod","requestData","cred","invalidAuthTokenCount_","onAuthRevoked_","invalidAppCheckTokenCount_","onAppCheckRevoked_","unlisten","sendUnlisten_","queryObj","sendOnDisconnect_","onDisconnectRequestQueue_","response","putInternal","outstandingPuts_","outstandingPutCount_","sendPut_","queued","errorReason","reqNum","onDataPush_","onListenRevoked_","onSecurityDebugPacket_","lastConnectionEstablishedTime_","handleTimestamp_","firstConnection_","sendConnectStats_","restoreState_","scheduleConnect_","establishConnectionTimer_","establishConnection_","reconnectDelay_","online","onRealtimeDisconnect_","cancelSentTransactions_","shouldReconnect_","lastConnectionAttemptTime_","timeSinceLastConnectAttempt","reconnectDelay","onDataMessage","onReady","nextConnectionId_","canceled","connection","closeFn","sendRequestFn","forceTokenRefresh_","all","interrupt","interruptReasons_","resume","delta","serverTimeOffset","normalizedPathString","statusCode","explanation","securityDebugCallback_","queries","values","clientName","NamedNode","node","Index","getCompare","compare","indexedValueChanged","oldNode","newNode","oldWrapped","newWrapped","minPost","MIN","__EMPTY_NODE","KeyIndex","val","isDefinedOn","maxPost","makePost","indexValue","KEY_INDEX","SortedMapIterator","startKey","comparator","isReverse_","resultGenerator_","nodeStack_","getNext","pop","hasNext","peek","LLRBNode","color","RED","SortedMap","EMPTY_NODE","copy","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","fixUp_","removeMin_","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","nr","checkMaxDepth_","blackDepth","check_","comparator_","root_","BLACK","getPredecessorKey","rightParent","getIterator","resultGenerator","getIteratorFrom","getReverseIteratorFrom","getReverseIterator","NAME_ONLY_COMPARATOR","NAME_COMPARATOR","MAX_NODE","priorityHashText","priority","validatePriorityNode","priorityNode","isLeafNode","getPriority","__childrenNodeConstructor","nodeFromJSON","LeafNode","value_","priorityNode_","updatePriority","newPriorityNode","getImmediateChild","childName","getChild","hasChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","exportFormat","getValue","lazyHash_","toHash","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","equals","PRIORITY_INDEX","aPriority","bPriority","indexCmp","LOG_2","Base12Num","num","current_","mask","bits_","nextBitIsOne","buildChildSet","childList","keyFn","mapSortFn","buildBalancedTree","low","namedNode","middle","root","base12","buildPennant","chunkSize","childTree","attachPennant","pennant","isOne","buildFrom12Array","_defaultIndexMap","fallbackObject","IndexMap","indexes_","indexSet_","Default","indexKey","sortedMap","hasIndex","indexDefinition","addIndex","existingChildren","sawIndexedValue","iter","Wrap","newIndex","next","indexName","newIndexSet","newIndexes","addToIndexes","indexedChildren","existingSnap","newChildren","removeFromIndexes","ChildrenNode","children_","indexMap_","child","newIndexMap","newPriority","newImmediateChild","numKeys","allIntegerKeys","array","childHash","idx","resolveIndex_","predecessor","getFirstChildName","getFirstChild","getLastChildName","getLastChild","wrappedNode","startPost","iterator","endPost","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","defineProperties","MAX","setPriorityMaxNode","json","childData","children","childrenHavePriority","childSet","sortedChildSet","setNodeFromJSON","PathIndex","indexPath_","extractChild","snap","aChild","bChild","valueNode","VALUE_INDEX","PUSH_CHARS","nextPushId","lastPushTime","lastRandChars","now","duplicateTime","timeStampChars","changeValue","snapshotNode","changeChildAdded","changeChildRemoved","changeChildChanged","oldSnap","IndexedFilter","index_","newChild","affectedPath","optChangeAccumulator","oldChild","trackChildChange","updateFullNode","newSnap","filtersNodes","getIndexedFilter","RangedFilter","indexedFilter_","startPost_","getStartPost_","endPost_","getEndPost_","getStartPost","getEndPost","matches","filtered","hasStart","startName","getIndexStartName","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","LimitedFilter","rangedFilter_","limit_","getLimit","reverse_","isViewFromLeft","fullLimitUpdateChild_","inRange","indexCompare","foundStartPost","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","oldChildSnap","nextChild","getChildAfterChild","compareNext","newEventCache","QueryParams","startSet_","hasStartAfter","startAfterSet_","hasEndBefore","endBeforeSet_","viewFrom_","indexStartValue_","startNameSet_","indexStartName_","endSet_","indexEndValue_","endNameSet_","indexEndName_","hasLimit","limitSet_","hasAnchoredLimit","queryParamsToRestQueryStringParameters","queryParams","qs","orderBy","queryParamsGetQueryObject","viewFrom","ReadonlyRestClient","listenId","getListenId_","thisListen","listens_","queryStringParameters","restRequest_","xhr","XMLHttpRequest","responseText","SnapshotHolder","rootNode_","getNode","updateSnapshot","newSnapshotNode","newSparseSnapshotTree","sparseSnapshotTreeRemember","sparseSnapshotTree","clear","sparseSnapshotTreeForEachTree","prefixPath","func","tree","sparseSnapshotTreeForEachChild","StatsListener","collection_","newStats","last_","stat","StatsReporter","collection","server_","statsListener_","reportStats_","reportedStats","haveStatsToReport","statsToReport_","OperationType","newOperationSourceServerTaggedQuery","fromUser","fromServer","tagged","AckUserWrite","affectedTree","revert","ACK_USER_WRITE","operationForChild","subtree","ListenComplete","LISTEN_COMPLETE","Overwrite","OVERWRITE","Merge","MERGE","CacheNode","node_","fullyInitialized_","filtered_","isFullyInitialized","isFiltered","isCompleteForPath","isCompleteForChild","EventGenerator","query_","eventGeneratorGenerateEventsForType","eventGenerator","events","changes","registrations","eventCache","filteredChanges","filter","change","aWrapped","bWrapped","eventGeneratorCompareChanges","materializedChange","prevName","eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","newViewCache","serverCache","viewCacheUpdateEventSnap","viewCache","eventSnap","complete","viewCacheUpdateServerSnap","serverSnap","viewCacheGetCompleteEventSnap","viewCacheGetCompleteServerSnap","emptyChildrenSingleton","ImmutableTree","childPath","findRootMostMatchingPathAndValue","relativePath","predicate","childExistingPathAndValue","findRootMostValueAndPath","toSet","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","foreachOnPath","foreachOnPath_","currentRelativePath","foreach","foreach_","foreachChild","CompoundWrite","writeTree_","compoundWriteAddWrite","compoundWrite","rootmost","rootMostPath","newWriteTree","compoundWriteAddWrites","updates","newWrite","compoundWriteRemoveWrite","empty","compoundWriteHasCompleteWrite","compoundWriteGetCompleteNode","compoundWriteGetCompleteChildren","compoundWriteChildCompoundWrite","shadowingNode","compoundWriteIsEmpty","compoundWriteApply","applySubtreeWrite","writeTree","priorityWrite","writeTreeChildWrites","newWriteTreeRef","writeTreeGetWrite","writeId","allWrites","record","writeTreeRemoveWrite","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","writeTreeRecordContainsPath_","visibleWrites","writeTreeLayerTree_","writeTreeDefaultFilter_","lastWriteId","writeTreeResetTree_","writeRecord","writes","treeRoot","writePath","deepNode","writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","subMerge","writeTreeRefCalcCompleteEventCache","writeTreeRef","writeTreeRefCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","writeTreeCalcCompleteEventChildren","writeTreeRefCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","writeTreeCalcEventCacheAfterServerOverwrite","writeTreeRefShadowingWrite","writeTreeShadowingWrite","writeTreeRefCalcIndexedSlice","completeServerData","toIterate","nodes","writeTreeCalcIndexedSlice","writeTreeRefCalcCompleteChild","existingServerCache","writeTreeCalcCompleteChild","writeTreeRefChild","ChildChangeAccumulator","changeMap","oldChange","oldType","getChanges","from","NO_COMPLETE_CHILD_SOURCE","getCompleteChild","WriteTreeCompleteChildSource","writes_","viewCache_","optCompleteServerCache_","serverNode","viewProcessorApplyOperation","viewProcessor","oldViewCache","operation","writesCache","completeCache","accumulator","filterServerNode","overwrite","viewProcessorApplyUserOverwrite","viewProcessorApplyServerOverwrite","changedChildren","curViewCache","viewProcessorCacheHasChild","viewProcessorApplyUserMerge","viewProcessorApplyServerMerge","ackUserWrite","serverChildren","viewProcessorRevertUserWrite","ackPath","mergePath","serverCachePath","viewProcessorAckUserWrite","oldServerNode","viewProcessorGenerateEventCacheAfterServerEvent","viewProcessorListenComplete","isLeafOrEmpty","oldCompleteSnap","viewProcessorMaybeAddValueEvent","changePath","oldEventSnap","completeEventChildren","completeNode","oldEventNode","updatedPriority","childChangePath","newEventChild","eventChildUpdate","changedSnap","oldServerSnap","newServerCache","serverFilter","newServerNode","viewProcessorApplyMerge","viewMergeTree","childMergeTree","isUnknownDeepMerge","View","initialViewCache","indexFilter","processor_","newViewProcessor","initialServerCache","initialEventCache","eventGenerator_","viewGetCompleteServerCache","view","cache","viewIsEmpty","eventRegistrations_","viewRemoveEventRegistration","eventRegistration","cancelError","cancelEvents","maybeEvent","createCancelEvent","remaining","existing","hasAnyCallback","concat","viewApplyOperation","viewGenerateEventsForChanges_","eventRegistrations","moves","eventGeneratorGenerateEventsForChanges","referenceConstructor","SyncPoint","views","syncPointIsEmpty","syncPoint","syncPointApplyOperation","optCompleteServerCache","syncPointGetView","serverCacheComplete","eventCacheComplete","syncPointAddEventRegistration","viewAddEventRegistration","initialChanges","viewGetInitialEvents","syncPointRemoveEventRegistration","removed","hadCompleteView","syncPointHasCompleteView","viewQueryId","_repo","syncPointGetQueryViews","syncPointGetCompleteServerCache","syncPointViewForQuery","syncPointGetCompleteView","syncPointViewExistsForQuery","syncTreeNextQueryTag_","SyncTree","listenProvider_","syncPointTree_","tagToQueryMap","queryToTagMap","syncTreeApplyUserOverwrite","syncTree","newData","writeTreeAddOverwrite","pendingWriteTree_","syncTreeApplyOperationToSyncPoints_","syncTreeApplyUserMerge","writeTreeAddMerge","changeTree","fromObject","syncTreeAckUserWrite","needToReevaluate","syncTreeApplyServerOverwrite","syncTreeRemoveEventRegistration","skipListenerDedup","maybeSyncPoint","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","syncTreeCollectDistinctViewsForSubTree_","newQuery","syncTreeCreateListenerForView_","startListening","syncTreeQueryForListening_","syncTreeTagForQuery","defaultTag","stopListening","queryToRemove","tagToRemove","syncTreeMakeQueryKey_","syncTreeRemoveTags_","syncTreeApplyTaggedQueryOverwrite","queryKey","syncTreeQueryKeyForTag_","syncTreeParseQueryKey_","queryPath","syncTreeApplyTaggedOperation_","syncTreeAddEventRegistration","skipSetupListener","foundAncestorDefaultView","pathToSyncPoint","sp","childSyncPoint","viewAlreadyExists","syncTreeGetNextQueryTag_","syncTreeSetupListener_","syncTreeCalcCompleteEventCache","syncTreeApplyOperationHelper_","syncPointTree","syncTreeApplyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","viewGetServerCache","syncTreeApplyTaggedListenComplete","syncTreeApplyListenComplete","toUpperCase","errorForServerCode","splitIndex","maybeChildSyncPoint","childMap","_key","childViews","removedQuery","removedQueryKey","removedQueryTag","queriesToStop","childQueries","queryToStop","ExistingValueProvider","DeferredValueProvider","syncTree_","path_","resolveDeferredLeafValue","existingVal","serverValues","resolveScalarDeferredValue","resolveComplexDeferredValue","op","unused","existingNode","resolveDeferredValueTree","resolveDeferredValue","resolveDeferredValueSnapshot","rawPri","leafNode","childrenNode","Tree","parent","childCount","treeSubTree","pathObj","treeGetValue","treeSetValue","treeUpdateParents","treeHasChildren","treeForEachChild","treeForEachDescendant","includeSelf","childrenFirst","treeGetPath","childEmpty","treeIsEmpty","childExists","treeUpdateChild","INVALID_KEY_REGEX_","INVALID_PATH_REGEX_","MAX_LEAF_SIZE_","isValidKey","isValidPathString","isValidPriority","validateFirebaseDataArg","validateFirebaseData","errorPrefixFxn","hasDotValue","hasActualChild","validationPathPush","last","validationPathPop","validateFirebaseMergeDataArg","mergePaths","curPath","prevPath","validateFirebaseMergePaths","validatePathString","argumentName","validateWritablePath","validateUrl","parsedUrl","isValidRootPathString","EventQueue","eventQueueQueueEvents","eventQueue","eventDataList","currList","getPath","eventLists_","eventQueueRaiseEventsAtPath","eventQueueRaiseQueuedEventsMatchingPredicate","eventPath","eventQueueRaiseEventsForChangedPath","changedPath","recursionDepth_","sentAll","eventList","eventListRaise","eventFn","getEventRunner","INTERRUPT_REASON","Repo","forceRestClient_","appCheckProvider_","eventQueue_","transactionQueueTree_","repoStart","repo","appId","authOverride","search","isMerge","repoOnDataUpdate","repoOnConnectStatus","persistentConnection_","connectStatus","repoUpdateInfo","repoOnServerInfoUpdate","statsReporter_","creatorFunction","statsManagerGetOrCreateReporter","infoData_","infoSyncTree_","infoEvents","serverSyncTree_","repoServerTime","repoGenerateServerValues","dataUpdateCount","interceptServerDataCallback_","taggedChildren","raw","syncTreeApplyTaggedQueryMerge","taggedSnap","syncTreeApplyServerMerge","repoRerunTransactions","repoLog","resolvedOnDisconnectTree","resolved","repoAbortTransactions","repoRunOnDisconnectEvents","repoGetNextWriteId","nextWriteId_","repoSetWithPriority","newVal","newNodeUnresolved","success","clearEvents","repoCallOnCompleteCallback","repoRemoveEventCallbackForQuery","repoInterrupt","repoGetLatestState","excludeSets","repoSendReadyTransactions","repoPruneCompletedTransactionsBelowNode","queue","repoBuildTransactionQueue","every","transaction","repoSendTransactionQueue","setsToIgnore","txn","currentWriteId","latestState","snapToSend","latestHash","retryCount","currentOutputSnapshotRaw","dataToSend","pathToSend","callbacks","currentOutputSnapshotResolved","unwatcher","abortReason","rootMostTransactionNode","repoGetAncestorTransactionNode","abortTransaction","currentNode","currentInputSnapshot","newDataNode","oldWriteId","newNodeResolved","applyLocally","repoRerunTransactionQueue","transactionNode","transactionQueue","repoAggregateTransactionQueuesForNode","order","nodeQueue","to","treeForEachAncestor","repoAbortTransactionsOnNode","lastSent","parseRepoInfo","dataURL","parseDatabaseURL","scheme","subdomain","colonInd","slashInd","questionMarkInd","pathStringDecoded","piece","decodeURIComponent","decodePath","queryString","results","segment","kv","decodeQuery","hostWithoutPort","dotInd","DataEvent","snapshot","ref","getEventType","exportVal","CancelEvent","CallbackContext","snapshotCallback","cancelCallback","onValue","expDataSnapshot","previousChildName","onCancel","hasCancelCallback","userCallback","QueryImpl","_orderByCalled","ReferenceImpl","isEqual","sameRepo","samePath","sameQueryIdentifier","toJSON","pathToUrlEncodedString","parentPath","DataSnapshot","_node","_index","childRef","exists","hasChildren","db","_checkNotDeleted","_root","thennablePushRef","pushRef","childrenToMerge","changedKey","changedValue","repoUpdate","ValueEventRegistration","callbackContext","ChildEventRegistration","eventToCheck","cancelCallbackOrListenOptions","onlyOnce","onceCallback","dataSnapshot","container","repoAddEventCallbackForQuery","syncPointSetReferenceConstructor","syncTreeSetReferenceConstructor","repos","useRestClient","repoManagerApplyEmulatorSettings","tokenProvider","repoManagerDatabaseFromApp","app","authProvider","dbUrl","databaseURL","isEmulator","dbEmulatorHost","authTokenProvider","OWNER","appRepos","repoManagerCreateRepo","Database","_repoInternal","_instanceStarted","_rootInternal","_delete","appName","repoManagerDeleteRepo","apiName","getDatabase","getApp","_getProvider","identifier","emulator","connectDatabaseEmulator","mockUserToken","simpleListen","echo","onEcho","variant","setSDKVersion","_registerComponent","Component","instanceIdentifier","getProvider","setMultipleInstances","_slicedToArray","arr","arrayWithHoles","_i","Symbol","_s","_e","_x","_r","_arr","_n","_d","done","err","unsupportedIterableToArray","nonIterableRest","_console","_len","arguments","alreadyWarned","warnOnce","_len2","_key2","loadNamespaces","i18n","ns","cb","isInitialized","initialized","oldI18nextHasLoadedNamespace","lng","languages","fallbackLng","lastLng","loadNotPending","l","loadState","services","backendConnector","state","bindI18n","backend","isLanguageChangingTo","hasResourceBundle","resources","partialBundledLanguages","hasLoadedNamespace","isNewerI18next","ignoreJSONStructure","precheck","i18nInstance","ownKeys","object","enumerableOnly","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","enumerable","_objectSpread","_defineProperty","getOwnPropertyDescriptors","defineProperty","usePrevious","ignore","useRef","useEffect","current","useTranslation","props","i18nFromProps","_ref","useContext","I18nContext","i18nFromContext","defaultNSFromContext","defaultNS","getI18n","reportNamespaces","ReportNamespaces","notReadyT","retNotReady","ready","react","wait","i18nOptions","useSuspense","keyPrefix","namespaces","addUsedNamespaces","initializedStoreOnce","getT","getFixedT","nsMode","_useState","useState","_useState2","setT","joinedNS","previousJoinedNS","isMounted","bindI18nStore","boundReset","store","isInitial","ret","idbProxyableTypes","cursorAdvanceMethods","cursorRequestMap","WeakMap","transactionDoneMap","transactionStoreNamesMap","transformCache","reverseTransformCache","idbProxyTraps","receiver","IDBTransaction","objectStoreNames","objectStore","wrap","wrapFunction","IDBDatabase","IDBCursor","advance","continue","continuePrimaryKey","unwrap","storeNames","tx","transformCachableValue","removeEventListener","DOMException","cacheDonePromiseForTransaction","IDBObjectStore","IDBIndex","some","Proxy","IDBRequest","promisifyRequest","newValue","readMethods","writeMethods","cachedMethods","getMethod","targetFuncName","useIndex","isWrite","method","storeName","oldTraps","PlatformLoggerServiceImpl","getPlatformInfoString","getProviders","provider","component","getComponent","isVersionServiceProvider","library","logString","DEFAULT_ENTRY_NAME","PLATFORM_LOG_STRING","_apps","_components","_addComponent","addComponent","debug","componentName","heartbeatController","triggerHeartbeat","ERRORS","ERROR_FACTORY","FirebaseAppImpl","_options","_config","_name","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","_container","checkDestroyed","isDeleted","_isDeleted","initializeApp","rawConfig","existingApp","ComponentContainer","newApp","libraryKeyOrName","libraryMismatch","versionMismatch","warning","STORE_NAME","dbPromise","getDbPromise","blocked","upgrade","blocking","terminated","openPromise","event","oldVersion","newVersion","openDB","createObjectStore","originalErrorMessage","writeHeartbeatsToIndexedDB","heartbeatObject","computeKey","idbGetError","MAX_HEADER_BYTES","HeartbeatServiceImpl","_storage","HeartbeatStorageImpl","_heartbeatsCachePromise","read","_heartbeatsCache","agent","date","getUTCDateString","lastSentHeartbeatDate","heartbeats","singleDateHeartbeat","hbTimestamp","valueOf","heartbeatsToSend","unsentEntries","heartbeatsCache","maxSize","heartbeatEntry","hb","dates","countBytes","extractHeartbeatsForHeader","headerString","toISOString","_canUseIndexedDBPromise","runIndexedDBEnvironmentCheck","readHeartbeatsFromIndexedDB","heartbeatsObject","existingHeartbeatsObject","instanceFactory","instantiationMode","setInstantiationMode","mode","multipleInstances","setServiceProps","serviceProps","setInstanceCreatedCallback","onInstanceCreated","Provider","instances","instancesDeferred","instancesOptions","onInitCallbacks","normalizedIdentifier","normalizeInstanceIdentifier","shouldAutoInitialize","instance","getOrInitializeService","setComponent","isComponentEager","instanceDeferred","clearInstance","INTERNAL","isComponentSet","getOptions","initialize","opts","existingCallbacks","existingInstance","invokeOnInitCallbacks","_a","providers","addOrOverwriteComponent","levelStringToEnum","DEBUG","VERBOSE","INFO","WARN","ERROR","SILENT","defaultLogLevel","ConsoleMethod","defaultLogHandler","logType","_logLevel","TypeError","setLogLevel","logHandler","_logHandler","userLogHandler","_userLogHandler"],"sourceRoot":""}