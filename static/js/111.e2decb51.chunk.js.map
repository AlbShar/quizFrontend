{"version":3,"file":"static/js/111.e2decb51.chunk.js","mappings":"wIAEA,MAAMA,E,QAAeC,GAAAA,MAAc;;;;;;;;;;;;;;;;;;mCCA5B,MAAMC,E,QAAaD,GAAAA,IAAY;;;;eCO/B,MAAME,EAAO,IAA2C,IAA1C,SAAEC,EAAQ,YAAEC,GAAwB,EACvD,OAAO,SAACH,EAAU,CAACI,MAAOD,EAAY,SAAED,GAAsB,C,oGCFzD,MAAMG,EAAS,IAAmD,IAAlD,KAAEC,EAAI,SAAEC,GAAuB,EACpD,MAAM,EAAEC,IAAMC,EAAAA,EAAAA,KAEd,OACE,SAAC,EAAAC,EAAY,CAACC,KAAK,SAASJ,SAAUA,EAAS,SAC5CC,EAAEF,IACU,E,cCZnB,MAAMM,EAAkBC,CAAAA,SAAAA,aAAAA,WAAAA,gBAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,GAAYC,6BAC9BC,EAAmBF,CAAAA,SAAAA,aAAAA,WAAAA,gBAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,GAAYG,8BAC/BC,EAAkBJ,CAAAA,SAAAA,aAAAA,WAAAA,gBAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,qBAAAA,EAAAA,cAAAA,GAAYK,6BA0CpC,EA/BqBC,UACnB,IACE,GAAIP,GAAmBG,EAAkB,CACvC,MAAMK,QAA4BC,EAAAA,GAAAA,KAChCT,EACAG,EACAO,EACAL,GAGF,GAAsB,OAAlBG,EAASd,KACX,OAAO,EAEP,MAAM,IAAIiB,MACP,gCAA+BH,EAASI,qBAAqBJ,EAASd,OAG7E,CACE,MAAM,IAAIiB,MAAO,sCAUrB,CARE,MAAOE,GAOP,OANIA,aAAaF,MACfG,QAAQC,MAAO,4CAA2CF,KAE1DC,QAAQC,MAAM,mBAAoBF,IAG7B,CACT,G,cCzCK,MAAMG,EAAc7B,EAAAA,GAAAA,KAAa;;;;;;;EAS3B8B,EAAgB9B,EAAAA,GAAAA,OAAe;;;ECc5C,EAhBc,IAAwD,IAAvD,OAAE+B,EAAM,KAAEC,EAAI,KAAEpB,EAAI,YAAEqB,EAAW,KAAE1B,GAAc,EAC9D,OACE,UAACuB,EAAa,YACZ,SAACD,EAAW,CAACK,QAAQ,OAAM,SAAE3B,KAC7B,SAAC,KAAK,CACJK,KAAMA,EACNoB,KAAMA,EACNG,UAAU,QACVF,YAAaA,EACbG,SAAUL,KAEZ,SAAC,KAAY,CAACI,UAAU,QAAQH,KAAMA,EAAMK,UAAU,UACxC,E,cCnBpB,MA6BA,EA7BwB,KACtB,MAAMC,EAAiC,IAIhCC,EAAuBC,IAA0BC,EAAAA,EAAAA,UAEtD,MAmBF,OAbAC,EAAAA,EAAAA,YAAU,KAHRJ,EAAW,GAAGK,OAIK,GAElB,KAEHD,EAAAA,EAAAA,YAAU,KACR,MAAME,EAAUC,YAAW,IAAML,EAAuB,OAAO,KAE/D,MAAO,KACLM,aAAaF,EAAQ,CACtB,GACA,CAACL,IAEG,CAAEA,wBAAuBC,yBAAwBT,OAxBxCgB,IACdT,EAAWU,KAAKD,EAAyB,EAuBqB,EC1BrDE,EAAW,IAA4B,IAA3B,KAAEjB,EAAI,MAAEkB,EAAK,KAAE3C,GAAM,EAC5C,MAAM4C,EAAkB,CAAC,EAkBzB,OAjBKnB,EAEMA,EAAKoB,OAAS,EACvBD,EAAOnB,KAAO,6NACLA,EAAKoB,OAAS,KACvBD,EAAOnB,KAAO,iKAJdmB,EAAOnB,KAAO,gEAOXzB,IACH4C,EAAO5C,KAAO,oIAGX2C,EAEO,2CAA2CG,KAAKH,KAC1DC,EAAOD,MAAQ,kHAFfC,EAAOD,MAAQ,qGAIVC,CAAM,ECnBFG,EAAmBtD,EAAAA,GAAAA,GAAW;;;;EAM9BuD,EAAiBvD,EAAAA,GAAAA,GAAW;;;EAK5B8B,EAAgB9B,EAAAA,GAAAA,OAAe;;;ECX5C,ECgBiB,KACf,MAAM,EAAES,IAAMC,EAAAA,EAAAA,GAAe,GAAI,CAC/B8C,UAAW,sBAEP,sBAAEjB,EAAqB,uBAAEC,EAAsB,OAAET,GACrD0B,IAEIC,EAA2B,CAC/B,CACEnD,KAAME,EAAE,QACRG,KAAM,OACNqB,YAAaxB,EAAE,oBAAsB,cACrCuB,KAAM,QAER,CACEzB,KAAM,QACNK,KAAM,QACNqB,YAAaxB,EAAE,oBAAsB,cACrCuB,KAAM,SAER,CACEzB,KAAME,EAAE,WACRG,KAAM,WACNqB,YAAaxB,EAAE,uBAAyB,cACxCuB,KAAM,SAIV,OACE,SAAC,KAAM,CACL2B,cAAe,CAAE3B,KAAM,GAAIkB,MAAO,GAAI3C,KAAM,IAC5C0C,SAAUA,EACVW,SAAUxC,MAAOG,EAAO,KAAmC,IAAlC,UAAEsC,EAAS,cAAEC,GAAe,QACjBC,EAAaxC,IAG7CsC,IACAC,GAAc,GACdtB,GAAuB,IAEvBA,GAAuB,EACzB,EACA,SAED,QAAC,aAAEwB,GAAc,SAChB,UAAC,KAAI,WACFN,EAAWO,KAAI,CAACC,EAAOC,KACtB,mBAAC,EAAK,IAAKD,EAAOE,IAAKD,EAAOpC,OAAQA,OAExC,SAAC,EAAa,WACe,IAA1BQ,GACC,SAACe,EAAgB,gLAGW,IAA1Bf,GACF,SAACgB,EAAc,6TAGb,QAEN,SAACjD,EAAM,CAACC,KAAME,EAAE,WAAYD,SAAUwD,MACjC,GAEF,E,cC/Eb,MAAMK,EAAWrE,EAAAA,GAAAA,EAAU;;;;;;;;;EAWrBsE,EAAgBtE,EAAAA,GAAAA,OAAe;;;;;;;EAS/BuE,EAAUvE,EAAAA,GAAAA,CAAS;;;;;;;;;;;ECpBzB,ECMiB,KACf,MAAM,EAAES,IAAMC,EAAAA,EAAAA,GAAe,GAAI,CAC/B8C,UAAW,mBAEb,OACE,SAAC,IAAI,WACH,SAAC,IAAS,WACR,UAACc,EAAa,YACZ,gCACE,SAACD,EAAQ,UAAE5D,EAAE,YACb,SAAC8D,EAAO,UAAE9D,EAAE,cAEd,8BACE,SAAC,EAAQ,YAIV,C","sources":["UI/button/button.Styled.ts","components/main/main.Styled.ts","components/main/main.tsx","UI/button/button.tsx","modules/userForm/api/sendEmail.ts","modules/userForm/UI/styles/input.Styled.ts","modules/userForm/UI/input.tsx","modules/userForm/hooks/useHandleInputs.ts","modules/userForm/helpers/validate.ts","modules/userForm/userForm/userForm.Styled.ts","modules/userForm/index.ts","modules/userForm/userForm/userForm.tsx","pages/feedback/feedback.Styled.ts","pages/feedback/index.ts","pages/feedback/feedback.tsx"],"sourcesContent":["import styled from 'styled-components';\n\nconst StyledButton = styled.button`\n  padding: 8px 33px;\n  background-color: #585aff;\n  border: none;\n  font: var(--font-button);\n  text-transform: uppercase;\n  cursor: pointer;\n  color: white;\n  text-decoration: none;\n  border-radius: 7px;\n\n  &:disabled {\n    opacity: 0.5;\n  }\n\n  @media screen and (min-width: 767.8px) {\n    padding: 12px 80px;\n  }\n`;\n\nexport { StyledButton };\n","import styled from 'styled-components';\n\nexport const StyledMain = styled.main`\n  flex: 1 1 auto;\n  width: 100%;\n  background-color: var(--color-white);\n`;\n","import { ReactNode, CSSProperties } from 'react';\n\nimport { StyledMain } from './main.Styled';\n\ntype MainProps = {\n  children: ReactNode;\n  customStyle?: CSSProperties\n};\n\nexport const Main = ({ children, customStyle }: MainProps) => {\n  return <StyledMain style={customStyle}>{children}</StyledMain>;\n};\n","import { useTranslation } from 'react-i18next';\n\nimport { StyledButton } from 'UI/button/button.Styled';\n\ntype ButtonProps = {\n  text: string;\n  disabled: boolean;\n};\nexport const Button = ({ text, disabled }: ButtonProps): JSX.Element => {\n  const { t } = useTranslation();\n\n  return (\n    <StyledButton type='submit' disabled={disabled}>\n      {t(text)}\n    </StyledButton>\n  );\n};\n","import emailjs from '@emailjs/browser';\n\nconst YOUR_SERVICE_ID = process.env.REACT_APP_EMAILJS_SERVICE_ID;\nconst YOUR_TEMPLATE_ID = process.env.REACT_APP_EMAILJS_TEMPLATE_ID;\nconst YOUR_PUBLIC_KEY = process.env.REACT_APP_EMAILJS_PUBLIC_KEY;\n\ntype TValues = {\n  [key in string]: string;\n};\n\ntype TResponse = {\n  status: number;\n  text: string;\n};\n\nconst sendEmailApi = async (values: TValues): Promise<boolean> => {\n  try {\n    if (YOUR_SERVICE_ID && YOUR_TEMPLATE_ID) {\n      const response: TResponse = await emailjs.send(\n        YOUR_SERVICE_ID,\n        YOUR_TEMPLATE_ID,\n        values,\n        YOUR_PUBLIC_KEY,\n      );\n\n      if (response.text === 'OK') {\n        return true;\n      } else {\n        throw new Error(\n          `EmailJSResponse has status - ${response.status} and text - ${response.text}`,\n        );\n      }\n    } else {\n      throw new Error(`Check values of API KEYS in EMAILJS`);\n    }\n  } catch (e) {\n    if (e instanceof Error) {\n      console.error(`There is an error in sendEmailApi file - ${e}`);\n    } else {\n      console.error('Unexpected error', e);\n    }\n\n    return false;\n  }\n};\n\nexport default sendEmailApi;\n","import styled from 'styled-components';\n\nexport const StyledLabel = styled.label`\n  position: absolute;\n  top: -10px;\n  left: 16px;\n  z-index: 2;\n  background-color: white;\n  color: #81868c;\n`;\n\nexport const StyledArticle = styled.article`\n  position: relative;\n  margin: 0 0 30px 0;\n`;\n","import { Field, ErrorMessage } from 'formik';\n\nimport { StyledArticle, StyledLabel } from './styles/input.Styled';\nimport './styles/input.style.css';\n\nimport type { TDataInput } from '../types';\n\ntype TInput = TDataInput & { setRef: (elem: HTMLInputElement) => void };\n\nconst Input = ({ setRef, name, type, placeholder, text }: TInput) => {\n  return (\n    <StyledArticle>\n      <StyledLabel htmlFor='name'>{text}</StyledLabel>\n      <Field\n        type={type}\n        name={name}\n        className='input'\n        placeholder={placeholder}\n        innerRef={setRef}\n      />\n      <ErrorMessage className='error' name={name} component='div' />\n    </StyledArticle>\n  );\n};\n\nexport default Input;\n","import { useState, useEffect } from 'react';\n\nconst useHandleInputs = () => {\n  const refsInputs: HTMLInputElement[] = [];\n  const setRef = (elem: HTMLInputElement) => {\n    refsInputs.push(elem as HTMLInputElement);\n  };\n  const [isSuccessSendingEmail, setSuccessSendingEmail] = useState<\n    boolean | null\n  >(null);\n\n  const onFocusFirstInput = () => {\n    refsInputs[0].focus();\n  };\n\n  useEffect(() => {\n    onFocusFirstInput();\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    const timerId = setTimeout(() => setSuccessSendingEmail(null), 7000);\n\n    return () => {\n      clearTimeout(timerId);\n    };\n  }, [isSuccessSendingEmail]);\n\n  return { isSuccessSendingEmail, setSuccessSendingEmail, setRef };\n};\n\nexport default useHandleInputs;\n","import type { TErrors } from '../types';\n\nexport const validate = ({ name, email, text }) => {\n  const errors: TErrors = {};\n  if (!name) {\n    errors.name = 'Введите имя';\n  } else if (name.length < 2) {\n    errors.name = 'Имя не должно содержать меньше 2-х символов';\n  } else if (name.length > 30) {\n    errors.name = 'Максимальная длина - 30 символов';\n  }\n\n  if (!text) {\n    errors.text = 'Введите текст сообщения';\n  }\n\n  if (!email) {\n    errors.email = 'Введите свою почту';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(email)) {\n    errors.email = 'Введите корректный E-mail';\n  }\n  return errors;\n};\n","import styled from 'styled-components';\n\nexport const StyledDivSuccess = styled.div`\n  color: green;\n  margin: 10px 0;\n  font: var(--font-text7);\n`;\n\nexport const StyledDivError = styled.div`\n  font: var(--font-text7);\n  color: red;\n`;\n\nexport const StyledArticle = styled.article`\n  position: relative;\n  margin: 0 0 30px 0;\n`;\n","import UserForm from './userForm/userForm';\n\nexport default UserForm;\n","import { useTranslation } from 'react-i18next';\nimport { Formik, Form } from 'formik';\n\nimport { Button } from 'UI/button';\n\nimport sendEmailApi from '../api/sendEmail';\nimport Input from '../UI/input';\nimport useHandleInputs from '../hooks/useHandleInputs';\nimport { validate } from '../helpers/validate';\n\nimport {\n  StyledArticle,\n  StyledDivSuccess,\n  StyledDivError,\n} from './userForm.Styled';\n\nimport type { TDataInput } from '../types';\n\nconst UserForm = () => {\n  const { t } = useTranslation('', {\n    keyPrefix: 'modules.userForm',\n  });\n  const { isSuccessSendingEmail, setSuccessSendingEmail, setRef } =\n    useHandleInputs();\n\n  const dataInputs: TDataInput[] = [\n    {\n      text: t('name'),\n      type: 'name',\n      placeholder: t('placeholderName') || 'placeholder',\n      name: 'name',\n    },\n    {\n      text: 'Email',\n      type: 'email',\n      placeholder: t('placeholderName') || 'placeholder',\n      name: 'email',\n    },\n    {\n      text: t('message'),\n      type: 'textarea',\n      placeholder: t('placeholderMessage') || 'placeholder',\n      name: 'text',\n    },\n  ];\n\n  return (\n    <Formik\n      initialValues={{ name: '', email: '', text: '' }}\n      validate={validate}\n      onSubmit={async (values, { resetForm, setSubmitting }) => {\n        const isDataSent: boolean = await sendEmailApi(values);\n\n        if (isDataSent) {\n          resetForm();\n          setSubmitting(false);\n          setSuccessSendingEmail(true);\n        } else {\n          setSuccessSendingEmail(false);\n        }\n      }}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          {dataInputs.map((input, index) => (\n            <Input {...input} key={index} setRef={setRef} />\n          ))}\n          <StyledArticle>\n            {isSuccessSendingEmail === true ? (\n              <StyledDivSuccess>\n                Поздравляю, письмо отправлено!\n              </StyledDivSuccess>\n            ) : isSuccessSendingEmail === false ? (\n              <StyledDivError>\n                Письмо не удалось отправить! Повторите попытку чуть позже\n              </StyledDivError>\n            ) : null}\n          </StyledArticle>\n          <Button text={t('btnText')} disabled={isSubmitting} />\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default UserForm;\n","import styled from 'styled-components';\n\nconst StyledH1 = styled.h1`\n  font: var(--font-title4);\n  color: black;\n  padding: 0;\n  margin: 20px 0;\n\n  @media screen and (min-width: 459.8px) {\n    font: var(--font-title2);\n  }\n`;\n\nconst StyledSection = styled.section`\n  background-color: white;\n  padding: 18px 8px 16px 8px;\n\n  @media screen and (min-width: 459.8px) {\n    padding: 40px;\n  }\n`;\n\nconst StyledP = styled.p`\n  font: var(--font-little-text-regular);\n  color: black;\n  padding: 0;\n  margin: 0 0 20px 0;\n  text-align: left;\n\n  @media screen and (min-width: 459.8px) {\n    font: var(--font-text-regular);\n    margin: 16px 0;\n  }\n`;\n\nexport { StyledH1, StyledSection, StyledP };\n","import Feedback from './feedback';\n\nexport default Feedback;\n","import { useTranslation } from 'react-i18next';\n\nimport { Container } from 'components/container';\nimport UserForm from 'modules/userForm';\nimport { Main } from 'components/main';\n\nimport { StyledH1, StyledSection, StyledP } from './feedback.Styled';\n\nconst Feedback = () => {\n  const { t } = useTranslation('', {\n    keyPrefix: 'pages.feedback',\n  });\n  return (\n    <Main>\n      <Container>\n        <StyledSection>\n          <article>\n            <StyledH1>{t('title')}</StyledH1>\n            <StyledP>{t('text')}</StyledP>\n          </article>\n          <article>\n            <UserForm />\n          </article>\n        </StyledSection>\n      </Container>\n    </Main>\n  );\n};\n\nexport default Feedback;\n"],"names":["StyledButton","styled","StyledMain","Main","children","customStyle","style","Button","text","disabled","t","useTranslation","S","type","YOUR_SERVICE_ID","process","REACT_APP_EMAILJS_SERVICE_ID","YOUR_TEMPLATE_ID","REACT_APP_EMAILJS_TEMPLATE_ID","YOUR_PUBLIC_KEY","REACT_APP_EMAILJS_PUBLIC_KEY","async","response","emailjs","values","Error","status","e","console","error","StyledLabel","StyledArticle","setRef","name","placeholder","htmlFor","className","innerRef","component","refsInputs","isSuccessSendingEmail","setSuccessSendingEmail","useState","useEffect","focus","timerId","setTimeout","clearTimeout","elem","push","validate","email","errors","length","test","StyledDivSuccess","StyledDivError","keyPrefix","useHandleInputs","dataInputs","initialValues","onSubmit","resetForm","setSubmitting","sendEmailApi","isSubmitting","map","input","index","key","StyledH1","StyledSection","StyledP"],"sourceRoot":""}