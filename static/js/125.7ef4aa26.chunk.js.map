{"version":3,"file":"static/js/125.7ef4aa26.chunk.js","mappings":"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","sources":["UI/Feedback/Feedback.tsx","UI/LinkBtn/styles/LinkBtn.Styled.ts","UI/LinkBtn/LinkBtn.tsx","api/getDataFromDB.ts","api/getTotalQuestionsNumb.ts","components/Footer/styles/Footer.Styled.ts","components/Footer/Footer.tsx","assets/images/logo.svg","components/Logo/Logo.Styled.ts","components/Logo/Logo.tsx","modules/CallToAction/api/getInfoQuestions.ts","modules/CallToAction/icons/clock.svg","modules/CallToAction/icons/bar-chart.svg","modules/CallToAction/icons/help-circle.svg","modules/CallToAction/components/InfoTest/InfoTest.styled.ts","modules/CallToAction/components/InfoTest/InfoTest.tsx","assets/images/arrowDownLarge.svg","modules/CallToAction/UI/DropdownProfession.tsx","modules/CallToAction/CallToAction/CallToAction.styled.ts","modules/CallToAction/index.ts","modules/CallToAction/CallToAction/CallToAction.tsx","modules/CallToAction/helpers/createIdUser.ts","assets/images/person_sitting.svg","components/AboutUs/styles/AboutUs.Styled.ts","components/AboutUs/AboutUs.tsx","assets/images/img.svg","assets/images/curve_line.svg","components/BenefitInfo/BenefitInfo.Styled.ts","components/BenefitInfo/BenefitInfo.tsx","assets/images/testRule1.svg","assets/images/testRule2.svg","assets/images/testRule3.svg","assets/images/testRule4.svg","components/TestRules/TestRules.Styled.ts","components/TestRules/TestRules.tsx","assets/images/curve_line2.svg","components/ResultsInfo/ResultsInfo.Styled.ts","components/ResultsInfo/ResultsInfo.tsx","pages/Homepage/Home.tsx","pages/Homepage/index.ts","styles/Main.Styled.ts"],"sourcesContent":["import { CSSProperties } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport './link.css';\r\n\r\ntype FeedbackProps = {\r\n  onClickCloseBtn?: () => void;\r\n  style?: CSSProperties;\r\n};\r\n\r\nexport const Feedback = ({ onClickCloseBtn, style }: FeedbackProps) => {\r\n  const { t } = useTranslation('', {\r\n    keyPrefix: \"UI.feedback\"\r\n  });\r\n\r\n  return (\r\n    <Link to='/feedback' className='link' onClick={onClickCloseBtn} style={style}>\r\n      {t('text')}\r\n    </Link>\r\n  );\r\n};\r\n\r\n","import styled from 'styled-components';\r\n\r\ntype TButtonsProps = {\r\n  pageName: 'results' | 'quiz' | 'home';\r\n};\r\n\r\nconst StyledButton = styled.button<TButtonsProps>`\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 3px 10px;\r\n  border: none;\r\n  font: var(--font-button);\r\n  text-transform: uppercase;\r\n  cursor: pointer;\r\n  color: ${({ pageName }) =>\r\n    pageName === 'home' ? 'var(--color-black)' : 'var(--color-white)'};\r\n  text-decoration: none;\r\n  border-radius: 3px;\r\n  background-color: ${({ pageName }) =>\r\n    pageName === 'home' ? 'var(--color-white)' : 'var(--color-purple)'};\r\n  width: 100%;\r\n  height: 54px;\r\n\r\n  &:disabled {\r\n    background-color: ${({ pageName }) =>\r\n      pageName === 'home' ? 'transparent' : 'var(--color-purple)'};\r\n    border: 2px solid var(--color-purple);\r\n    cursor: not-allowed;\r\n    color: var(--color-white);\r\n    opacity: ${({ pageName }) => (pageName === 'home' ? '1' : '0.3')};\r\n  }\r\n\r\n  @media screen and (min-width: 767.8px) {\r\n    padding: 16px 18px;\r\n  }\r\n`;\r\n\r\nconst StyledButtonQuiz = styled(StyledButton)`\r\n  position: absolute;\r\n  right: 0;\r\n  top: 0;\r\n`;\r\n\r\nconst StyledButtonBack = styled.button`\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 0 5px;\r\n  border: none;\r\n  background-color: transparent;\r\n  gap: 8px;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst StyledArticle = styled.article`\r\n  position: relative;\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  gap: 40px;\r\n  margin-top: 32px;\r\n  max-width: 540px;\r\n  padding: 5px;\r\n\r\n  @media screen and (min-width: 768.8px) {\r\n    max-width: 100%;\r\n  }\r\n`;\r\n\r\nconst StyledImg = styled.img`\r\n  width: 24px;\r\n  height: 24px;\r\n`;\r\n\r\nconst StyledSpan = styled.span`\r\n  font: var(--font-button);\r\n  color: var(--color-back-btn);\r\n  text-transform: uppercase;\r\n`;\r\n\r\nexport {\r\n  StyledButton,\r\n  StyledArticle,\r\n  StyledButtonBack,\r\n  StyledImg,\r\n  StyledSpan,\r\n  StyledButtonQuiz,\r\n};\r\n","import { Link } from 'react-router-dom';\r\nimport { MouseEvent } from 'react';\r\nimport './styles/link.css';\r\n\r\nimport { StyledButton } from './styles/LinkBtn.Styled';\r\n\r\ntype LinkBtnProps = {\r\n  text: string;\r\n  id?: string;\r\n  pageTo: string;\r\n  onClick?: (e: MouseEvent) => void;\r\n  isDisabledBtn?: boolean;\r\n};\r\n\r\nexport const LinkBtn = ({\r\n  text,\r\n  pageTo,\r\n  onClick,\r\n  id,\r\n  isDisabledBtn,\r\n}: LinkBtnProps): JSX.Element => {\r\n  const matchResult = pageTo.match(/\\/(\\w+)/);\r\n  let pageName: 'results' | 'quiz' | 'home' = 'home';\r\n\r\n   if (matchResult && matchResult[1]) {\r\n      pageName = matchResult[1] as 'results' | 'quiz';\r\n   }  \r\n\r\n  return (\r\n    <Link className='btn__link' to={pageTo} onClick={onClick} id={id}>\r\n      <StyledButton disabled={isDisabledBtn} pageName={pageName}>\r\n        {text}\r\n      </StyledButton>\r\n    </Link>\r\n  );\r\n};\r\n\r\n","import { ref } from 'firebase/database';\r\nimport { onValue } from 'firebase/database';\r\n\r\n\r\nimport db from '../config/firebase/firebaseConfig';\r\n\r\n\r\n\r\nconst getDataFromDB = async <TData>(url: string) => {\r\n\r\n  return await new Promise(function (resolve, reject) {\r\n    onValue(\r\n      ref(db, url),\r\n      (snapshot) => {\r\n        const value: TData = snapshot.val();\r\n\r\n        if (value) {\r\n          return resolve(value);\r\n        } else {\r\n          reject(\r\n            new Error(\r\n              `Value (${value}) from Firebase Database not found. Check url (${url})`,\r\n            ),\r\n          );\r\n        }\r\n      },\r\n    );\r\n  });\r\n};\r\n\r\nexport { getDataFromDB };\r\n","import { getDataFromDB } from './getDataFromDB';\r\n\r\ntype TotalQuestions = {\r\n  [key: string]: string;\r\n};\r\n\r\nconst transformData = (data: TotalQuestions): number => {\r\n  return Object.entries(data).length;\r\n};\r\n\r\nconst getTotalQuestionsNumb = async (url: string): Promise<number> => {\r\n  try {\r\n    const response = await getDataFromDB<TotalQuestions>(url);\r\n    const data = transformData(response as TotalQuestions);\r\n    return data;\r\n\r\n  } catch (e) {\r\n    console.error(e);\r\n    throw e;\r\n  }\r\n};\r\n\r\nexport { getTotalQuestionsNumb };\r\n","import styled from 'styled-components';\r\n\r\nconst StyledFooter = styled.footer`\r\n  box-sizing: border-box;\r\n  background-color: var(--color-dark);\r\n  padding: 20px 0 170px;\r\n\r\n  @media screen and (min-width: 1299.8px) {\r\n    padding: 34px 0 100px 0;\r\n  }\r\n`;\r\n\r\n\r\nconst StyledUl = styled.ul`\r\n  list-style-type: none;\r\n  padding: 0;\r\n\r\n  @media screen and (min-width: 767.8px) {\r\n    order: 2;\r\n    display: flex;\r\n    justify-content: flex-start;\r\n    gap: 10px;\r\n  }\r\n\r\n  @media screen and (min-width: 1023.8px) {\r\n    margin: 0;\r\n  }\r\n`;\r\n\r\nconst StyledDivProfession = styled.div`\r\n  font: var(--font-text6-regular);\r\n\r\n  @media screen and (min-width: 1023.8px) {\r\n    font: var(--font-text5);\r\n  }\r\n`;\r\n\r\nconst StyledDivName = styled.div`\r\n  font: var(--font-text7);\r\n\r\n  @media screen and (min-width: 1023.8px) {\r\n    font: var(--font-text6);\r\n  }\r\n`;\r\n\r\n\r\nconst StyledLink = styled.a`\r\n  text-decoration: none;\r\n  font: var(--font-text6);\r\n  color: var(--color-white);\r\n  \r\n\r\n  &:visited {\r\n    color: var(--color-white);\r\n  }\r\n\r\n  &:hover {\r\n    color: var(--color-purple);\r\n  }\r\n`;\r\n\r\nconst StyledNav = styled.nav`\r\n  margin: 35px 0 0 0;\r\n  width: 100%;\r\n\r\n  @media screen and (min-width: 1299.8px) {\r\n    margin: 0;\r\n  }\r\n`;\r\n\r\nconst StyledLi = styled.li`\r\n  text-align: left;\r\n\r\n  &:not(:last-child) {\r\n    margin: 0 0 12px 0;\r\n  }\r\n\r\n  @media screen and (min-width: 767.8px) {\r\n    padding: 0px;\r\n    text-align: center;\r\n\r\n    &:not(:last-child) {\r\n      margin: 0;\r\n    }\r\n\r\n    @media screen and (min-width: 1023.8px) {\r\n      &:not(:last-child) {\r\n        margin: 0;\r\n      }\r\n    }\r\n    @media screen and (min-width: 1299.8px) {\r\n      text-align: left;\r\n    }\r\n  }\r\n`;\r\n\r\n\r\nexport {\r\n  StyledFooter,\r\n  StyledLi,\r\n  StyledUl,\r\n  StyledDivProfession,\r\n  StyledDivName,\r\n  StyledLink,\r\n  StyledNav,\r\n};\r\n","import { useTranslation } from 'react-i18next';\r\nimport Grid from '@mui/material/Grid/Grid';\r\n\r\nimport {Feedback} from 'UI/Feedback';\r\nimport {Container} from 'components/Container';\r\nimport {Logo} from 'components/Logo';\r\nimport './styles/footer.css';\r\n\r\nimport {\r\n  StyledFooter,\r\n  StyledLi,\r\n  StyledUl,\r\n  StyledDivProfession,\r\n  StyledDivName,\r\n  StyledLink,\r\n  StyledNav,\r\n} from './styles/Footer.Styled';\r\n\r\nimport type { FooterInfo } from '../../types/types';\r\n\r\nexport const Footer = () => {\r\n  const { t } = useTranslation('', {\r\n    keyPrefix: \"components.footer\"\r\n  });\r\n\r\n  const team: FooterInfo[] = [\r\n    {\r\n      profession: t('Frontend'),\r\n      name: t('firstNameFrontend'),\r\n      link: 'https://t.me/Albert_Sharipov',\r\n    },\r\n    {\r\n      profession: t('Designer'),\r\n      name: t('firstNameDesigner'),\r\n      link: 'https://t.me/lisa_vetta14',\r\n    },\r\n    {\r\n      profession: 'Project manager',\r\n      name: t('firstNamePM'),\r\n      link: 'https://t.me/Nattalia_nat',\r\n    },\r\n  ];\r\n\r\n  const teamOfProject = team.map((item, index) => {\r\n    return (\r\n      <Grid\r\n        key={index + 1}\r\n        item\r\n        xs={index === 0 || index === 2 ? 1.35 : 0.3}\r\n        md={3}\r\n        lg={2}\r\n        xl='auto'\r\n      >\r\n        <StyledLi >\r\n          <StyledLink href={item.link} target='_blank'>\r\n            <StyledDivProfession> {item.profession}</StyledDivProfession>\r\n            <StyledDivName> {item.name}</StyledDivName>\r\n          </StyledLink>\r\n        </StyledLi>\r\n      </Grid>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <StyledFooter>\r\n      <Container>\r\n        <Grid\r\n          container\r\n          columns={{ xs: 2, md: 12, xl: 12 }}\r\n          alignItems='center'\r\n          direction='row'\r\n        >\r\n          <Grid item xs={0.7} md={3} xl={2}>\r\n            <Logo location='footer' />\r\n          </Grid>\r\n          <Grid item xs={1.3} md={6} xl={4}>\r\n            <Grid\r\n              container\r\n              flexDirection='row'\r\n              columns={{ xs: 1.3, md: 6 }}\r\n              rowSpacing={2.5}\r\n            >\r\n              <Grid item xs={0.9} md={3}>\r\n                <Feedback />\r\n              </Grid>\r\n              <Grid item xs={0.3} md={3}>\r\n                <StyledLink href='#header'>{t('textUpLink')}</StyledLink>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item md={12} xl={6}>\r\n            <Grid\r\n              container\r\n              columns={{ xs: 2, md: 12, xl: 6 }}\r\n              justifyContent='center'\r\n              alignItems='center'\r\n            >\r\n              <StyledNav id='team'>\r\n                <StyledUl>\r\n                  <Grid\r\n                    container\r\n                    columns={{ xs: 2, md: 12, xl: 6 }}\r\n                    columnSpacing={{ xs: 3, xl: 5 }}\r\n                    rowSpacing={4}\r\n                  >\r\n                    {teamOfProject}\r\n                  </Grid>\r\n                </StyledUl>\r\n              </StyledNav>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </StyledFooter>\r\n  );\r\n};\r\n\r\n","var _path, _path2, _path3, _path4, _path5, _path6, _path7, _path8, _path9, _path10, _path11;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgLogo(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 139,\n    height: 57,\n    viewBox: \"0 0 139 57\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M9 25H123C131.837 25 139 32.1634 139 41C139 49.8366 131.837 57 123 57H25C16.1634 57 9 49.8366 9 41V25Z\",\n    fill: \"#5557FF\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M25.0277 49.6549C22.8695 49.6549 21.0146 49.2097 19.4628 48.3192C17.92 47.4198 16.7295 46.1696 15.8912 44.5687C15.0618 42.9587 14.6471 41.0924 14.6471 38.9698C14.6471 36.8381 15.0618 34.9718 15.8912 33.3709C16.7295 31.7609 17.92 30.5107 19.4628 29.6203C21.0146 28.7209 22.8695 28.2712 25.0277 28.2712C27.1859 28.2712 29.0364 28.7209 30.5792 29.6203C32.1309 30.5107 33.3215 31.7609 34.1509 33.3709C34.9891 34.9718 35.4083 36.8381 35.4083 38.9698C35.4083 41.0924 34.9891 42.9587 34.1509 44.5687C33.3215 46.1696 32.1309 47.4198 30.5792 48.3192C29.0364 49.2097 27.1859 49.6549 25.0277 49.6549ZM25.0678 44.6766C25.8526 44.6766 26.517 44.4337 27.061 43.9481C27.605 43.4624 28.0197 42.7878 28.3051 41.9244C28.5994 41.0609 28.7465 40.0626 28.7465 38.9293C28.7465 37.778 28.5994 36.7707 28.3051 35.9072C28.0197 35.0438 27.605 34.3692 27.061 33.8835C26.517 33.3979 25.8526 33.155 25.0678 33.155C24.2563 33.155 23.5696 33.3979 23.0078 33.8835C22.4548 34.3692 22.0312 35.0438 21.7369 35.9072C21.4516 36.7707 21.3089 37.778 21.3089 38.9293C21.3089 40.0626 21.4516 41.0609 21.7369 41.9244C22.0312 42.7878 22.4548 43.4624 23.0078 43.9481C23.5696 44.4337 24.2563 44.6766 25.0678 44.6766Z\",\n    fill: \"white\"\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M45.3006 37.4452V49.2636H38.7592V28.541H44.9796V32.3455H45.207C45.6618 31.0774 46.4377 30.0835 47.5346 29.364C48.6315 28.6354 49.938 28.2712 51.4541 28.2712C52.8988 28.2712 54.1518 28.5994 55.213 29.256C56.2832 29.9036 57.1126 30.812 57.7012 31.9813C58.2987 33.1415 58.593 34.4996 58.584 36.0556V49.2636H52.0427V37.3508C52.0516 36.1996 51.7617 35.3001 51.1731 34.6525C50.5935 34.005 49.7864 33.6812 48.7519 33.6812C48.0652 33.6812 47.4588 33.8341 46.9326 34.1399C46.4154 34.4367 46.0141 34.8639 45.7287 35.4215C45.4522 35.9792 45.3095 36.6538 45.3006 37.4452Z\",\n    fill: \"white\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M72.2387 49.6549C70.0894 49.6549 68.2345 49.2276 66.6738 48.3732C65.1221 47.5098 63.9271 46.2821 63.0888 44.6901C62.2594 43.0891 61.8447 41.1868 61.8447 38.9833C61.8447 36.8426 62.2638 34.9718 63.1021 33.3709C63.9404 31.7609 65.1221 30.5107 66.6471 29.6203C68.172 28.7209 69.969 28.2712 72.038 28.2712C73.5006 28.2712 74.8382 28.5005 76.0511 28.9592C77.2639 29.4179 78.3118 30.097 79.1947 30.9964C80.0776 31.8958 80.7642 33.0066 81.2547 34.3288C81.7452 35.6419 81.9905 37.1484 81.9905 38.8483V40.4943H64.1322V36.6628H75.9039C75.895 35.9612 75.73 35.3361 75.409 34.7875C75.0879 34.2388 74.6465 33.8116 74.0847 33.5058C73.5318 33.191 72.8941 33.0336 72.1718 33.0336C71.4405 33.0336 70.785 33.2 70.2053 33.5328C69.6257 33.8566 69.1664 34.3018 68.8275 34.8684C68.4886 35.426 68.3103 36.0601 68.2924 36.7707V40.6697C68.2924 41.5151 68.4574 42.2571 68.7874 42.8957C69.1173 43.5253 69.5855 44.0155 70.192 44.3663C70.7984 44.7171 71.5208 44.8924 72.3591 44.8924C72.9387 44.8924 73.4649 44.8115 73.9375 44.6496C74.4102 44.4877 74.8159 44.2494 75.1548 43.9346C75.4937 43.6198 75.7478 43.233 75.9173 42.7743L81.9236 42.9497C81.6739 44.3078 81.1254 45.4906 80.2782 46.4979C79.4399 47.4963 78.3385 48.2743 76.9741 48.8319C75.6096 49.3806 74.0312 49.6549 72.2387 49.6549Z\",\n    fill: \"white\"\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M23.1408 5.41614V10.7145H9V5.41614H23.1408ZM11.9624 0H19.0985V20.914C19.0985 21.3555 19.1666 21.7136 19.3028 21.9884C19.4487 22.2533 19.6579 22.4446 19.9303 22.5624C20.2027 22.6703 20.5286 22.7243 20.908 22.7243C21.1804 22.7243 21.4674 22.6997 21.769 22.6507C22.0803 22.5918 22.3138 22.5427 22.4695 22.5035L23.5494 27.6989C23.2089 27.797 22.7273 27.9196 22.1046 28.0668C21.4917 28.214 20.7572 28.3072 19.9011 28.3465C18.2277 28.4249 16.7927 28.2287 15.5961 27.7577C14.4092 27.277 13.4996 26.5313 12.8672 25.5206C12.2445 24.51 11.943 23.2394 11.9624 21.7087V0Z\",\n    fill: \"white\"\n  })), _path6 || (_path6 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M37.0184 28.1044C34.6738 28.1044 32.6502 27.6383 30.9477 26.7062C29.2549 25.7642 27.9512 24.4249 27.0367 22.6882C26.1319 20.9417 25.6795 18.8665 25.6795 16.4626C25.6795 14.1274 26.1368 12.0865 27.0513 10.34C27.9658 8.58367 29.2549 7.21982 30.9185 6.24844C32.5821 5.26726 34.5424 4.77667 36.7995 4.77667C38.395 4.77667 39.8543 5.02687 41.1775 5.52727C42.5006 6.02768 43.6437 6.76847 44.6068 7.74966C45.57 8.73085 46.3191 9.94261 46.8542 11.385C47.3893 12.8175 47.6568 14.461 47.6568 16.3154V18.111H28.175V13.9311H41.0169C41.0072 13.1658 40.8272 12.4839 40.477 11.8854C40.1267 11.2868 39.6452 10.8208 39.0323 10.4872C38.4291 10.1438 37.7335 9.97204 36.9454 9.97204C36.1477 9.97204 35.4326 10.1536 34.8002 10.5166C34.1679 10.8698 33.6668 11.3555 33.2972 11.9737C32.9275 12.582 32.7329 13.2737 32.7134 14.0489V18.3023C32.7134 19.2246 32.8934 20.0341 33.2534 20.7307C33.6133 21.4176 34.1241 21.9523 34.7857 22.335C35.4472 22.7176 36.2352 22.909 37.1497 22.909C37.7821 22.909 38.3561 22.8207 38.8717 22.6441C39.3874 22.4674 39.83 22.2074 40.1997 21.864C40.5694 21.5206 40.8467 21.0987 41.0315 20.5983L47.5838 20.7896C47.3114 22.2712 46.7131 23.5615 45.7889 24.6604C44.8744 25.7495 43.6729 26.5982 42.1844 27.2066C40.6959 27.8051 38.9739 28.1044 37.0184 28.1044Z\",\n    fill: \"white\"\n  })), _path7 || (_path7 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M70.9455 12.9009L64.3931 13.0775C64.325 12.6066 64.1402 12.1896 63.8386 11.8265C63.537 11.4537 63.143 11.1642 62.6566 10.9582C62.1798 10.7423 61.6253 10.6344 60.9929 10.6344C60.166 10.6344 59.4607 10.8012 58.8769 11.1348C58.3029 11.4684 58.0208 11.9197 58.0305 12.4888C58.0208 12.9303 58.1959 13.313 58.5559 13.6368C58.9256 13.9606 59.5823 14.2206 60.526 14.4168L64.8455 15.241C67.0831 15.6728 68.7468 16.389 69.8364 17.3898C70.9357 18.3906 71.4903 19.7152 71.5 21.3636C71.4903 22.9139 71.033 24.263 70.1282 25.411C69.2332 26.559 68.0074 27.4519 66.4508 28.0897C64.8942 28.7176 63.1138 29.0316 61.1097 29.0316C57.9089 29.0316 55.3843 28.3693 53.5358 27.0447C51.6971 25.7103 50.6464 23.9245 50.3837 21.6874L57.4322 21.5108C57.5879 22.335 57.9916 22.963 58.6434 23.3947C59.2953 23.8264 60.1271 24.0423 61.1389 24.0423C62.0534 24.0423 62.7976 23.8706 63.3716 23.5272C63.9456 23.1837 64.2375 22.7275 64.2472 22.1584C64.2375 21.6482 64.0137 21.241 63.5759 20.9368C63.1381 20.6228 62.4522 20.3775 61.5183 20.2009L57.6073 19.4503C55.36 19.0382 53.6866 18.2778 52.5873 17.1691C51.4879 16.0505 50.9431 14.6278 50.9529 12.9009C50.9431 11.3899 51.342 10.0996 52.1495 9.03014C52.957 7.95083 54.105 7.12664 55.5935 6.55755C57.082 5.98846 58.838 5.70392 60.8616 5.70392C63.897 5.70392 66.2902 6.34659 68.0414 7.63195C69.7926 8.90749 70.7606 10.6638 70.9455 12.9009Z\",\n    fill: \"white\"\n  })), _path8 || (_path8 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M86.1462 6.69001V11.9884H72.0055V6.69001H86.1462ZM74.9678 1.27386H82.1039V22.1878C82.1039 22.6294 82.172 22.9875 82.3082 23.2622C82.4541 23.5272 82.6633 23.7185 82.9357 23.8362C83.2081 23.9442 83.534 23.9981 83.9134 23.9981C84.1858 23.9981 84.4728 23.9736 84.7744 23.9245C85.0857 23.8657 85.3192 23.8166 85.4749 23.7774L86.5548 28.9727C86.2143 29.0709 85.7327 29.1935 85.1101 29.3407C84.4971 29.4879 83.7626 29.5811 82.9065 29.6203C81.2331 29.6988 79.7982 29.5026 78.6015 29.0316C77.4146 28.5508 76.505 27.8051 75.8726 26.7945C75.25 25.7839 74.9484 24.5132 74.9678 22.9826V1.27386Z\",\n    fill: \"white\"\n  })), _path9 || (_path9 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M25.0277 49.6549C22.8695 49.6549 21.0146 49.2097 19.4628 48.3192C17.92 47.4198 16.7295 46.1696 15.8912 44.5687C15.0618 42.9587 14.6471 41.0924 14.6471 38.9698C14.6471 36.8381 15.0618 34.9718 15.8912 33.3709C16.7295 31.7609 17.92 30.5107 19.4628 29.6203C21.0146 28.7209 22.8695 28.2712 25.0277 28.2712C27.1859 28.2712 29.0364 28.7209 30.5792 29.6203C32.1309 30.5107 33.3215 31.7609 34.1509 33.3709C34.9891 34.9718 35.4083 36.8381 35.4083 38.9698C35.4083 41.0924 34.9891 42.9587 34.1509 44.5687C33.3215 46.1696 32.1309 47.4198 30.5792 48.3192C29.0364 49.2097 27.1859 49.6549 25.0277 49.6549ZM25.0678 44.6766C25.8526 44.6766 26.517 44.4337 27.061 43.9481C27.605 43.4624 28.0197 42.7878 28.3051 41.9244C28.5994 41.0609 28.7465 40.0626 28.7465 38.9293C28.7465 37.778 28.5994 36.7707 28.3051 35.9072C28.0197 35.0438 27.605 34.3692 27.061 33.8835C26.517 33.3979 25.8526 33.155 25.0678 33.155C24.2563 33.155 23.5696 33.3979 23.0078 33.8835C22.4548 34.3692 22.0312 35.0438 21.7369 35.9072C21.4516 36.7707 21.3089 37.778 21.3089 38.9293C21.3089 40.0626 21.4516 41.0609 21.7369 41.9244C22.0312 42.7878 22.4548 43.4624 23.0078 43.9481C23.5696 44.4337 24.2563 44.6766 25.0678 44.6766Z\",\n    fill: \"white\"\n  })), _path10 || (_path10 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M45.3006 37.4452V49.2636H38.7592V28.541H44.9796V32.3455H45.207C45.6618 31.0774 46.4377 30.0835 47.5346 29.364C48.6315 28.6354 49.938 28.2712 51.4541 28.2712C52.8988 28.2712 54.1518 28.5994 55.213 29.256C56.2832 29.9036 57.1126 30.812 57.7012 31.9813C58.2987 33.1415 58.593 34.4996 58.584 36.0556V49.2636H52.0427V37.3508C52.0516 36.1996 51.7617 35.3001 51.1731 34.6525C50.5935 34.005 49.7864 33.6812 48.7519 33.6812C48.0652 33.6812 47.4588 33.8341 46.9326 34.1399C46.4154 34.4367 46.0141 34.8639 45.7287 35.4215C45.4522 35.9792 45.3095 36.6538 45.3006 37.4452Z\",\n    fill: \"white\"\n  })), _path11 || (_path11 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M72.2387 49.6549C70.0894 49.6549 68.2345 49.2276 66.6738 48.3732C65.1221 47.5098 63.9271 46.2821 63.0888 44.6901C62.2594 43.0891 61.8447 41.1868 61.8447 38.9833C61.8447 36.8426 62.2638 34.9718 63.1021 33.3709C63.9404 31.7609 65.1221 30.5107 66.6471 29.6203C68.172 28.7209 69.969 28.2712 72.038 28.2712C73.5006 28.2712 74.8382 28.5005 76.0511 28.9592C77.2639 29.4179 78.3118 30.097 79.1947 30.9964C80.0776 31.8958 80.7642 33.0066 81.2547 34.3288C81.7452 35.6419 81.9905 37.1484 81.9905 38.8483V40.4943H64.1322V36.6628H75.9039C75.895 35.9612 75.73 35.3361 75.409 34.7875C75.0879 34.2388 74.6465 33.8116 74.0847 33.5058C73.5318 33.191 72.8941 33.0336 72.1718 33.0336C71.4405 33.0336 70.785 33.2 70.2053 33.5328C69.6257 33.8566 69.1664 34.3018 68.8275 34.8684C68.4886 35.426 68.3103 36.0601 68.2924 36.7707V40.6697C68.2924 41.5151 68.4574 42.2571 68.7874 42.8957C69.1173 43.5253 69.5855 44.0155 70.192 44.3663C70.7984 44.7171 71.5208 44.8924 72.3591 44.8924C72.9387 44.8924 73.4649 44.8115 73.9375 44.6496C74.4102 44.4877 74.8159 44.2494 75.1548 43.9346C75.4937 43.6198 75.7478 43.233 75.9173 42.7743L81.9236 42.9497C81.6739 44.3078 81.1254 45.4906 80.2782 46.4979C79.4399 47.4963 78.3385 48.2743 76.9741 48.8319C75.6096 49.3806 74.0312 49.6549 72.2387 49.6549Z\",\n    fill: \"white\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgLogo);\nexport default __webpack_public_path__ + \"static/media/logo.1128005e65133553dc6b1dbd41fc739b.svg\";\nexport { ForwardRef as ReactComponent };","import styled from 'styled-components';\r\n\r\n\r\nexport const StyledImg = styled.img`\r\n  width: 94px;\r\n  height: 41px;\r\n  cursor: pointer;\r\n\r\n`;\r\n","import { Link } from 'react-router-dom';\r\n\r\nimport logo from '../../assets/images/logo.svg';\r\n\r\nimport { StyledImg } from './Logo.Styled';\r\n\r\ntype LogoProps = {\r\n  location: string;\r\n  style?: React.CSSProperties;\r\n};\r\nexport const Logo = ({ style }: LogoProps): JSX.Element => {\r\n  return (\r\n    <Link to='/'>\r\n      <StyledImg src={logo} alt='logo' style={style} />\r\n    </Link>\r\n  );\r\n};\r\n\r\n","import { getDataFromDB } from \"../../../api/getDataFromDB\";\r\n\r\ntype Questions = {\r\n  [key in string]: object;\r\n};\r\n\r\nconst transformData = (question: Questions, lang: string): number => {\r\n  const themes = new Set();\r\n  const themesDb = Object.values(question).map(question => question[lang].theme);\r\n\r\n  for (const theme of themesDb) {\r\n    themes.add(theme);\r\n  }\r\n\r\n  return themes.size ;\r\n};\r\n\r\nconst getQuantityThemes = async (url: string, lang: string) => {\r\n try {\r\n   const response = await getDataFromDB<Questions>(url);\r\n  const data = transformData(response as Questions, lang);\r\n\r\n   return data;\r\n } catch (e) {\r\n   console.error(e);\r\n   throw e;\r\n }\r\n};\r\n\r\nexport { getQuantityThemes };\r\n","var _g;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgClock(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 24,\n    height: 24,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"clock-5 1\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector\",\n    d: \"M21 12C21 7.02944 16.9706 3 12 3C7.02944 3 3 7.02944 3 12C3 16.9706 7.02944 21 12 21C16.9706 21 21 16.9706 21 12Z\",\n    stroke: \"white\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector_2\",\n    d: \"M12 12V8\",\n    stroke: \"white\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector_3\",\n    d: \"M16 8L12 12\",\n    stroke: \"white\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgClock);\nexport default __webpack_public_path__ + \"static/media/clock.0a77f6d29e336326f0d849f3cbd9a200.svg\";\nexport { ForwardRef as ReactComponent };","var _g;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgBarChart(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 25,\n    height: 24,\n    viewBox: \"0 0 25 24\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"bar-chart 1\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector\",\n    d: \"M12.3091 20V10\",\n    stroke: \"white\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector_2\",\n    d: \"M18.3091 20V4\",\n    stroke: \"white\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector_3\",\n    d: \"M6.30908 20V16\",\n    stroke: \"white\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgBarChart);\nexport default __webpack_public_path__ + \"static/media/bar-chart.9788ed116eac0494510273d58ad31413.svg\";\nexport { ForwardRef as ReactComponent };","var _g;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgHelpCircle(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 25,\n    height: 24,\n    viewBox: \"0 0 25 24\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"help-circle 1\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector\",\n    d: \"M12.1543 22C17.6771 22 22.1543 17.5228 22.1543 12C22.1543 6.47715 17.6771 2 12.1543 2C6.63145 2 2.1543 6.47715 2.1543 12C2.1543 17.5228 6.63145 22 12.1543 22Z\",\n    stroke: \"white\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector_2\",\n    d: \"M9.24414 9.00008C9.47924 8.33175 9.94329 7.76819 10.5541 7.40921C11.1649 7.05024 11.883 6.91902 12.5813 7.03879C13.2796 7.15857 13.913 7.52161 14.3692 8.06361C14.8255 8.60561 15.0752 9.2916 15.0741 10.0001C15.0741 12.0001 12.0741 13.0001 12.0741 13.0001\",\n    stroke: \"white\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector_3\",\n    d: \"M12.1543 17H12.1643\",\n    stroke: \"white\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgHelpCircle);\nexport default __webpack_public_path__ + \"static/media/help-circle.28fac9b5c3eeaf246dc3857d1a955460.svg\";\nexport { ForwardRef as ReactComponent };","import styled from 'styled-components';\r\n\r\nconst StyledUl = styled.ul`\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  justify-content: space-around;\r\n  box-sizing: border-box;\r\n  list-style-type: none;\r\n  margin: 26px 0 0 0;\r\n  padding: 20px 27px;\r\n  border-radius: 3px;\r\n  background-color: var(--color-gray);\r\n  min-height: 48px;\r\n\r\n  @media screen and (min-width: 767.8px) {\r\n    max-width: 512px;\r\n    padding: 10px 15px;\r\n    flex-direction: row;\r\n    max-height: 58px;\r\n    align-items: center;\r\n  }\r\n\r\n  @media screen and (min-width: 1299.8px) {\r\n    padding: 10px 36px;\r\n  }\r\n`;\r\n\r\nconst StyledImg = styled.img`\r\n  width: 24px;\r\n  height: 24px;\r\n  margin: 0 8px 0 0;\r\n`;\r\n\r\nconst StyledLi = styled.li`\r\n  color: white;\r\n  font: var(--font-little-text-bold);\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n\r\n  &:not(:last-child) {\r\n    margin: 0 0 16px 0;\r\n  }\r\n\r\n  @media screen and (min-width: 767.8px) {\r\n    font: var(--font-text-bold);\r\n\r\n    &:not(:last-child) {\r\n      margin: 0 0 0 0;\r\n    }\r\n\r\n    &:not(:last-child):after {\r\n      color: var(--color-white);\r\n      position: relative;\r\n      content: '/';\r\n      left: 15px;\r\n    }\r\n  }\r\n\r\n  @media screen and (min-width: 1023.8px) {\r\n    &:not(:last-child):after {\r\n      left: 35px;\r\n    }\r\n  }\r\n\r\n  @media screen and (min-width: 1299.8px) {\r\n    &:not(:last-child):after {\r\n      left: 20px;\r\n    }\r\n  }\r\n`;\r\n\r\nexport { StyledUl, StyledImg, StyledLi };\r\n","import { useEffect, useState, useContext } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { getTotalQuestionsNumb } from 'api/getTotalQuestionsNumb';\r\nimport {Spinner} from 'UI/Spinner/Spinner';\r\nimport {ErrorMessage} from 'UI/ErrorMessage/ErrorMessage';\r\nimport {\r\n  ContextLanguage,\r\n  ContextProfession,\r\n} from 'components/Context';\r\n\r\nimport { getQuantityThemes } from '../../api/getInfoQuestions';\r\nimport clock from \"../../icons/clock.svg\";\r\nimport barChart from \"../../icons/bar-chart.svg\";\r\nimport helpCircle from \"../../icons/help-circle.svg\";\r\n\r\nimport { StyledUl, StyledImg, StyledLi } from './InfoTest.styled';\r\n\r\nimport type { InfoTestBlock } from 'types/types';\r\n\r\ntype InfoTestProps = {\r\n  isChooseProfession: boolean;\r\n  setChooseProfession: (item: boolean) => void;\r\n};\r\n\r\nconst InfoTest = ({\r\n  isChooseProfession,\r\n  setChooseProfession,\r\n}: InfoTestProps) => {\r\n  const [profession]: [string, (lang: string) => void] =\r\n    useContext(ContextProfession);\r\n  const [lang, setLang]: [string, (lang: string) => void] =\r\n    useContext(ContextLanguage);\r\n  const [quantityThemes, setQuantityThemes] = useState<number>(0);\r\n  const url = `${profession}/questions`;\r\n\r\n  const updateQuantityThemes = (quantity: number) => {\r\n    setQuantityThemes(quantity);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getQuantityThemes(url, lang).then(updateQuantityThemes);\r\n  }, [profession]);\r\n\r\n  useEffect(() => {\r\n    setChooseProfession(false);\r\n  }, []);\r\n\r\n  const { t } = useTranslation('', {\r\n    keyPrefix: 'modules.callToAction.components.infoTest',\r\n  });\r\n  const [isLoading, setIsLoading] = useState<boolean>(true);\r\n  const [quantityQuestions, setQuantityQuestions] = useState<number>(0);\r\n  const [isError, setIsError] = useState<boolean>(false);\r\n\r\n  const infoTestBlock: InfoTestBlock[] = [\r\n    {\r\n      text: ` ${isChooseProfession ? '~' + quantityQuestions : '0'} ${t(\r\n        'min',\r\n      )}`,\r\n      srcIcon: clock,\r\n      alt: 'icon of clock',\r\n    },\r\n    {\r\n      text: `${isChooseProfession ? quantityQuestions : '0'} ${t('questions')}`,\r\n      srcIcon: helpCircle,\r\n      alt: 'icon of question in circle',\r\n    },\r\n    {\r\n      text: `${isChooseProfession ? quantityThemes : '0'} ${t('block')}`,\r\n      srcIcon: barChart,\r\n      alt: ' icon of bar chart ',\r\n    },\r\n  ];\r\n\r\n  const view = infoTestBlock.map((item, index) => {\r\n    return (\r\n      <StyledLi key={index + 1}>\r\n        <StyledImg src={item.srcIcon} alt={item.alt} />\r\n        <span style={{color: 'var(--color-white)'}}>{item.text}</span>\r\n      </StyledLi>\r\n    );\r\n  });\r\n\r\n  const content = !(isLoading || isError) ? view : null;\r\n  const spinner = isLoading ? (\r\n    <Spinner width={50} height={50} color='#fcfdff' margin='auto' />\r\n  ) : null;\r\n  const error = isError ? <ErrorMessage /> : null;\r\n\r\n  const dataHasLoaded = (numbQuestions) => {\r\n    setIsLoading(false);\r\n    setQuantityQuestions(numbQuestions);\r\n  };\r\n\r\n  const onError = (error) => {\r\n    setIsError(true);\r\n    setIsLoading(false);\r\n    console.error(error);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (profession) {\r\n      const url = `${profession}/questions`;\r\n      getTotalQuestionsNumb(url).then(dataHasLoaded).catch(onError);\r\n    } else {\r\n      setIsLoading(false);\r\n    }\r\n  }, [profession]);\r\n\r\n  return (\r\n    <nav>\r\n      <StyledUl>\r\n        {content} {spinner} {error}\r\n      </StyledUl>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default InfoTest;\r\n","var _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgArrowDownLarge(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 16,\n    height: 9,\n    viewBox: \"0 0 16 9\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1 1L8 8L15 1\",\n    stroke: \"white\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgArrowDownLarge);\nexport default __webpack_public_path__ + \"static/media/arrowDownLarge.5cb9226dd89f16c2e62eb8a7b2afc8b7.svg\";\nexport { ForwardRef as ReactComponent };","import { useState, useContext } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\n// import {Dropdown} from 'UI/Dropdown/Dropdown';\r\nimport { Dropdown } from 'UI/dropdown/Dropdown';\r\nimport { setValueToLocalStorage } from 'helpers/setValueToLocalStorage';\r\nimport { ContextProfession } from 'components/Context';\r\nimport arrowDownLarge from 'assets/images/arrowDownLarge.svg';\r\n\r\ntype DropdownProfessionProps = {\r\n  setChooseProfession: (item: boolean) => void;\r\n};\r\n\r\nconst DropdownProfession = ({\r\n  setChooseProfession,\r\n}: DropdownProfessionProps) => {\r\n  const [, setProfession]: [string, (lang: string) => void] =\r\n    useContext(ContextProfession);\r\n  const { t } = useTranslation('', {\r\n    keyPrefix: 'modules.callToAction.UI.dropdownProfession',\r\n  });\r\n\r\n  const [selected, setSelected] = useState('');\r\n\r\n  const customStyleButton = `\r\n      gap: 10px; \r\n      justify-content: flex-end; \r\n\r\n      @media screen and (min-width: 767.8px) {\r\n        gap: 39px; \r\n        }`;\r\n\r\n  const dataProfessions = {\r\n    'Frontend developer': 'Frontend',\r\n    \"Project Manager\": 'Manager',\r\n  };\r\n  const listProfessions = Object.keys(dataProfessions);\r\n\r\n  const onClickProfession = (item: string) => {\r\n    setValueToLocalStorage('profession', dataProfessions[item]);\r\n    setProfession(dataProfessions[item]);\r\n    setSelected(item);\r\n    setChooseProfession(true)\r\n  };\r\n\r\n  return (\r\n    <Dropdown\r\n      typeFilter='profession'\r\n      selectedFilter={selected || t('textBtn')}\r\n      nameListItems={listProfessions}\r\n      setFilter={onClickProfession}\r\n      srcArrowDown={arrowDownLarge}\r\n    />\r\n  );\r\n};\r\n\r\nexport default DropdownProfession;\r\n","import styled from 'styled-components';\r\n\r\nconst StyledCallToAction = styled.article`\r\n  max-width: 100%;\r\n  background-color: transparent;\r\n  padding: 0;\r\n  margin: 0 0 13px 0;\r\n  border-radius: 7px;\r\n  poisition: relative;\r\n\r\n  @media screen and (min-width: 459.8px) {\r\n    margin: 0 0 32px 0;\r\n  }\r\n\r\n`;\r\n\r\nconst StyledSection = styled.section`\r\n  background-color: var(--color-dark);\r\n\r\n  @media screen and (min-width: 1023.8px) {\r\n    position: relative;\r\n  }\r\n\r\n  @media screen and (min-width: 1023.8px) {\r\n    position: relative;\r\n  }\r\n`;\r\n\r\n\r\n\r\nconst StyledH1 = styled.h1`\r\n  font: var(--font-text2);\r\n  color: var(--color-white);\r\n  padding: 0;\r\n  margin: 0;\r\n  text-align: left;\r\n  padding: 75px 0 0 0;\r\n  line-height: 36px;\r\n\r\n  @media screen and (min-width: 767.8px) {\r\n    padding: 87px 0 0 0;\r\n    font: var(--font-text1);\r\n    line-height: 37.5px;\r\n  }\r\n\r\n  @media screen and (min-width: 1023.8px) {\r\n    line-height: 40px;\r\n    padding: 137px 0 0 0;\r\n  }\r\n`;\r\n\r\nconst StyledH2 = styled.h2`\r\n  font: var(--font-text5);\r\n  color: white;\r\n  text-align: left;\r\n  margin: 24px 0 20px 0;\r\n\r\n  @media screen and (min-width: 767.8px) {\r\n    margin: 40px 0 54px 0;\r\n  }\r\n\r\n  @media screen and (min-width: 1023.8px) {\r\n    font: var(--font-text4);\r\n  }\r\n`;\r\n\r\nconst StyledImg = styled.img`\r\n  transform: translateY(4px);\r\n  margin: 10px 0 0 0;\r\n  width: 285px;\r\n  height: 249px;\r\n\r\n  @media screen and (min-width: 767.8px) {\r\n    width: 578px;\r\n    height: 505px;\r\n  }\r\n\r\n  @media screen and (min-width: 1023.8px) {\r\n    position: absolute;\r\n    transform: scale(0.7);\r\n    bottom: -80px;\r\n    right: -150px;\r\n  }\r\n\r\n  @media screen and (min-width: 1299.8px) {\r\n    transform: scale(1);\r\n    width: 578px;\r\n    height: 505px;\r\n    bottom: 0px;\r\n    right: -100px;\r\n  }\r\n\r\n  \r\n`;\r\n\r\nconst StyledDiv = styled.div`\r\n  display: flex;\r\n  width: auto;\r\n  gap: 20px;\r\n  align-items: flex-start;\r\n  flex-direction: column;\r\n\r\n  @media screen and (min-width: 767.8px) {\r\n    flex-direction: row;\r\n    justify-content: flex-start;\r\n    gap: 35px;\r\n    align-items: center;\r\n  }\r\n\r\n  @media screen and (min-width: 1023.8px) {\r\n    margin: 0 0 70px 0;\r\n  }\r\n\r\n  @media screen and (min-width: 1299.8px) {\r\n    margin: 0 0 149px 0;\r\n  }\r\n`;\r\n\r\n\r\nexport {\r\n  StyledCallToAction,\r\n  StyledH1,\r\n  StyledH2,\r\n  StyledDiv,\r\n  StyledImg,\r\n  StyledSection,\r\n};\r\n","import CallToAction from './CallToAction/CallToAction';\r\n\r\nexport default CallToAction;\r\n\r\n","import { useContext } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport Grid from '@mui/material/Grid';\r\nimport {Container} from 'components/Container';\r\nimport {LinkBtn} from 'UI/LinkBtn';\r\nimport { ContextIdUser } from 'components/Context';\r\nimport { setValueToLocalStorage } from 'helpers/setValueToLocalStorage';\r\n\r\nimport InfoTest  from '../components/InfoTest/InfoTest';\r\nimport { createIdUser } from '../helpers/createIdUser';\r\nimport DropdownProfession from '../UI/DropdownProfession';\r\n\r\nimport {\r\n  StyledCallToAction,\r\n  StyledH1,\r\n  StyledH2,\r\n  StyledDiv,\r\n  StyledImg,\r\n  StyledSection,\r\n} from './CallToAction.styled';\r\n\r\ntype CallToActionProps = {\r\n  isChooseProfession: boolean;\r\n  setChooseProfession: (item: boolean) => void;\r\n};\r\n\r\nconst CallToAction = ({\r\n  isChooseProfession,\r\n  setChooseProfession,\r\n}: CallToActionProps) => {\r\n  const { t } = useTranslation('', {\r\n    keyPrefix: 'modules.callToAction',\r\n  });\r\n  const [idUser, setIdUser]: [string, (lang: string) => void] =\r\n    useContext(ContextIdUser);\r\n\r\n  const startTest = () => {\r\n    const id = createIdUser();\r\n    setIdUser(id);\r\n    setValueToLocalStorage('idUser', id);\r\n  };\r\n\r\n  return (\r\n    <StyledSection id='startTest'>\r\n      <Container>\r\n        <Grid\r\n          container\r\n          columns={{ xs: 2, md: 12, lg: 12, xl: 12 }}\r\n          alignItems='center'\r\n        >\r\n          <Grid item xs={2} md={12} lg={8} xl={8}>\r\n            <StyledCallToAction id='CallToAction'>\r\n              <StyledH1>{t('mainTitle')}</StyledH1>\r\n              <InfoTest\r\n                isChooseProfession={isChooseProfession}\r\n                setChooseProfession={setChooseProfession}\r\n              />\r\n              <StyledH2>{t('subTitle')}</StyledH2>\r\n              <StyledDiv>\r\n                <DropdownProfession setChooseProfession={setChooseProfession} />\r\n                <LinkBtn\r\n                  pageTo='quiz'\r\n                  onClick={startTest}\r\n                  text={t('textStartBtn')}\r\n                  isDisabledBtn={!isChooseProfession}\r\n                />\r\n              </StyledDiv>\r\n            </StyledCallToAction>\r\n          </Grid>\r\n          <Grid item xs={2} md={12}>\r\n            <StyledImg src={require('../icons/img1.png')} alt='img' />\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n    </StyledSection>\r\n  );\r\n};\r\n\r\nexport default CallToAction;\r\n","import { push } from 'firebase/database';\r\nimport { ref } from 'firebase/database';\r\n\r\nimport db from '../../../config/firebase/firebaseConfig';\r\n\r\nconst createIdUser = (): string => {\r\n\r\n  const pushedRef = push(ref(db, 'users/user'));\r\n\r\n  if (pushedRef && pushedRef.key) {\r\n    const idUser = pushedRef.key;\r\n    return idUser;\r\n  } else {\r\n    return ''\r\n  }\r\n};\r\n\r\nexport {createIdUser};\r\n","var _rect, _g;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgPersonSitting(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 145,\n    height: 225,\n    viewBox: \"0 0 145 225\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"mask\", {\n    id: \"mask0_518_383\",\n    style: {\n      maskType: \"alpha\"\n    },\n    maskUnits: \"userSpaceOnUse\",\n    x: 0,\n    y: 0,\n    width: 145,\n    height: 225\n  }, _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    width: 144.991,\n    height: 224.607,\n    fill: \"#D9D9D9\"\n  }))), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    mask: \"url(#mask0_518_383)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M78.0487 143.101C78.28 145.507 77.8071 147.804 76.6805 149.747L76.314 150.379L77.0116 150.622C78.2813 151.065 79.6932 151.28 81.3281 151.28C83.0107 151.28 84.7604 151.046 86.1663 150.859L87.0664 150.739L86.6243 149.959C86.2687 149.333 86.2029 148.573 86.1331 147.77C86.1143 147.554 86.095 147.33 86.0696 147.109C84.7375 135.238 83.0536 123.212 81.4251 111.581C80.9965 108.521 80.5534 105.356 80.1235 102.243L78.8905 102.291C78.5588 108.053 78.2368 113.912 77.9256 119.579C77.7887 122.07 77.6517 124.562 77.5137 127.054C77.0216 133.353 77.1916 138.453 78.0487 143.101M78.5519 214.289C76.7411 214.289 74.9267 214.101 73.1594 213.73C67.629 212.573 62.6047 209.842 58.3294 207.374C58.1111 207.25 57.8896 207.127 57.6623 207C55.9885 206.066 53.9055 204.905 52.6001 203.488C51.168 201.933 50.9216 200.384 51.8246 198.612L51.9674 198.332L51.8182 198.055C50.8831 196.32 50.9527 194.173 51.9872 192.835L52.8566 191.71L51.4271 191.861C49.9858 192.014 48.5331 192.22 47.1281 192.42C45.5693 192.642 43.9572 192.871 42.3696 193.025L41.9283 193.067L41.8269 193.491C41.7704 193.727 41.7007 193.87 41.2109 193.87C40.7862 193.87 40.2154 193.746 39.6114 193.615C38.8617 193.452 38.0119 193.268 37.1924 193.268C36.832 193.268 36.5078 193.302 36.2012 193.373L36.0228 193.414L35.8958 193.543C35.8146 193.626 35.6764 193.678 35.5352 193.678C35.4283 193.678 35.3293 193.648 35.2631 193.596L35.0628 193.44L34.8088 193.468C30.3828 193.952 26.5663 194.803 23.1417 196.067L23.1262 196.073L23.0519 196.105C21.8136 196.638 20.5333 197.189 19.3673 197.189C18.5149 197.189 17.8227 196.9 17.1888 196.279L17.0097 196.104L16.757 196.101C14.1931 196.078 13.0216 193.097 12.8596 191.099L12.8393 190.848L12.6438 190.684C8.17556 186.946 5.53771 181.811 4.57923 174.987C3.70628 168.772 4.37654 162.218 5.14732 156.627C6.9303 142.138 8.78993 129.149 13.5171 116.83L13.7379 116.254L13.1494 116.043C11.1077 115.312 9.54738 114.439 8.37908 113.376L8.29819 113.302L8.19633 113.26C6.52192 112.574 5.70187 110.042 5.4904 109.283L5.47346 109.222L5.44391 109.165C5.10227 108.512 5.02345 107.603 5.22779 106.672L5.24969 106.571L5.23699 106.469C5.12665 105.585 5.49288 104.66 5.88059 103.681C6.05776 103.234 6.24082 102.772 6.37461 102.312C6.83453 100.996 7.29394 99.6571 7.73837 98.362C8.73549 95.4564 9.76639 92.4519 10.8647 89.5292L11.0149 89.1295L10.684 88.854C10.1191 88.3836 10.3077 87.8299 11.1223 86.5059C11.3148 86.1932 11.4968 85.8973 11.6352 85.6057C12.6794 83.8069 13.7984 82.0802 14.9618 80.4729L14.9858 80.4399L15.0049 80.4042C20.9749 69.2879 31.5647 63.166 44.8232 63.166L45.0935 63.1665L45.2429 63.0769C47.7278 61.5871 49.5017 59.0309 50.6659 55.2622L50.7031 55.142L50.6887 55.0172C50.6488 54.6699 50.6051 54.2145 50.6201 53.7726C50.658 52.6534 51.098 51.6548 51.8271 51.0325C53.2105 49.852 55.3107 49.7532 57.3432 49.7532L57.6351 49.7537C60.2338 49.7611 62.0684 50.2109 63.4089 51.1695C64.9664 52.2833 65.8272 54.0812 66.0405 56.6658C66.1042 57.4393 66.1021 58.2405 66.1001 59.0153L66.0996 59.2316L66.1257 59.3174C66.3125 59.9317 66.5313 60.522 66.7759 61.072L67.0276 61.6378L67.5999 61.3827C67.9701 61.2178 68.4393 61.1329 69.0347 61.1234C69.2064 61.1194 69.3739 61.1176 69.5428 61.1176C70.9254 61.1176 72.4043 61.2434 73.8347 61.3651C74.9124 61.4568 76.0269 61.5517 77.1056 61.5938L77.1204 61.5944C77.1204 61.5944 77.2694 61.5935 77.3362 61.5935C79.958 61.5935 81.8587 62.0046 83.3175 62.8873C84.8883 63.8376 86.0177 65.3628 86.8718 67.6872C91.4526 81.0108 93.3359 95.3621 94.9971 108.023C95.9394 114.645 96.226 121.433 96.5031 127.997C96.7958 134.926 97.0983 142.09 98.1695 149.094L98.2541 149.647L98.8229 149.611C101.326 149.45 104.031 149.103 106.895 148.735C111.246 148.177 115.746 147.6 120.096 147.6C126.177 147.6 130.788 148.794 134.19 151.247C136.562 153.476 137.789 156.492 137.739 159.974C137.667 164.893 135.058 170.332 131.09 173.83L131.075 173.843C126.06 178.567 116.905 182.664 103.865 186.021C91.8743 189.107 79.4713 190.785 73.145 191.51L71.5793 191.689L72.8502 192.605C73.3646 192.976 73.8339 193.303 74.285 193.604L74.576 193.797L74.8948 193.652C75.804 193.236 76.3813 193.149 76.7058 193.149C76.9937 193.149 77.3411 193.211 77.3602 193.508C77.3727 193.703 77.2338 193.992 76.9407 194.028L75.3845 194.222L76.6552 195.125C77.504 195.729 78.7703 196.456 80.2368 197.299C85.0343 200.054 92.2844 204.219 91.0375 207.877L90.9556 208.117L91.0715 208.343C91.4066 208.998 91.4352 209.606 91.1587 210.202C90.5668 211.478 88.715 212.447 87.1423 212.841L87.1154 212.848L87.089 212.857C84.3526 213.807 81.4803 214.289 78.5519 214.289\",\n    fill: \"white\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M73.2876 190.794C73.4766 190.602 73.5562 190.35 73.3795 190.055C72.6966 189.185 71.2802 189.78 70.3991 189.981C70.0663 189.705 69.7359 189.428 69.4177 189.136C69.5282 188.452 68.7038 187.997 68.365 187.47C68.0323 187.081 67.7193 186.64 67.3204 186.314C66.3484 185.558 65.0013 186.07 63.8732 186.035C63.0043 184.933 62.1097 183.866 61.2832 182.728C62.2357 181.132 62.3029 179.262 61.9868 177.484C76.5975 171.956 89.2444 161.491 105.046 159.073C105.59 158.982 105.894 158.324 105.759 157.841C104.657 155.218 88.8166 161.985 86.4488 163.211C79.4653 166.545 72.9238 170.7 66.1366 174.367C64.7213 175.117 63.1645 175.52 61.6169 175.909C59.2388 168.128 55.2159 160.994 52.1312 153.492C52.3316 153.146 52.5021 152.782 52.6468 152.409C52.5445 156.535 56.5693 156.477 57.1251 152.563C56.8958 154.604 58.4433 158.973 60.6768 156.106C61.2006 155.386 61.3866 154.464 61.4753 153.533C61.5901 154.176 61.7202 154.817 61.8649 155.455C62.4381 156.719 64.0033 155.182 64.3669 154.522C64.5767 154.485 64.773 154.389 64.9166 154.273C68.866 154.82 73.5178 154.788 76.4157 151.68C81.3311 153.56 86.7712 151.875 91.7424 151.125C101.858 149.965 112.014 148.198 122.221 148.333C126.778 148.596 132.154 149.33 135.036 153.207C138.734 158.795 136.644 166.342 132.565 171.179C122.754 183.564 89.077 188.949 73.2876 190.794M73.5634 195.255C73.742 195.207 73.9219 195.163 74.1006 195.122C76.9643 197.499 90.451 203.671 89.4252 207.358C89.0626 207.817 88.1948 207.921 87.6461 208.069C86.6906 208.327 85.7257 208.55 84.7516 208.727C81.6027 209.298 78.3414 209.397 75.1966 208.746C74.0396 208.571 72.9952 208.079 71.9415 207.603C68.5365 206.109 64.7864 204.46 61.3978 202.978C57.093 201.277 49.5423 197.924 52.6478 192.266C55.59 195.565 59.3245 195.277 61.2058 191.176C61.8545 189.931 62.4207 188.253 63.9444 187.75C64.7482 187.208 65.7761 187.096 66.4476 187.699C66.4961 187.624 66.5395 187.519 66.5632 187.425C67.3204 188.5 67.9734 189.631 68.8607 190.613C68.5561 190.629 65.3845 192.97 66.3205 192.971C67.4466 192.393 68.5654 191.911 69.7813 191.599C70.6625 192.483 71.6315 193.305 72.6357 194.064C71.6605 194.707 70.7844 195.493 70.0799 196.346C70.0189 196.421 70.0933 196.519 70.1842 196.478C71.2782 195.992 72.4033 195.565 73.5634 195.255M88.0801 211.197C77.1264 216.103 65.5301 210.64 56.1891 204.817C54.0331 203.617 51.1974 201.915 51.6333 199.09C53.2211 201.406 55.8389 202.725 58.3514 203.868C62.5725 205.77 66.8214 207.612 71.053 209.491C71.4527 210.813 73.3639 210.863 74.519 211.157C79.6606 212.151 85.1875 211.657 90.0264 209.674C89.7464 210.501 88.8301 210.881 88.0801 211.197M44.3769 192.096C44.1063 192.131 43.8356 192.162 43.565 192.193C43.5929 191.836 43.377 191.478 43.0299 191.368C43.1859 190.611 43.2437 189.829 43.16 189.061C43.6125 190.227 45.0733 189.872 46.001 189.537C47.3264 189.177 48.6436 188.791 49.9535 188.379C50.4701 189.336 51.0176 190.278 51.6901 191.145C49.2416 191.362 46.8161 191.793 44.3769 192.096M43.2995 188.43C43.2344 188.567 43.1414 188.712 43.1394 188.876C43.0733 188.309 42.9441 187.749 42.7478 187.212C42.9316 187.618 43.1156 188.024 43.2995 188.43M41.754 185.389C40.5495 183.824 38.3232 182.544 36.2653 182.98C36.1331 183.009 36.1299 183.221 36.2653 183.247C39.0298 183.622 41.4575 185.808 41.5535 188.635C41.7716 189.914 40.879 191.17 41.1796 192.398C41.1197 192.402 41.0598 192.405 41.0009 192.409C40.9792 192.491 40.9595 192.564 40.9337 192.628C41.2323 192.678 41.3201 193.157 40.9678 193.242C40.7592 193.292 40.5412 193.319 40.3191 193.33C39.192 193.027 38.0029 192.957 36.9254 192.508C35.8593 192.039 36.1258 190.719 35.7498 189.804C35.474 188.75 35.1567 187.7 34.757 186.689C34.7281 186.608 34.6176 186.626 34.6083 186.708C34.3262 188.726 34.3355 190.778 34.4037 192.813C34.0339 192.85 33.6661 192.892 33.2972 192.937C33.321 192.369 31.6113 185.447 30.7105 187.223C31.164 189.176 31.2187 191.217 31.2673 193.226C28.5927 193.666 25.9573 194.32 23.3932 195.211C21.5864 195.757 19.4375 197.372 17.6834 195.912C16.3249 194.792 15.8673 192.838 15.9954 191.175C17.7619 181.337 31.7146 180.188 39.9513 180.915C40.7292 182.705 41.5216 184.488 42.3243 186.268C42.158 185.961 41.9679 185.667 41.754 185.389M13.6617 190.983C13.5108 188.749 13.8879 185.968 15.5481 184.303C19.3477 181.101 24.668 180.093 29.416 178.934C31.6277 178.498 33.8696 178.209 36.1207 178.065C36.9192 178.002 37.9337 178.183 38.4977 177.531C38.7881 178.217 39.0824 178.902 39.3769 179.587C29.9243 178.352 10.2029 182.642 15.7257 195.552C14.5562 194.289 13.7814 192.751 13.6617 190.983M60.6241 183.598C61.0591 184.682 61.5911 185.714 62.2864 186.657C61.4961 187.173 60.8514 187.935 60.3969 188.753C57.4836 196.352 54.3679 192.282 50.4969 188.204C53.7728 186.972 58.1117 186.048 60.6241 183.598M12.1327 189.437C4.55718 181.976 3.08712 169.547 5.88572 159.777C6.13469 156.154 7.40537 152.701 8.54382 149.271C12.1689 138.866 16.9365 128.855 22.6546 119.404C29.7487 121.347 36.8304 123.341 43.941 125.22C44.9203 125.432 45.9007 125.851 46.906 125.912C47.2655 126.14 47.626 126.392 48 126.613C47.4556 129.272 47.9576 131.987 48.0847 134.663C48.2003 136.769 47.9721 138.831 47.692 140.915C47.3791 143.947 46.0908 153.807 48.6725 155.612C49.5475 156.033 50.3296 154.786 50.7066 155.129C51.0465 154.893 51.3637 154.585 51.6219 154.246C52.6189 157.461 54.248 160.442 55.2542 163.659C56.593 168.387 60.9899 176.04 60.0136 180.55C59.2584 183.335 55.9547 183.935 53.5703 184.845C50.8151 185.801 48.0289 186.679 45.1973 187.391C43.815 184.466 42.4937 181.513 41.1972 178.55C35.2715 164.877 30.0235 150.919 25.3333 136.794C25.2455 136.481 24.167 133.084 23.9697 134.031C23.9531 133.934 23.8302 133.682 23.7837 133.898C24.5792 137.214 25.3859 140.53 26.259 143.828C24.1143 143.529 21.8085 143.412 19.8456 144.46C19.7444 144.514 19.8188 144.647 19.9189 144.63C22.2433 144.229 24.4852 144.988 26.7176 145.532C29.853 156.173 33.8985 166.544 38.1806 176.785C36.8562 176.364 35.319 176.829 33.9368 176.863C29.5834 177.311 25.2796 178.261 21.1669 179.738C15.9974 181.409 12.3424 183.588 12.1327 189.437M7.96209 111.788C6.68945 110.422 5.68933 108.677 5.88262 106.825C6.64709 105.809 6.9002 104.483 7.34545 103.308C9.08618 98.3911 10.7019 93.4371 12.5966 88.5734C16.6266 89.8091 20.5914 91.2914 24.3312 93.2382C25.0193 93.5883 25.7001 93.9516 26.3726 94.328C27.0772 94.7216 27.8458 95.4054 28.6908 95.2096C27.7672 96.5133 25.8654 97.8698 25.5441 99.3763C25.4749 99.8532 25.8137 100.296 26.3344 100.189C34.4843 105.961 42.9007 111.611 50.6044 118.04C56.373 122.593 60.8018 126.286 62.7802 133.674C64.1139 138.46 64.1179 143.462 63.9217 148.382C63.8835 149.339 63.8825 150.318 63.805 151.281C63.9207 152.001 63.7006 153.467 62.8886 153.494C62.9072 153.668 62.9651 153.829 63.057 153.971C63.0312 154.006 63.0043 154.038 62.9765 154.072C62.9362 153.875 62.8969 153.679 62.8597 153.482C62.2275 150.69 62.1428 147.451 62.2481 144.478C62.2925 143.626 60.9816 143.646 60.9082 144.478C60.7109 146.726 60.5136 148.973 60.3163 151.219C60.0796 152.675 60.4527 154.579 59.2853 155.686C58.0983 154.592 58.4908 152.435 58.5487 151.024C58.6416 148.722 58.7419 146.421 58.8276 144.119C58.8545 143.39 57.6427 143.202 57.5052 143.944C57.1158 146.058 56.6943 148.166 56.2407 150.268C55.967 151.081 55.779 154.727 54.4112 154.094C53.5961 153.539 54.184 150.286 54.0765 149.208C54.1271 147.076 54.157 144.946 54.3141 142.818C54.3782 141.96 52.9763 141.778 52.7841 142.616C52.4722 143.972 52.1736 145.329 51.9029 146.694C51.3089 148.996 51.5248 152.117 49.3802 153.647C48.5403 147.667 49.7489 141.729 49.9184 135.77C49.8172 133.84 49.4845 131.928 49.1911 130.021C48.8667 127.912 48.6777 125.616 49.437 123.582C49.2293 122.67 48.4132 125.135 48.3368 125.34C47.7221 124.132 46.2252 124.039 45.0413 123.663C42.41 122.814 39.7147 122.173 37.0525 121.419C29.9924 119.463 22.9241 117.539 15.8538 115.618C13.0294 114.839 10.0562 113.917 7.96209 111.788M78.6606 143.596C77.6864 138.331 77.7132 132.997 78.1296 127.674C78.5872 119.42 79.0314 111.163 79.5067 102.91C81.5697 117.848 83.7691 132.769 85.4509 147.755C85.5707 148.798 85.5522 149.902 86.0801 150.832C83.1627 151.222 80.0531 151.615 77.2163 150.625C78.4612 148.48 78.9002 146.037 78.6606 143.596M93.4015 106.515C95.6071 120.673 94.3488 135.079 96.4883 149.221C93.5203 149.553 90.575 150.044 87.6379 150.584C87.9593 148.837 87.3498 147.033 87.2444 145.274C85.6492 132.726 83.8879 120.186 81.5542 107.747C80.9818 104.771 80.4034 101.806 79.7401 98.8458C79.8404 97.053 79.9282 95.2603 79.986 93.4665C83.2247 91.4365 86.8766 90.1225 90.6535 89.4601C91.6741 95.1294 92.6938 100.795 93.4015 106.515M67.8691 62.0246C67.74 61.8044 67.617 61.5792 67.4993 61.3509C67.898 61.3661 68.2865 61.3804 68.679 61.4453C68.6615 62.0753 68.6966 62.7104 68.7038 63.3455C68.5074 62.8809 68.1232 62.4568 67.8691 62.0246M134.484 150.748C125.063 143.918 109.59 148.27 98.6764 148.972C96.5958 135.37 97.4449 121.545 95.5058 107.921C93.7197 94.3097 91.8364 80.5087 87.3508 67.4677C85.4995 62.4252 82.297 60.9279 77.0242 60.9684C74.3485 60.8639 71.5189 60.4368 68.9187 60.4976C68.3484 60.5068 67.7524 60.5819 67.2379 60.8112C66.5147 59.1859 66.1222 57.4408 65.9238 55.6826C65.9114 55.571 65.7689 55.5507 65.7265 55.6573C65.1149 57.1882 65.0498 58.8592 65.3824 60.4622C65.6232 61.6107 67.0561 66.1305 68.7203 64.3621C68.8525 68.0703 68.0353 72.4988 64.3918 74.4234C58.0249 77.1911 49.2241 74.671 45.5361 68.7967C44.8233 67.6229 44.2086 66.3739 43.4193 65.2468C48.9184 63.6945 52.0051 57.1253 50.7097 52.1226C49.9091 56.0134 48.4493 60.3607 44.814 62.54C31.5761 62.5106 20.5698 68.5218 14.3507 80.0998C13.1338 81.781 12.0087 83.5279 10.9777 85.3055C10.4229 86.4946 8.79795 88.1483 10.1771 89.2968C8.58411 93.5356 7.17086 97.8331 5.67704 102.106C5.2668 103.529 4.32877 105.022 4.51586 106.519C4.31338 107.441 4.32268 108.532 4.78653 109.418C5.22662 110.999 6.21413 113.126 7.85166 113.796C9.24114 115.061 10.9984 115.933 12.8311 116.589C7.9435 129.324 6.08303 143.058 4.42702 156.513C2.80396 168.284 1.96624 182.602 12.1358 191.109C12.3331 193.543 13.7814 196.645 16.6452 196.671C18.6286 198.613 21.0461 197.547 23.2537 196.598C26.98 195.222 30.8882 194.459 34.7715 194.034C35.1878 194.359 35.8655 194.305 36.2364 193.927C38.5887 193.386 41.8491 195.575 42.3243 193.592C45.3574 193.298 48.3574 192.749 51.3874 192.428C50.1105 194.08 50.2025 196.516 51.1643 198.3C48.7149 203.104 54.4205 205.886 57.9092 207.857C62.6189 210.576 67.5375 213.156 72.9238 214.283C77.6594 215.277 82.6203 214.976 87.1895 213.389C89.5905 212.787 92.9439 210.812 91.5191 208.029C93.3251 202.733 80.643 197.245 76.9126 194.593C78.4374 194.403 78.4932 191.248 74.5272 193.061C74.0479 192.741 73.5768 192.412 73.1109 192.076C89.1524 190.238 119.788 185.18 131.398 174.247C137.776 168.626 141.456 157.255 134.484 150.748\",\n    fill: \"#1C1C1C\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M55.8759 19.9827C71.1849 19.232 78.0932 29.9803 78.5401 34.7811C78.8502 38.1136 76.8757 41.9546 76.8757 44.9325C76.8757 46.4525 78.7421 49.7158 77.8732 51.9312C75.9393 56.8622 71.8447 62.3347 66.6268 62.3347C61.409 62.3347 54.6183 63.7736 48.8528 55.5418C48.3119 54.7694 41.4696 50.3796 40.8048 46.2083C39.149 35.8178 44.9523 20.5184 55.8759 19.9827Z\",\n    fill: \"white\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M55.1542 13.2936C55.7017 12.6692 56.6259 12.4194 57.447 12.4678C58.6399 12.5383 59.6773 13.2725 60.864 13.3269C62.1083 13.3843 63.3092 12.9542 64.5566 13.1536C65.3212 13.2765 66.0787 13.63 66.5686 14.2263C68.2654 13.7418 70.1077 14.3834 71.1884 15.7844C72.5217 15.5779 73.9721 16.4583 74.3801 17.7393C76.074 17.7937 77.6728 19.1503 77.8617 20.8504C78.5385 21.0287 79.1263 21.4941 79.4868 22.1094C79.906 22.8225 79.9757 23.6403 79.8999 24.444C80.6969 24.8499 81.1019 25.7221 81.2079 26.6447C81.9362 27.1866 82.2523 28.1605 82.1038 29.0801C82.6614 29.3933 82.9493 30.1225 82.9462 30.7731C82.9432 31.3804 82.7817 31.9184 83.0089 32.5044C83.2114 33.0264 83.284 33.4615 83.1727 34.0083L83.1613 34.0615C83.1416 34.1507 83.1251 34.2362 83.1102 34.3205C83.261 34.4524 83.3886 34.6178 83.4843 34.8102C83.8336 35.5132 83.7816 36.315 83.5152 37.0279C83.6319 37.482 83.617 37.9616 83.4446 38.398C83.7675 38.8618 83.9373 39.4307 83.8874 40.0209C83.8315 40.6817 83.5289 41.2734 83.07 41.7109C83.1922 42.6135 82.8242 43.5888 82.1587 44.2243C82.2531 44.7646 82.1716 45.331 81.8752 45.8432C81.6639 46.2083 81.3794 46.4803 81.0513 46.6698C81.0621 46.9713 81.0212 47.2795 80.9206 47.5884C80.7809 48.0171 80.5443 48.412 80.233 48.7301C80.4188 49.9143 79.7077 51.2284 78.4562 51.5606C78.3511 51.5885 78.2508 51.6013 78.1547 51.6033C78.0304 52.7424 77.7589 53.8655 77.3385 54.9322C76.2699 57.6485 74.3266 60.0234 71.7924 61.5049C70.539 62.2372 69.131 62.7387 67.6938 62.9482C66.6595 63.0993 65.6646 63.062 64.6264 62.9593C63.3234 62.8294 62.0144 62.635 60.7478 62.3006L60.5441 62.2466C60.019 62.1063 59.4654 61.9445 59.0105 61.6621C58.5015 61.3458 58.237 60.8583 58.1198 60.2843C58.0544 59.9647 58.2574 59.6211 58.6082 59.6144L58.6308 59.6145C58.7075 59.6161 58.7836 59.6132 58.8607 59.6084L58.9187 59.6044H58.9217C58.9257 59.6034 58.9278 59.6034 58.9318 59.6034C58.9661 59.5984 58.9994 59.5883 59.0328 59.5833C59.4187 59.5185 59.7562 59.5827 60.1186 59.7029L60.164 59.7182C60.774 59.9277 61.3791 60.1221 62.0093 60.2661C62.6608 60.4142 63.3203 60.532 63.9819 60.6247L64.0475 60.6327L64.0677 60.6358L64.0778 60.6368V60.6368C64.0799 60.6368 64.0819 60.6368 64.0839 60.6378L64.2788 60.6619V60.6619C64.4325 60.6801 64.5859 60.6962 64.7394 60.7123C65.0222 60.7405 65.305 60.7627 65.5878 60.7788C70.4693 61.0527 74.569 57.2204 75.8063 52.6257C76.2547 50.9629 76.284 49.3041 76.1517 47.6442C76.1093 47.5234 76.0841 47.3894 76.0851 47.2424C76.0851 47.1658 76.0892 47.0903 76.0942 47.0138C75.9296 45.4083 75.6438 43.8019 75.4649 42.1904C75.2559 40.308 75.1397 38.4146 75.1821 36.52C75.2033 35.5844 75.3033 34.6578 75.4346 33.7313L75.4821 33.3984V33.3984C74.8887 33.2829 74.337 33.0023 73.8977 32.5961C72.9445 33.145 71.7107 33.1936 70.7698 32.614C69.7153 33.2734 68.2421 33.3332 67.1803 32.6885C66.5385 33.1454 65.7299 33.3425 64.9361 33.1691C64.579 33.0911 64.224 32.9224 63.92 32.6888C63.7029 32.727 63.483 32.7418 63.2644 32.7304L63.2192 32.7556V32.7556C62.7152 33.0205 62.1569 33.1949 61.5823 33.1754C61.1568 33.1611 60.7186 33.0774 60.3129 32.9191C59.8795 33.1799 59.4052 33.358 58.8977 33.4219C58.1567 33.515 57.3569 33.3516 56.7406 32.9324C55.6143 33.5721 54.229 33.6706 53.0133 33.2408C52.7643 33.6613 52.4198 34.0239 52.0164 34.3033C52.0886 34.5614 52.1116 34.8365 52.0868 35.1011C52.046 35.5366 51.9365 35.9271 51.7574 36.2778C51.9462 36.6694 52.003 37.1502 51.8973 37.6329C51.7467 38.3212 51.3451 38.9199 50.8252 39.3862C50.7793 40.4847 50.1752 41.5146 49.1921 42.0868C49.1423 42.1157 49.0928 42.1392 49.0434 42.1605C48.9999 42.2197 48.948 42.2718 48.8887 42.3157C48.2635 42.8917 47.2741 42.8459 46.4904 42.5205C46.4753 42.5212 46.4602 42.5225 46.4449 42.5228C46.165 42.5298 45.9742 42.4211 45.861 42.2609C45.7469 42.2671 45.6337 42.279 45.5197 42.3002C45.1035 42.3777 44.6469 42.5268 44.2702 42.7203C43.2925 43.2218 42.84 44.1081 42.7046 45.1737C42.5573 46.3359 42.8925 47.5204 43.7946 48.307C44.2328 48.6897 44.7934 48.9294 45.363 49.0301C45.9923 49.1419 46.665 48.867 47.1296 49.4058C47.2225 49.5126 47.2861 49.6616 47.2356 49.8056C47.0781 50.2548 46.8185 50.4271 46.4125 50.4895C46.9993 51.1835 47.6013 51.8542 48.2679 52.4777C48.989 53.1535 49.7344 53.8081 50.385 54.5534C51.0727 55.3421 51.6939 56.178 52.1252 57.1348C52.3716 57.6847 52.5696 58.2518 52.7828 58.8148L52.8209 58.9129C53.0586 59.5111 53.3748 60.0877 53.0089 60.7123C52.8635 60.9581 52.5342 61.1957 52.2312 61.1565C51.3779 61.0477 51.092 60.4726 50.8293 59.7233C50.6313 59.1572 50.4798 58.5751 50.2668 58.0141C50.2269 57.9103 50.1835 57.8074 50.1379 57.7052C49.6459 57.842 49.1048 57.7334 48.6656 57.4536C48.1964 57.661 47.6765 57.7644 47.1744 57.7556C46.5021 57.7439 45.8879 57.5576 45.3599 57.2217C45.3179 57.2107 45.2757 57.2 45.2337 57.188C44.4305 57.4948 43.4897 57.44 42.7624 56.9428C42.2914 56.6208 41.9694 56.191 41.7864 55.7125C41.1779 55.7009 40.5759 55.4858 40.1399 55.0553C39.7395 54.6601 39.5055 54.1502 39.436 53.6203C38.9122 53.5169 38.4211 53.2644 38.036 52.839C37.7144 52.4838 37.519 52.0314 37.4529 51.5616C36.815 51.3801 36.2396 50.9648 35.9254 50.3857C35.633 49.8465 35.5908 49.2617 35.7338 48.7297L35.6968 48.6765V48.6765C35.0396 48.3336 34.5382 47.7722 34.4866 46.9702C34.4721 46.7419 34.4967 46.5135 34.5589 46.2974C34.5364 46.0557 34.5508 45.8142 34.6143 45.5805C33.7305 44.7234 33.4104 43.3466 33.8901 42.2085C33.0265 41.2819 32.7983 39.8165 33.4316 38.7168C32.9973 38.1929 32.774 37.5252 32.8114 36.8121C32.8579 35.9219 33.2669 35.1442 33.7568 34.4241C33.3932 34.0233 33.1993 33.4643 33.2135 32.9244C33.2336 32.1419 33.6507 31.4681 34.173 30.9101C33.7174 29.5323 34.2265 28.0376 35.3446 27.1654C35.1183 26.7938 35.0345 26.3335 35.1083 25.8672C35.2375 25.0524 35.8506 24.4974 36.5122 24.0583C36.3738 23.6092 36.4101 23.1246 36.6303 22.6603C36.9242 22.0409 37.4788 21.6481 38.0575 21.3158C38.207 19.942 39.7463 18.7686 41.0371 19.4777C40.7169 18.4554 41.6392 17.3515 42.6997 17.2347C43.2187 15.6655 45.0095 14.6765 46.6195 15.0663C47.4427 13.9443 48.9749 13.5123 50.2758 13.9936C51.7061 12.9008 53.4806 12.7387 55.1542 13.2936ZM44.9661 44.1041C45.9711 44.0497 46.7246 44.8675 47.2539 45.6159C47.7507 46.3179 46.4761 47.0591 46.1044 46.2856C45.9711 46.0097 45.8196 45.7176 45.6166 45.4759C45.5825 45.5234 45.5524 45.5727 45.5224 45.6233L45.4923 45.6743C45.4701 45.7115 45.4469 45.7498 45.4277 45.7891C45.4297 45.7961 45.3994 45.8888 45.3984 45.8928C45.3156 46.1436 45.1348 46.3048 44.8884 46.3914C44.5702 46.5022 44.2692 46.2635 44.1672 45.9835C44.0046 45.5363 44.3823 45.1465 44.7752 44.9692C44.3894 44.9068 44.0096 45.0377 43.7308 45.3338C43.6925 45.3751 43.6278 45.3419 43.6259 45.2905C43.5935 44.5885 44.3298 44.1383 44.9661 44.1041Z\",\n    fill: \"#1C1C1C\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M69.4754 54.5778C68.7313 54.7927 67.9327 54.8119 67.1742 54.59C66.4863 54.3886 65.78 53.9456 65.2737 53.3594C64.8239 52.8387 64.5327 52.2058 64.5441 51.5303C64.5454 51.4531 64.5731 51.3887 64.6156 51.3387C64.6614 51.2849 64.7254 51.248 64.794 51.2319C64.8645 51.2155 64.939 51.2213 65.0024 51.25C65.0599 51.2761 65.1091 51.3203 65.1399 51.3849C65.2177 51.4868 65.2952 51.5872 65.373 51.6848C65.9986 52.4551 66.6045 53.0308 67.5452 53.2373C68.0556 53.3493 68.5654 53.2997 69.0331 53.1287C69.5338 52.9457 69.9864 52.6239 70.3411 52.2122C70.5014 52.0261 70.6906 51.9502 70.8756 51.9489C71.0853 51.9474 71.2926 52.0446 71.4487 52.1999C71.6022 52.3525 71.705 52.56 71.7143 52.7769C71.7224 52.9674 71.6601 53.1663 71.4944 53.3438C70.9485 53.9284 70.2409 54.3567 69.4754 54.5778ZM69.4524 44.9299C70.2151 45.3922 71.3772 46.4702 70.5567 47.6163C69.5909 48.6268 68.2004 47.4682 67.5151 46.9441C66.8798 46.538 66.1659 47.5825 66.7554 48.0567C71.7069 51.7123 73.7163 45.0508 69.8381 44.3864C69.4111 44.3131 69.2526 44.7869 69.4524 44.9299ZM62.3176 42.8957C62.0725 42.7394 61.7841 42.6857 61.4645 42.8307C61.2148 42.944 60.7767 43.3215 60.4719 43.8178C60.2633 44.1573 60.1155 44.5557 60.1462 44.9706C60.1534 45.0669 60.1177 45.138 60.0614 45.1905C60.0169 45.232 59.9526 45.2625 59.8772 45.272C59.8131 45.2801 59.7414 45.2728 59.6831 45.2547C59.5722 45.2201 59.5135 45.1484 59.4913 45.0898C59.2779 44.5246 59.3699 43.8938 59.6091 43.3248C59.9319 42.5568 60.5182 41.9135 60.9023 41.7061C61.5596 41.3511 62.335 41.3347 62.9932 41.6964C63.5535 42.0042 63.9039 42.5012 64.2523 43.0078C64.3264 43.1155 64.3999 43.2224 64.4759 43.3275C64.6282 43.5379 64.6433 43.7466 64.5844 43.9256C64.519 44.1239 64.3525 44.2912 64.1442 44.3788C63.9516 44.4597 63.7282 44.4711 63.5305 44.3879C63.3634 44.3177 63.2101 44.1807 63.1131 43.9484C62.9498 43.557 62.6776 43.1253 62.3176 42.8957V42.8957ZM74.7678 43.7663C74.5999 43.8536 74.4686 43.8799 74.2823 43.8242C74.1793 43.7934 74.0776 43.7343 73.9979 43.6548C73.9189 43.576 73.8619 43.4781 73.8398 43.3695C73.7853 43.1013 73.6381 42.8503 73.4285 42.6867C73.2493 42.5468 73.0231 42.4727 72.7722 42.5145C72.5015 42.5596 72.2435 42.7327 72.0659 42.9369C72.0065 43.0052 71.96 43.0827 71.9132 43.1598C71.8256 43.3039 71.7406 43.4378 71.6199 43.5437C71.5741 43.5839 71.5051 43.6118 71.4384 43.6118C71.4112 43.6118 71.3837 43.6074 71.3574 43.5992C71.088 43.3296 71.0361 43.125 71.0448 42.922C71.0539 42.7092 71.1381 42.4938 71.274 42.2928C71.593 41.8212 72.1985 41.4346 72.6071 41.347C73.1667 41.2271 73.7225 41.371 74.168 41.6827C74.6265 42.0034 74.9662 42.5013 75.0722 43.0624C75.0976 43.1975 75.0868 43.3434 75.0352 43.4699C74.9848 43.5935 74.8969 43.6993 74.7678 43.7663ZM63.5518 37.8682C63.216 38.1944 62.8185 38.245 62.4164 38.2899C62.1929 38.3151 62.0146 38.3355 61.8391 38.375C61.3566 38.4835 60.8798 38.6471 60.4447 38.8826C59.9899 39.1289 59.4943 39.4258 59.1378 39.8062C59.053 39.8968 58.9731 39.9918 58.893 40.0869C58.82 40.1738 58.7497 40.2573 58.6756 40.3379C58.5906 40.4305 58.5098 40.5275 58.4294 40.6242C58.3797 40.7058 58.3699 40.7259 58.3599 40.7468C58.3448 40.7782 58.3273 40.8134 58.3073 40.8511C58.2799 40.9027 58.2478 40.9593 58.2142 41.0105C58.1582 41.1042 58.1282 41.13 58.1023 41.1416C58.0593 41.1607 58.0184 41.1701 57.9789 41.165C57.9417 41.1602 57.9068 41.1424 57.8722 41.1133C57.6998 40.9681 57.649 40.7297 57.6542 40.4766C57.6621 40.0926 57.8041 39.6674 57.9351 39.4061C58.2395 38.7988 58.6618 38.1674 59.1695 37.7142C59.7488 37.1968 60.3827 36.8051 61.1107 36.5352C61.5631 36.3674 62.087 36.2134 62.5799 36.2329C62.9346 36.2469 63.2733 36.3521 63.553 36.6147C63.7248 36.7759 63.8073 37.0052 63.8073 37.2344C63.8073 37.4681 63.7216 37.7032 63.5518 37.8682ZM75.4508 40.8559C75.4294 40.8908 75.3999 40.9149 75.367 40.9293C75.3325 40.9445 75.294 40.9488 75.2571 40.9426C75.2203 40.9365 75.1854 40.9198 75.1576 40.8944C75.131 40.8701 75.1108 40.8378 75.1018 40.7982C74.8788 39.8217 74.4458 39.0952 73.5218 38.6267C73.0672 38.3962 72.5445 38.2498 72.0497 38.133C71.9059 38.0991 71.754 38.0771 71.601 38.0548C71.1214 37.985 70.6384 37.905 70.3258 37.5185C70.1374 37.2857 70.0584 36.9879 70.1031 36.7156C70.1451 36.4592 70.2954 36.2241 70.5685 36.0832C71.2485 35.7326 72.0936 36.0766 72.7803 36.3697C72.8312 36.3914 72.8812 36.4127 72.9301 36.4333C73.6017 36.716 74.2141 37.0891 74.7176 37.6227C75.1171 38.046 75.4872 38.6717 75.6362 39.3155C75.7603 39.8511 75.7311 40.3978 75.4508 40.8559Z\",\n    fill: \"#1C1C1C\"\n  }))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgPersonSitting);\nexport default __webpack_public_path__ + \"static/media/person_sitting.84a3313c8e0a7a6c27fe1733a5427236.svg\";\nexport { ForwardRef as ReactComponent };","import styled from 'styled-components';\r\n\r\nconst StyledP = styled.p`\r\n  font: var(--font-text5);\r\n  color: var(--color-black);\r\n  text-align: left;\r\n  margin: 0 0 10px 0;\r\n\r\n  &:last-child {\r\n    margin: 0;\r\n  }\r\n\r\n  @media screen and (min-width: 1023.8px) {\r\n    font: var(--font-text4);\r\n  }\r\n`;\r\n\r\nconst StyledH3 = styled.h3`\r\n  font: var(--font-text10);\r\n  max-width: 403px;\r\n  color: var(--color-black);\r\n  text-align: left;\r\n  margin: 60px 0 40px 0;\r\n\r\n  @media screen and (min-width: 767.8px) {\r\n    text-align: left;\r\n    margin: 0;\r\n  }\r\n\r\n  @media screen and (min-width: 1023.8px) {\r\n    font: var(--font-text2);\r\n  }\r\n`;\r\n\r\nconst StyledImg = styled.img`\r\n  width: 155px;\r\n  height: 225px;\r\n  transform: translateY(34px);\r\n  z-index: 3;\r\n\r\n  @media screen and (min-width: 767.8px) {\r\n    position: absolute;\r\n    bottom: 0;\r\n    left: 0;\r\n  }\r\n\r\n  @media screen and (min-width: 1023.8px) {\r\n    width: 224px;\r\n    height: 347px;\r\n    bottom: -20px;\r\n  }\r\n`;\r\nconst StyledArticle = styled.article`\r\n  @media screen and (min-width: 767.8px) {\r\n    padding: 30px 0 85px 0;\r\n  }\r\n\r\n  @media screen and (min-width: 1023.8px) {\r\n    padding: 90px 0 148px 0;\r\n  }\r\n`;\r\n\r\nconst StyledSection = styled.section`\r\n  background-color: var(--color-white);\r\n\r\n`;\r\n\r\nexport { StyledP, StyledH3, StyledImg, StyledArticle, StyledSection };\r\n","import { useTranslation } from 'react-i18next';\r\nimport Grid from '@mui/material/Grid';\r\nimport {Container} from 'components/Container';\r\nimport {Feedback} from 'UI/Feedback/Feedback';\r\nimport person_sitting from 'assets/images/person_sitting.svg';\r\n\r\nimport {\r\n  StyledP,\r\n  StyledH3,\r\n  StyledImg,\r\n  StyledArticle,\r\n  StyledSection,\r\n} from './styles/AboutUs.Styled';\r\nimport './styles/link.css';\r\n\r\nexport const AboutUs = () => {\r\n  const { t } = useTranslation('', {\r\n    keyPrefix: \"components.aboutUs\"\r\n  });\r\n  const customStyleFeedback = {color: 'var(--color-purple)', font: 'var(--font-text5)', fontWeight: 700};\r\n\r\n  return (\r\n    <StyledSection>\r\n      <Container>\r\n        <StyledArticle>\r\n          <Grid container columns={{ xs: 2, md: 12, lg: 12 }}>\r\n            <Grid item xs={2} md={6.2} lg={6.2}>\r\n              <StyledH3>{t('mainTitle')}</StyledH3>\r\n            </Grid>\r\n            <Grid item xs={2} md={5.8} lg={5.8}>\r\n              <StyledP>{t('text1')} </StyledP>\r\n              <StyledP>{t('text2')} </StyledP>\r\n              <StyledP>\r\n                {t('text3')}\r\n                <Feedback style={customStyleFeedback} />\r\n                {t('text4')}\r\n              </StyledP>\r\n            </Grid>\r\n            <StyledImg src={person_sitting} alt='person_sitting' />\r\n          </Grid>\r\n        </StyledArticle>\r\n      </Container>\r\n    </StyledSection>\r\n  );\r\n};\r\n\r\nexport default AboutUs;\r\n","var _rect, _g;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgImg(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 61,\n    height: 153,\n    viewBox: \"0 0 61 153\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"mask\", {\n    id: \"mask0_454_572\",\n    style: {\n      maskType: \"alpha\"\n    },\n    maskUnits: \"userSpaceOnUse\",\n    x: 0,\n    y: 0,\n    width: 61,\n    height: 153\n  }, _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    width: 61,\n    height: 152.5,\n    fill: \"#D9D9D9\"\n  }))), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    mask: \"url(#mask0_454_572)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M17.3414 66.7785C19.9665 68.3916 23.533 71.853 23.3373 72.7077C23.0319 74.0424 19.9525 77.9853 19.8522 80.9639C19.8095 82.2336 21.7665 83.191 22.3283 83.9203C24.2079 86.3604 30.4045 92.4315 30.4956 95.8466C30.5321 97.2147 27.1966 112.113 25.5737 119.757C25.3907 120.619 25.2671 121.441 25.193 122.224L25.5636 121.787C28.5438 118.264 30.2631 116.084 30.7214 115.249C31.4376 113.943 33.4181 107.863 35.2277 107.033C37.0192 106.211 40.1253 106.44 41.2553 107.03L41.2889 107.048C42.0227 107.45 42.7853 107.57 43.5767 107.407L44.5862 107.443C49.7194 107.63 52.6789 107.812 53.4647 107.988C54.7185 108.268 56.1945 109.945 54.7246 110.441C53.7447 110.772 51.5545 111.106 48.154 111.444L46.8158 111.674L46.8961 111.795C47.7526 113.089 48.1679 114.012 48.1421 114.561C48.1155 115.128 47.7208 115.599 46.958 115.974L46.9882 116.073C47.2381 116.902 47.3132 117.407 47.2137 117.588L46.7273 118.475C46.8331 119.56 46.6068 120.291 46.0485 120.671C45.4901 121.05 44.8126 121.273 44.0161 121.338C42.9634 122.236 42.0078 122.761 41.1492 122.915C40.2907 123.068 39.0427 122.904 37.4053 122.421L34.3459 124.86L30.8346 128.719L27.5728 133.385L27.6674 133.584C28.1039 134.513 28.3543 135.161 28.1317 135.567C27.7849 136.199 16.6957 149.459 11.7662 147.621C10.7001 147.223 5.9677 143.709 5.03704 141.419L4.98082 141.581C4.06558 144.188 3.30121 145.383 2.68773 145.166C-4.85186 142.507 -24.6898 132.082 -56.8262 113.892C-47.5908 96.5971 -40.4409 85.627 -35.3766 80.9817C-22.4244 69.1012 -14.2354 67.1085 -12.0928 67.7284C-10.216 68.2713 -3.15331 69.1426 -1.19688 69.4188C0.0802002 69.5991 0.964397 68.5245 2.16977 69.1856L2.26694 69.2396C3.42622 69.8907 4.34557 70.6662 5.2553 70.385C7.64271 69.647 8.41156 67.2348 10.188 65.4956C11.1668 64.5373 14.1201 64.799 17.3414 66.7785Z\",\n    fill: \"white\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M7.6683 66.834C7.99886 66.607 8.39693 66.8782 8.59621 67.1728C9.09447 68.2375 7.57708 68.9395 6.93967 69.5558C5.55773 70.6713 3.75751 71.5148 1.96886 71.4094C1.30123 72.9056 0.650978 74.4072 -0.087532 75.8703C0.492153 79.1177 3.10114 81.6178 5.47064 83.7397C9.08936 87.2598 15.2302 87.4824 18.9838 84.0537C17.856 82.2235 18.6633 79.4938 20.0855 78.0605C20.1936 77.9643 20.4078 78.013 20.4004 78.1826C20.3428 79.352 19.6651 80.4456 19.6749 81.6375C24.3142 84.7921 29.6198 90.1064 30.6549 95.8271C30.9895 98.5887 30.1388 101.475 29.5792 104.156C28.4759 109.711 27.0164 115.195 25.8816 120.739L26.5463 119.936C28.3747 117.725 30.1783 115.457 31.2367 112.769L31.297 112.646C32.2891 110.589 33.7014 106.531 35.9916 106.031C37.9813 105.729 40.4846 105.981 41.9729 107.44C45.8681 107.764 49.8575 106.899 53.6932 107.814C54.8353 108.165 56.1744 109.225 55.168 110.485C53.1598 112.552 49.8261 111.953 47.2128 112.154C48.263 113.165 48.9437 115.49 47.2622 116.27C47.2411 116.289 47.2241 116.302 47.209 116.312C47.8006 117.087 47.4323 118.018 46.8309 118.66C46.7032 118.847 46.7444 118.649 46.7621 118.891C47.1877 120.207 45.5257 122.312 44.1542 121.662C43.6384 122.809 42.3474 123.489 41.1248 123.598C39.8073 123.716 38.3992 122.98 37.1168 123.426C33.4328 125.702 30.6482 129.247 28.3696 132.917C29.3504 134.056 29.6998 136.046 27.9352 136.603C27.9117 136.594 27.8881 136.584 27.8647 136.574C26.2627 137.953 24.997 139.665 23.6591 141.289C21.4339 144.092 18.498 146.175 15.3248 147.786C11.4187 150.08 6.24166 146.537 4.69132 142.824C4.38564 143.407 0.17609 149.544 -0.314804 150C-0.917927 150.453 -1.30153 148.5 2.5 143.75C0.592499 143.771 2.04263 140.814 3.42757 142.132C4.37625 140.106 5.37887 138.107 6.39542 136.115C4.23505 135.702 5.82596 132.614 7.36855 134.252L7.82802 133.409C11.3544 126.947 14.9779 120.51 19.3416 114.573C19.683 114.138 20.0705 113.747 20.4095 113.314C20.4448 113.269 20.514 113.325 20.4884 113.373C15.703 122.41 10.1896 131.073 5.88169 140.377C6.30536 140.811 6.18788 141.506 6.37795 142.053C6.79057 143.284 7.72312 144.285 8.76489 145.026C11.6434 147.174 13.5123 146.96 16.3883 145.01C15.5323 145.085 15.0915 143.882 15.8367 143.428L15.8597 143.415C16.6413 142.93 17.5302 143.965 16.9571 144.674C19.58 143.203 21.6941 141.081 23.6374 138.818L23.8781 138.553C24.7363 137.61 25.7596 136.552 26.9287 135.915C23.624 132.828 21.5027 127.782 23.1473 123.358C20.4903 125.889 17.5252 128.161 14.6302 130.452C13.6725 131.275 12.8992 132.301 11.8141 132.957C11.5624 133.108 11.2651 132.87 11.3204 132.595C12.0491 130.078 14.7386 128.778 16.6349 127.192C17.905 126.404 22.6121 122.208 23.7655 122.824C25.5755 116.468 26.9323 109.919 28.3556 103.443C30.9047 95.0426 28.4767 91.8214 22.9463 85.7029C20.7332 92.6603 23.0237 101.826 16.4166 106.773L16.2501 106.904C15.5454 107.462 14.8896 108.055 14.6661 108.969C14.4492 109.857 14.5531 110.788 14.5494 111.691C14.5061 116.78 10.5343 120.572 7.4725 124.218C3.80798 128.452 0.153515 132.697 -3.54173 136.905C-4.27637 137.746 -4.95286 138.656 -5.77863 139.409C-6.20479 139.797 -6.99771 139.303 -6.63889 138.774C-5.94447 137.747 -5.06185 136.858 -4.25649 135.918C0.845261 129.766 6.37146 123.952 11.3043 117.668C14.845 112.955 12.3829 110.582 14.3038 107.336C15.6243 105.862 17.4926 104.924 18.4209 103.09C21.6768 97.7022 20.1569 90.9506 22.6028 85.3155L21.8989 84.5231C21.5474 84.1266 21.197 83.729 20.8502 83.3284C14.3449 100.627 4.65848 116.636 -5.32911 132.127C-5.97122 132.742 -8.59834 138.061 -9.32707 137.061C-9.53588 137.324 -9.84667 137.525 -10.1811 137.34C-13.2408 135.698 -16.3124 134.076 -19.3767 132.442C-20.767 131.504 -23.0865 130.959 -23.8685 129.431C-25.0814 128.232 -23.1098 124.245 -22.7325 122.645L-22.3285 121.553C-15.7208 103.711 -8.66955 85.6683 2.22787 69.9658C-0.26746 68.7194 -2.21902 71.0812 -3.45395 72.9029C-6.23274 76.8944 -10.974 79.0439 -13.4577 83.2606C-14.0395 84.295 -14.396 85.4107 -14.5042 86.594C-14.6849 89.5397 -14.2613 93.292 -17.121 95.1241C-19.9235 96.2342 -20.0713 96.8499 -20.8319 99.7042C-23.651 108.973 -25.1438 118.552 -26.7901 128.076C-29.0966 130.864 -26.3469 117.326 -26.2066 116.268C-28.2367 116.196 -27.649 113.063 -25.7203 113.875C-24.7397 109.307 -23.6495 104.761 -22.3549 100.271L-22.3169 100.145C-21.7005 98.0802 -21.2944 95.4893 -19.078 94.5735C-13.7949 92.9998 -17.3302 86.0629 -14.3344 82.2891C-15.1991 82.4079 -15.8664 81.418 -15.4324 80.66C-14.9875 79.7827 -13.5878 79.976 -13.3915 80.9392C-10.9658 77.8749 -7.35571 76.0183 -4.9052 72.9805L-4.79119 72.8373C-3.9339 71.7588 -3.18922 70.5377 -2.00958 69.7733C-3.08882 69.8539 -4.16537 69.807 -5.23916 69.6977C-4.39503 71.8545 -8.0644 71.3877 -6.71148 69.5133C-16.6136 67.2995 -20.437 69.6892 -27.9191 75.8892C-27.0205 75.641 -26.4209 76.9288 -27.1702 77.4629C-27.8698 78.0747 -28.9681 77.1813 -28.5202 76.3658L-28.8503 76.6285C-33.2491 80.1361 -37.5376 83.8478 -41.0792 88.241C-39.2399 88.9363 -41.1715 91.4272 -42.2962 89.8093C-45.2927 93.8004 -47.7119 98.1879 -50.031 102.596C-48.1768 102.63 -49.5412 105.221 -50.6092 103.683C-52.5181 107.291 -54.402 110.912 -56.3053 114.523C-56.711 115.291 -57.8834 114.644 -57.4862 113.875C-54.6077 108.302 -51.8366 102.657 -48.7012 97.2222C-43.5773 87.6151 -35.7879 79.9192 -27.0106 73.6099C-17.9939 65.7477 -12.3844 67.3678 -1.62357 69.5461C-0.0842133 68.7516 2.38184 68.5543 3.42677 70.1564C4.98693 69.2742 6.27532 67.9217 7.6683 66.834ZM-26.8994 92.5123C-26.7985 92.4097 -26.642 92.5352 -26.7021 92.6579C-27.4724 94.2446 -28.3936 95.7616 -29.3499 97.2548C-29.9333 98.1666 -30.5307 99.0694 -31.1133 99.9734C-32.6511 102.358 -34.1562 104.763 -35.628 107.19C-35.5814 107.195 -35.5348 107.202 -35.488 107.214C-35.273 107.265 -35.0858 107.368 -34.9268 107.521C-34.7855 107.66 -34.6843 107.821 -34.6232 108.008L-34.6107 108.048C-34.5602 108.2 -34.5491 108.353 -34.5782 108.507C-34.5812 108.656 -34.6187 108.798 -34.6916 108.93L-34.7106 108.963C-34.8161 109.154 -34.9604 109.305 -35.1472 109.417C-35.3276 109.524 -35.5227 109.581 -35.7329 109.589C-35.9501 109.594 -36.153 109.544 -36.3442 109.44C-36.3656 109.431 -36.3871 109.422 -36.4079 109.411C-36.5527 109.339 -36.6688 109.237 -36.7561 109.106L-36.7715 109.09C-37.5095 110.326 -38.2396 111.567 -38.9595 112.814C-39.5877 113.9 -40.2243 114.981 -40.8497 116.069L-41.1618 116.613L-41.8488 117.818C-42.1296 118.314 -42.389 118.795 -42.8176 119.173L-42.8678 119.217C-43.1628 119.464 -43.4985 119.85 -43.9217 119.846C-44.2594 119.843 -44.583 119.598 -44.5836 119.243C-44.5846 118.946 -44.2954 118.678 -44.0248 118.626C-44.023 118.614 -44.0234 118.602 -44.0225 118.589C-44.0054 118.49 -44.0059 118.387 -43.9855 118.289C-43.9207 117.977 -43.7424 117.705 -43.5913 117.427C-43.323 116.938 -43.0381 116.458 -42.7572 115.977C-42.1583 114.953 -41.5553 113.933 -40.945 112.917C-38.8963 109.508 -36.726 106.166 -34.5235 102.854L-33.7795 101.737C-32.79 100.251 -31.7948 98.766 -30.7473 97.3225C-30.6974 97.2534 -30.6474 97.1844 -30.5965 97.1157C-30.6732 97.0051 -30.7312 96.8781 -30.7644 96.7538C-30.8966 96.2549 -30.8171 95.6611 -30.7631 95.1416L-30.7511 95.0231C-30.6968 94.4671 -30.6246 93.9137 -30.451 93.3798L-30.4354 93.3305C-30.3642 93.1016 -30.2466 92.6913 -29.9735 92.7113C-29.8311 92.7218 -29.7793 92.7985 -29.8046 92.9328C-29.8081 92.9502 -29.8211 92.9648 -29.8364 92.9732C-29.8223 93.1605 -29.7522 93.3666 -29.7334 93.5432L-29.6679 94.1454L-29.6374 94.4467C-29.6006 94.8321 -29.5442 95.2126 -29.4793 95.5929C-28.6754 94.52 -27.8367 93.4722 -26.8994 92.5123ZM-28.6438 125.29C-28.0994 125.2 -27.5688 125.702 -27.8707 126.253C-28.174 126.806 -28.882 126.625 -29.098 126.118L-29.1093 126.094L-29.1193 126.069C-29.2375 125.794 -29.0137 125.369 -28.7194 125.303L-28.6966 125.298C-28.679 125.294 -28.6618 125.292 -28.6438 125.29ZM-44.6364 115.119L-44.6041 115.138C-44.4318 115.232 -44.2954 115.364 -44.1941 115.533C-44.1563 115.617 -44.1197 115.702 -44.0824 115.788C-44.0288 115.971 -44.0246 116.157 -44.0682 116.344L-44.173 116.617C-44.2406 116.751 -44.3346 116.858 -44.4573 116.939C-44.5612 117.037 -44.6834 117.103 -44.8233 117.139C-44.9617 117.185 -45.0997 117.194 -45.2389 117.167C-45.3737 117.165 -45.5005 117.132 -45.6197 117.067L-45.652 117.048C-45.8251 116.953 -45.9615 116.822 -46.0628 116.653C-46.1008 116.568 -46.1372 116.483 -46.1746 116.398C-46.2272 116.214 -46.2323 116.028 -46.1887 115.841C-46.1537 115.751 -46.1179 115.66 -46.0838 115.569C-46.0162 115.435 -45.9215 115.328 -45.7996 115.246C-45.6957 115.149 -45.5736 115.082 -45.4337 115.047C-45.2952 115.001 -45.1573 114.991 -45.0179 115.018C-44.8832 115.02 -44.7557 115.054 -44.6364 115.119ZM-0.314804 137.137L-0.0898895 137.303C0.113613 137.483 0.206593 137.757 0.2244 138.021C0.233753 138.162 0.207783 138.295 0.146767 138.42C0.107655 138.555 0.0354309 138.673 -0.0691147 138.774C-0.161896 138.877 -0.273365 138.951 -0.402363 138.995C-0.453941 139.023 -0.508301 139.045 -0.564568 139.06C-0.710228 139.145 -0.870667 139.166 -1.03611 139.186C-1.17111 139.195 -1.29837 139.17 -1.41812 139.111C-1.50617 139.09 -1.58397 139.047 -1.65059 138.984C-1.76331 138.915 -1.85287 138.821 -1.91783 138.702C-1.95211 138.624 -1.98598 138.546 -2.01952 138.468C-2.03826 138.379 -2.05247 138.291 -2.06227 138.201C-2.05362 138.113 -2.04468 138.026 -2.0356 137.94C-1.99734 137.74 -1.8882 137.605 -1.76547 137.452C-1.74518 137.425 -1.72345 137.403 -1.69796 137.381L-1.64845 137.338C-1.51793 137.227 -1.46325 137.195 -1.30153 137.124L-1.23907 137.095C-1.2079 137.081 -1.17654 137.068 -1.14387 137.058C-1.05114 137.03 -0.93877 137.025 -0.843262 137.009C-0.655403 137.005 -0.479298 137.048 -0.314804 137.137ZM-31.4342 119.297L-31.4035 119.314C-31.2697 119.389 -31.162 119.491 -31.0825 119.623L-30.9951 119.824C-30.9538 119.968 -30.9499 120.112 -30.9835 120.259C-31.0116 120.331 -31.0389 120.402 -31.0658 120.473C-31.1185 120.578 -31.1925 120.663 -31.2892 120.727C-31.3696 120.803 -31.4652 120.854 -31.576 120.883C-31.6831 120.918 -31.7923 120.926 -31.9017 120.906C-32.0056 120.903 -32.1047 120.878 -32.1972 120.827L-32.2248 120.811C-32.36 120.737 -32.4671 120.634 -32.5467 120.502L-32.6346 120.302C-32.6759 120.158 -32.6793 120.013 -32.6458 119.866C-32.6176 119.795 -32.5908 119.724 -32.5634 119.652C-32.5107 119.547 -32.4366 119.462 -32.3405 119.399C-32.2592 119.323 -32.164 119.271 -32.0537 119.243C-31.946 119.207 -31.837 119.199 -31.7281 119.221C-31.6239 119.222 -31.5267 119.248 -31.4342 119.297ZM-37.3786 115.638C-37.1841 115.742 -37.0176 115.905 -36.9208 116.104C-36.8269 116.297 -36.7749 116.479 -36.7969 116.697C-36.803 116.757 -36.8085 116.815 -36.8173 116.873C-36.854 117.129 -36.9561 117.35 -37.1801 117.497C-37.3969 117.64 -37.6749 117.602 -37.9136 117.549C-38.1161 117.505 -38.3179 117.406 -38.4571 117.248C-38.5265 117.171 -38.5929 117.092 -38.6448 117.002C-38.7409 116.832 -38.7612 116.683 -38.7863 116.498C-38.7911 116.326 -38.7518 116.165 -38.6695 116.015C-38.5866 115.864 -38.472 115.745 -38.3244 115.656C-38.0356 115.483 -37.6741 115.478 -37.3786 115.638ZM-47.2942 110.432C-47.0496 110.566 -46.8968 110.797 -46.8541 111.069C-46.8113 111.344 -46.8888 111.615 -47.0862 111.819C-47.2949 112.035 -47.627 112.142 -47.9224 112.063C-48.1409 112.005 -48.2974 111.916 -48.4713 111.779C-48.6181 111.662 -48.6893 111.498 -48.7586 111.329C-48.8368 111.136 -48.7645 110.901 -48.6478 110.743C-48.5321 110.585 -48.3923 110.517 -48.2174 110.481L-48.215 110.479L-48.2783 110.489C-48.2534 110.483 -48.2282 110.477 -48.2028 110.47C-48.1922 110.464 -48.182 110.456 -48.1718 110.449C-48.0392 110.369 -47.8963 110.328 -47.7429 110.323C-47.583 110.32 -47.434 110.355 -47.2942 110.432ZM11.2594 138.897C11.4135 138.935 11.5487 139.009 11.6632 139.118C11.7497 139.196 11.8109 139.289 11.8471 139.396C11.8947 139.485 11.9214 139.581 11.9251 139.682L11.9255 139.717C11.9325 139.954 11.8364 140.169 11.6812 140.344C11.4891 140.561 11.1377 140.661 10.8593 140.584L10.8502 140.581L10.8407 140.579C10.7234 140.555 10.6198 140.505 10.5325 140.427C10.434 140.367 10.3568 140.286 10.3012 140.183C10.2305 140.053 10.1887 139.911 10.1782 139.764C10.1703 139.646 10.1921 139.536 10.2428 139.432C10.2619 139.356 10.2985 139.29 10.3526 139.232C10.4127 139.134 10.4936 139.057 10.597 139L10.7993 138.912L10.817 138.909C10.9634 138.866 11.1109 138.862 11.2594 138.897ZM4.62408 128.879C5.83829 129.545 4.80279 131.429 3.59043 130.764C2.37631 130.098 3.41173 128.214 4.62408 128.879ZM-39.6999 104.259C-39.5562 104.3 -39.4314 104.376 -39.3264 104.485C-39.2673 104.56 -39.2091 104.634 -39.1504 104.707L-39.0384 104.964C-39.019 105.014 -39.0197 105.057 -39.0102 105.119L-38.9984 105.196C-38.9824 105.31 -38.9904 105.328 -39.0186 105.536C-39.0646 105.726 -39.155 105.89 -39.29 106.031C-39.355 106.099 -39.4285 106.156 -39.5083 106.203C-39.583 106.249 -39.6607 106.282 -39.7416 106.308L-39.7823 106.32C-39.9207 106.366 -40.0596 106.375 -40.1995 106.349C-40.2984 106.352 -40.3906 106.329 -40.4768 106.282C-40.6203 106.24 -40.7452 106.165 -40.8501 106.055C-40.9092 105.981 -40.9674 105.907 -41.0261 105.833L-41.1382 105.577L-41.1815 105.3L-41.1668 105.159L-41.1523 105.018L-41.0469 104.744C-40.9788 104.609 -40.8849 104.502 -40.7617 104.42C-40.6943 104.352 -40.6144 104.303 -40.5227 104.276C-40.4404 104.227 -40.3515 104.201 -40.2558 104.198C-40.1641 104.171 -40.0703 104.17 -39.9771 104.191C-39.8782 104.189 -39.7859 104.211 -39.6999 104.259ZM21.0935 135.851C21.1965 135.903 21.2794 135.976 21.341 136.07C21.3659 136.097 21.3886 136.127 21.409 136.157C21.4851 136.284 21.5252 136.422 21.5299 136.569C21.5369 136.684 21.5162 136.792 21.4665 136.894C21.4376 136.994 21.3864 137.083 21.3131 137.159L21.2905 137.182C21.2299 137.244 21.1623 137.295 21.0876 137.334C21.0797 137.34 21.0711 137.344 21.062 137.348C20.946 137.412 20.8194 137.448 20.6844 137.452C20.5359 137.455 20.3963 137.422 20.2642 137.35C20.0021 137.207 19.8539 136.941 19.8353 136.647C19.8327 136.606 19.8429 136.561 19.8464 136.522C19.8505 136.486 19.8518 136.437 19.8604 136.397C19.8974 136.247 19.9696 136.115 20.0768 136.003C20.1529 135.919 20.2427 135.859 20.3477 135.823C20.4445 135.772 20.549 135.746 20.6607 135.747C20.8018 135.743 20.9349 135.773 21.0598 135.834L21.0935 135.851ZM-29.6664 106.811C-29.5189 106.847 -29.3899 106.914 -29.2788 107.013L-29.2514 107.039C-29.1628 107.119 -29.1001 107.214 -29.0619 107.324C-29.0081 107.426 -28.9805 107.536 -28.9813 107.653C-28.9774 107.814 -29.0144 107.964 -29.0908 108.106C-29.1689 108.246 -29.2763 108.358 -29.4133 108.441C-29.5473 108.521 -29.6917 108.562 -29.8473 108.567L-29.9761 108.56C-30.0908 108.567 -30.1973 108.546 -30.2981 108.497C-30.3735 108.479 -30.4393 108.442 -30.4944 108.389C-30.5611 108.353 -30.6141 108.302 -30.6531 108.237C-30.7064 108.185 -30.7429 108.124 -30.7638 108.052C-30.8159 107.956 -30.8413 107.853 -30.8403 107.742L-30.8183 107.523L-30.7364 107.313L-30.6034 107.131L-30.5097 107.058C-30.4 106.945 -30.2703 106.867 -30.1198 106.823C-29.9696 106.78 -29.8182 106.776 -29.6664 106.811ZM17.1218 130.441C17.2803 130.472 17.4178 130.54 17.5357 130.644C17.6264 130.693 17.6989 130.763 17.7523 130.853C17.8253 130.924 17.8759 131.007 17.9044 131.105C17.9754 131.237 18.0098 131.378 18.0092 131.531L17.9783 131.829C17.9536 132.019 17.8047 132.237 17.6814 132.375C17.5797 132.488 17.4584 132.568 17.3176 132.616C17.232 132.667 17.1402 132.694 17.0407 132.697C16.9121 132.728 16.7827 132.729 16.6525 132.701L16.6169 132.692L16.6043 132.689C16.6018 132.689 16.6 132.688 16.5982 132.687C16.5967 132.687 16.5948 132.686 16.5938 132.686C16.5434 132.672 16.4945 132.654 16.4462 132.63C16.2957 132.586 16.1643 132.507 16.0525 132.39C15.9912 132.313 15.9295 132.234 15.8676 132.156C15.8276 132.067 15.7889 131.976 15.7494 131.886C15.7341 131.789 15.719 131.691 15.7033 131.595C15.6926 131.438 15.722 131.29 15.7902 131.153C15.8152 131.05 15.864 130.961 15.9375 130.884C15.9878 130.792 16.0572 130.721 16.1457 130.667C16.2556 130.563 16.3846 130.493 16.534 130.456C16.6314 130.44 16.7281 130.425 16.8251 130.41C16.9245 130.42 17.0238 130.43 17.1218 130.441ZM-40.1302 94.724C-39.9696 94.7626 -39.8297 94.8394 -39.7107 94.9541L-39.566 95.1359C-39.5008 95.2368 -39.4646 95.3445 -39.4563 95.4612C-39.4275 95.5757 -39.4297 95.6915 -39.4621 95.8076C-39.4846 95.9784 -39.6135 96.1982 -39.7358 96.3179C-39.8744 96.4541 -40.0215 96.5421 -40.2062 96.5999C-40.5124 96.6947 -40.8446 96.5885 -41.0767 96.3816C-41.1409 96.3247 -41.1925 96.2542 -41.2337 96.1798C-41.3664 95.9454 -41.3828 95.6545 -41.2502 95.415C-41.236 95.3891 -41.2199 95.3641 -41.202 95.3403C-41.186 95.2803 -41.1607 95.2231 -41.1272 95.1666L-40.9846 94.9725L-40.9798 94.9679C-40.8699 94.8557 -40.7403 94.7775 -40.5898 94.7335C-40.4511 94.6938 -40.311 94.6868 -40.1701 94.714L-40.1349 94.7214L-40.1302 94.724ZM41.1692 112.251C42.0543 110.037 42.3276 107.283 38.7578 106.91L38.498 106.873C37.6309 106.751 36.5984 106.649 35.817 107.037C35.2786 107.305 34.9205 108.199 34.602 108.682C33.5122 110.22 32.7145 111.915 32.0149 113.658C30.1675 117.629 27.1844 121.158 23.6707 123.761C23.8508 127.239 24.6696 130.84 27.0056 133.529C28.7494 130.644 30.9175 128.062 33.1133 125.517L33.2065 125.405C34.1652 124.24 35.0199 122.974 36.4658 122.361C39.2351 121.428 41.0369 123.804 43.8397 121.403C43.6664 121.15 44.0266 120.808 44.2719 121.046C45.176 121.773 46.3576 120.005 45.9175 119.181C45.4422 118.353 46.6022 117.944 46.6164 117.197C46.5841 116.854 46.2228 116.645 46.215 116.266C46.3573 114.964 48.93 115.491 46.9989 112.876C46.5728 112.397 45.9169 112.189 45.384 111.894C44.5582 111.537 43.6301 111.748 42.8162 111.528C42.4871 113.984 39.4431 114.852 38.5493 112.257C37.0771 112.642 34.847 114.136 37.7377 114.455C39.3134 114.317 40.8523 113.867 42.4513 114.127L42.4844 114.133C43.0708 114.243 45.8254 114.379 45.2158 115.235C43.9697 115.574 42.6312 114.828 41.3375 114.949C39.6976 114.837 38.0569 115.844 36.5022 114.965C34.9384 116.96 38.1576 116.99 39.4156 116.894L39.7489 116.895C41.4427 116.906 43.1277 116.979 44.6561 117.806C45.0781 118.034 44.7205 118.681 44.2988 118.457C42.3063 117.38 40.0091 117.736 37.8394 117.746C36.9735 118.937 39.1546 119.404 39.9692 119.605C40.7722 119.909 42.4119 119.759 42.8307 120.543C42.7261 121.339 41.6299 120.674 41.1298 120.659C42.4443 122.496 40.5842 122.178 40.8286 120.597L40.6622 120.568C39.2466 120.315 35.8947 119.552 37.3503 117.716C36.8066 117.67 36.2097 117.493 35.7853 117.12C33.6016 118.243 32.0574 116.498 35.519 116.815C35.0499 116.177 35.4602 114.93 36.2961 114.84C34.1699 113.499 37.0696 112.086 38.4022 111.816C38.3639 111.682 38.3293 111.548 38.3009 111.415C37.6387 111.378 37.0034 111.227 36.3838 110.957C35.791 110.698 36.1926 109.667 36.7933 109.894C37.4369 110.138 38.0745 110.28 38.7652 110.268C39.7514 110.361 39.2118 111.99 39.9809 112.48C40.3689 112.805 40.8727 112.585 41.1692 112.251ZM12.1744 121.187C12.3671 121.293 12.4941 121.467 12.5638 121.672C12.6336 121.877 12.5885 122.101 12.4963 122.289C12.4461 122.39 12.3754 122.47 12.2842 122.531C12.2072 122.603 12.1165 122.652 12.0114 122.679C11.8111 122.737 11.5757 122.711 11.3933 122.611C11.2006 122.506 11.0736 122.331 11.0037 122.126C10.9346 121.921 10.979 121.697 11.0718 121.508C11.1215 121.409 11.1923 121.328 11.2834 121.267C11.3527 121.202 11.4335 121.155 11.5252 121.128L11.5562 121.119C11.7571 121.061 11.9919 121.087 12.1744 121.187ZM20.4219 119.995L20.4524 120.012C20.6149 120.103 20.7436 120.226 20.8396 120.385C20.8748 120.466 20.9105 120.545 20.9448 120.626C20.9949 120.8 20.9991 120.975 20.9579 121.151C20.914 121.334 20.8261 121.495 20.6952 121.63C20.63 121.714 20.5469 121.784 20.451 121.831C20.2987 121.92 20.1347 121.969 19.9581 121.974C19.7758 121.979 19.6049 121.937 19.4442 121.85C19.2845 121.762 19.1571 121.64 19.0634 121.484C18.9732 121.332 18.9261 121.167 18.92 120.992C18.9075 120.885 18.922 120.777 18.9576 120.677C19.0014 120.494 19.0893 120.334 19.2203 120.198C19.3377 120.078 19.4751 119.991 19.6334 119.938L19.6703 119.927C19.8001 119.883 19.9305 119.874 20.0624 119.899C20.1893 119.902 20.3091 119.933 20.4219 119.995ZM-24.1541 95.6101C-24.0753 95.6292 -24.0077 95.6663 -23.9493 95.7224C-23.8499 95.7829 -23.7714 95.8658 -23.7139 95.9698C-23.6843 96.0389 -23.6544 96.1073 -23.6243 96.1756L-23.6089 96.2547C-23.5769 96.4255 -23.5854 96.4469 -23.6096 96.6669C-23.6339 96.7838 -23.6841 96.8864 -23.7612 96.9743C-23.7983 97.0419 -23.8505 97.0953 -23.9159 97.1353C-23.9694 97.1892 -24.0314 97.2275 -24.1041 97.2479C-24.1684 97.286 -24.2377 97.307 -24.3126 97.3095C-24.4209 97.3357 -24.531 97.3343 -24.6419 97.3036L-24.8558 97.2212C-24.8796 97.2034 -24.9045 97.1849 -24.9289 97.1679C-24.9596 97.1498 -24.988 97.1296 -25.0146 97.1076L-25.0411 97.0846L-25.0645 97.0622C-25.0949 97.0317 -25.1225 96.9983 -25.147 96.9615C-25.2016 96.9074 -25.2403 96.844 -25.2622 96.7694C-25.316 96.67 -25.343 96.561 -25.3419 96.4448L-25.3386 96.4081C-25.3388 96.3668 -25.3359 96.3264 -25.3278 96.285C-25.3287 96.2122 -25.312 96.1443 -25.2778 96.0798C-25.2496 95.9847 -25.2021 95.901 -25.1338 95.8288L-25.1103 95.8052L-24.946 95.6747C-24.8775 95.6377 -24.8065 95.6006 -24.7307 95.5807C-24.686 95.5705 -24.581 95.5535 -24.5238 95.5474L-24.4892 95.5445C-24.3706 95.5372 -24.2584 95.5589 -24.1541 95.6101ZM-34.5933 88.161C-34.1717 87.7088 -33.3917 87.9209 -33.2224 88.5018C-33.0533 89.0829 -33.597 89.6812 -34.1952 89.5267L-34.2637 89.5084C-34.8418 89.3588 -35.0478 88.6493 -34.6406 88.2122L-34.5933 88.161ZM31.3269 118.743C31.3516 118.689 31.4284 118.707 31.445 118.756C31.6719 119.401 31.693 120.037 32.0646 120.644C32.4385 121.254 33.0134 121.537 33.4709 122.049C33.6259 122.224 33.4855 122.482 33.2549 122.443C31.9747 122.229 30.7858 119.922 31.3269 118.743ZM-19.1095 90.9731C-18.9696 91.0016 -18.8462 91.0621 -18.7414 91.1545C-18.6599 91.1992 -18.5953 91.2612 -18.5481 91.34C-18.483 91.4035 -18.4385 91.4786 -18.4125 91.565C-18.3667 91.6421 -18.343 91.7262 -18.3394 91.816C-18.3074 91.947 -18.3096 92.0783 -18.346 92.2103L-18.4461 92.4675L-18.6092 92.6902C-18.6788 92.7447 -18.7491 92.8003 -18.8179 92.8554L-18.9621 92.9222C-19.0783 92.9749 -19.0895 92.9699 -19.3185 93.0015C-19.4581 93.0103 -19.5901 92.9851 -19.7121 92.9242C-19.804 92.9027 -19.8837 92.859 -19.952 92.7926C-20.0325 92.7484 -20.0974 92.6863 -20.1453 92.607C-20.2097 92.544 -20.2549 92.4685 -20.281 92.3819C-20.344 92.2642 -20.3747 92.1377 -20.3738 92.002C-20.3653 91.9139 -20.356 91.8248 -20.3466 91.7373L-20.2475 91.4795L-20.0834 91.2573L-20.0775 91.2509C-19.9526 91.1242 -19.8049 91.0352 -19.6352 90.9848L-19.3792 90.9444C-19.284 90.9376 -19.1982 90.9546 -19.1095 90.9731ZM24.0266 114.866C24.3218 114.936 24.5628 115.165 24.6475 115.456C24.7324 115.748 24.6526 116.069 24.4414 116.287C24.2347 116.499 23.9225 116.592 23.6343 116.522C23.5482 116.501 23.4661 116.47 23.3912 116.425C23.2629 116.353 23.1604 116.254 23.0839 116.128L23.001 115.937C22.966 115.833 22.9592 115.73 22.9792 115.625C22.9805 115.515 23.0105 115.412 23.0686 115.315L23.0774 115.297C23.0938 115.26 23.1178 115.227 23.1478 115.199C23.1676 115.163 23.1925 115.131 23.2206 115.101C23.4253 114.888 23.7399 114.798 24.0266 114.866ZM-29.9046 82.0222C-29.8206 82.0646 -29.7529 82.1234 -29.7024 82.2005C-29.6406 82.2658 -29.599 82.3416 -29.5779 82.4303C-29.5481 82.5166 -29.5429 82.6038 -29.5594 82.6911C-29.5607 82.7834 -29.5862 82.8694 -29.6341 82.9503C-29.6936 83.0587 -29.7768 83.1444 -29.8813 83.2076C-29.9352 83.2312 -29.989 83.2546 -30.0423 83.2772C-30.1576 83.3116 -30.2735 83.3143 -30.3912 83.2871L-30.4616 83.275C-30.566 83.2588 -30.6522 83.2139 -30.7364 83.1521C-30.8246 83.0868 -30.8985 83.0125 -30.9437 82.9106C-30.9953 82.8244 -31.0224 82.7312 -31.0252 82.6309L-31.01 82.4825C-30.9988 82.4357 -30.9699 82.372 -30.9493 82.3278C-30.9457 82.3213 -30.9427 82.3158 -30.94 82.3087C-30.9202 82.2726 -30.8609 82.1908 -30.8318 82.1596C-30.7697 82.0948 -30.6885 82.0453 -30.6076 82.0102C-30.5318 81.9687 -30.4488 81.949 -30.3599 81.9496L-30.3513 81.9483L-30.3419 81.9474C-30.3125 81.9442 -30.2821 81.9416 -30.2512 81.938C-30.1291 81.9351 -30.013 81.9628 -29.9046 82.0222ZM18.283 107.596C18.4311 107.678 18.5483 107.791 18.6355 107.936C18.639 107.94 18.6426 107.944 18.6452 107.948C18.728 108.088 18.7718 108.238 18.7771 108.4C18.7815 108.568 18.7432 108.725 18.6629 108.872C18.5822 109.019 18.4705 109.135 18.3268 109.221C18.1873 109.304 18.0369 109.348 17.8748 109.353C17.8697 109.354 17.8641 109.353 17.8585 109.352C17.69 109.356 17.5317 109.318 17.383 109.237C17.2362 109.156 17.1185 109.043 17.0313 108.899C16.8616 108.615 16.8549 108.256 17.0134 107.967C17.1721 107.678 17.4785 107.49 17.8083 107.482C17.9769 107.478 18.1357 107.516 18.283 107.596ZM-19.5917 85.4291L-19.5662 85.4424C-19.466 85.4924 -19.3856 85.5631 -19.3262 85.6548C-19.2539 85.7317 -19.2041 85.823 -19.1772 85.9281L-19.104 86.1152L-19.0822 86.1686C-19.0787 86.1775 -19.0753 86.1865 -19.0722 86.1955C-19.0316 86.3369 -19.0285 86.4785 -19.0614 86.6219C-19.0895 86.6994 -19.1189 86.7748 -19.1505 86.8503C-19.2318 87.0467 -19.4453 87.1768 -19.6378 87.2424C-19.7408 87.2763 -19.8446 87.2831 -19.9497 87.264C-20.0594 87.2619 -20.1631 87.2313 -20.2593 87.1737C-20.4507 87.046 -20.618 86.8987 -20.6771 86.6638C-20.6837 86.6361 -20.6888 86.608 -20.6947 86.5794L-20.7373 86.3825C-20.7765 86.2454 -20.7803 86.107 -20.7475 85.9683C-20.7217 85.8993 -20.6954 85.8317 -20.6692 85.7642C-20.5735 85.5696 -20.3833 85.4425 -20.1849 85.3754C-20.0015 85.313 -19.7651 85.3431 -19.5917 85.4291ZM-23.1968 80.9139C-22.2336 81.4422 -23.0552 82.9357 -24.0165 82.4085C-24.9789 81.8807 -24.1573 80.3871 -23.1968 80.9139ZM26.3804 105.38L26.4104 105.397C26.5693 105.486 26.6965 105.607 26.7904 105.764L26.8942 106C26.9426 106.172 26.9473 106.343 26.9077 106.516C26.8747 106.601 26.8417 106.685 26.8101 106.769C26.7477 106.894 26.6591 106.993 26.5457 107.069C26.4506 107.159 26.3371 107.221 26.2066 107.254C26.0789 107.296 25.9508 107.305 25.8214 107.28C25.6853 107.278 25.5571 107.241 25.4383 107.17C25.2787 107.081 25.1513 106.96 25.0575 106.803C25.0228 106.724 24.9889 106.645 24.9536 106.567C24.909 106.409 24.9015 106.251 24.9326 106.091L24.9412 106.051L25.0383 105.797C25.1003 105.673 25.1886 105.573 25.3021 105.498C25.3979 105.407 25.5109 105.346 25.6412 105.313C25.7691 105.271 25.898 105.262 26.0266 105.287C26.1512 105.289 26.2694 105.32 26.3804 105.38ZM23.5764 100.203C23.6641 100.248 23.7341 100.309 23.7878 100.389C23.8509 100.456 23.8937 100.536 23.9172 100.627C23.9844 100.789 23.9528 101.019 23.868 101.174C23.7831 101.329 23.6053 101.48 23.4334 101.51C23.3134 101.544 23.1923 101.547 23.0704 101.519L22.8924 101.45C22.7272 101.369 22.6095 101.195 22.5526 101.026C22.5411 100.992 22.5306 100.959 22.5186 100.926C22.4669 100.772 22.5003 100.604 22.5695 100.462C22.6068 100.387 22.6602 100.327 22.7285 100.282C22.7865 100.227 22.8545 100.19 22.9333 100.17C22.9677 100.162 23.0015 100.153 23.0364 100.144C23.2251 100.097 23.4033 100.119 23.5764 100.203ZM53.797 110.295C54.8123 109.888 54.7475 109.165 53.7323 108.847C52.0399 108.196 50.0109 108.379 48.2316 108.332C46.2784 108.302 44.3557 108.106 42.3985 108.011C42.8213 108.751 42.9591 109.624 42.9377 110.522C43.9617 110.37 45.0298 110.614 45.9506 111.074C48.447 110.404 51.354 111.532 53.797 110.295ZM-19.4539 73.3212C-19.2893 73.4125 -19.156 73.5361 -19.0536 73.693L-19.0321 73.7272L-18.9183 73.9897C-18.8708 74.1314 -18.861 74.2741 -18.8878 74.4174C-18.8907 74.5676 -18.9326 74.7098 -19.0114 74.8426C-19.081 74.9804 -19.1779 75.0911 -19.303 75.1744C-19.4099 75.2748 -19.535 75.3424 -19.6801 75.3785C-19.7738 75.4199 -19.8747 75.4369 -19.9814 75.4315C-20.078 75.4206 -20.174 75.4114 -20.271 75.4016C-20.3742 75.3811 -20.4781 75.3289 -20.5761 75.2812C-20.7488 75.1853 -20.8859 75.0534 -20.9884 74.8839L-21.1005 74.6273C-21.1462 74.4888 -21.1566 74.3493 -21.13 74.2085C-21.1273 74.073 -21.0936 73.9453 -21.0278 73.8253L-21.009 73.7927C-21.005 73.7854 -21.0004 73.7769 -20.9948 73.7692C-20.936 73.6881 -20.8761 73.6077 -20.8165 73.5272C-20.7157 73.416 -20.5958 73.3359 -20.4569 73.2892C-20.4103 73.2569 -20.3609 73.237 -20.3065 73.2282C-20.1173 73.1729 -19.9272 73.1688 -19.7344 73.2129C-19.6413 73.2496 -19.5476 73.2852 -19.4539 73.3212ZM24.8665 94.4367L24.8944 94.4526C25.0194 94.5211 25.1179 94.6161 25.1914 94.7372C25.2187 94.7993 25.2452 94.8607 25.2717 94.9222C25.3107 95.0557 25.3141 95.1901 25.2824 95.3246L25.2069 95.5217C25.1572 95.6187 25.0894 95.6961 25.0006 95.7548C24.9262 95.8247 24.8383 95.8729 24.7361 95.8988C24.637 95.9323 24.537 95.9391 24.4356 95.9196C24.3302 95.9184 24.2306 95.8891 24.1372 95.8332C24.0131 95.7651 23.9137 95.6695 23.8408 95.5476C23.8138 95.487 23.7864 95.4249 23.7599 95.3634C23.7251 95.2416 23.7194 95.1185 23.743 94.9952L23.7502 94.9615L23.826 94.7643C23.8746 94.667 23.9423 94.5896 24.0309 94.531C24.1059 94.4601 24.1949 94.4124 24.2955 94.3868C24.3957 94.3536 24.4957 94.3472 24.5962 94.3661C24.6918 94.3676 24.782 94.3915 24.8665 94.4367ZM-12.1435 72.8319L-12.1115 72.8501C-11.9277 72.9522 -11.7818 73.0925 -11.6733 73.2725C-11.6338 73.363 -11.5941 73.4534 -11.5551 73.5447C-11.4978 73.7412 -11.4931 73.939 -11.5389 74.1392L-11.6513 74.4296C-11.723 74.5734 -11.8243 74.6878 -11.9548 74.7741C-12.0651 74.8789 -12.1955 74.9495 -12.3463 74.9872C-12.4924 75.0362 -12.6403 75.0466 -12.7896 75.0178C-12.9459 75.0151 -13.0929 74.9732 -13.2305 74.8904C-13.4148 74.7893 -13.5608 74.649 -13.6693 74.4689C-13.7087 74.3786 -13.7478 74.2874 -13.7883 74.1964C-13.8442 73.9994 -13.8489 73.8015 -13.8035 73.6022L-13.6907 73.311C-13.6196 73.168 -13.5178 73.0528 -13.3873 72.9664C-13.2775 72.8628 -13.1465 72.7911 -12.9971 72.7538C-12.8496 72.7046 -12.7017 72.6939 -12.5525 72.7228C-12.4081 72.7252 -12.2723 72.7619 -12.1435 72.8319ZM23.548 89.0943C23.6445 89.1182 23.7287 89.1644 23.8007 89.2329C23.9237 89.3075 24.0206 89.4101 24.0917 89.5395L24.2021 89.793C24.2033 89.7971 24.2046 89.8016 24.2053 89.8068C24.2571 89.987 24.2618 90.1693 24.2194 90.3521L24.1161 90.6197C24.0501 90.751 23.9573 90.8566 23.8379 90.9359C23.7444 91.0237 23.636 91.0852 23.5127 91.1222L23.4658 91.1354C23.3287 91.1808 23.1917 91.1912 23.0532 91.1647C22.9553 91.1677 22.8629 91.1448 22.7777 91.0981C22.6362 91.0577 22.5123 90.9826 22.4081 90.8735C22.351 90.8 22.2922 90.7268 22.2336 90.6538L22.2171 90.6265C22.0167 90.3131 22.0197 89.8881 22.1961 89.5665C22.3725 89.2449 22.7298 89.0131 23.1019 89.0134C23.1123 89.0144 23.1222 89.0137 23.1331 89.0137C23.2805 89.0042 23.4189 89.0307 23.548 89.0943Z\",\n    fill: \"#1C1C1C\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M49.3888 39.8734C45.2342 35.7032 27.3859 27.8525 26.792 27.9365C25.7886 28.1314 21.4394 28.1104 20.6901 28.2393C13.2307 30.6533 13.6538 40.5459 9.99887 46.389C8.84721 48.541 6.864 49.9949 5.31585 51.8237C4.54722 52.8056 3.97415 53.9429 4.00498 55.2198C4.04391 57.4926 5.93842 58.9881 7.25295 60.6169C7.89802 61.4439 8.40421 62.3925 8.81801 63.3536C11.3243 70.3348 12.4164 74.7731 20.0559 77.6984C19.9061 78.0577 20.0237 78.556 20.4795 78.6087C21.5469 78.7318 22.6199 78.8299 23.6848 78.9757C23.6242 79.5323 24.0935 79.9581 24.6792 79.7584L24.6797 79.7625C27.0339 79.334 29.0613 78.0947 30.8921 76.5816C32.0429 75.7606 33.1228 74.8376 34.1176 73.8229C34.2301 73.7081 34.2916 73.584 34.3145 73.4607C38.8086 68.9541 42.4821 63.6211 45.1248 57.8321C45.6716 56.6386 46.0929 55.3564 46.7785 54.2328C47.398 53.2176 48.387 52.4783 49.261 51.6958C53.2861 48.539 52.6311 43.3408 49.3888 39.8734Z\",\n    fill: \"white\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M53.6843 33.5192L53.7595 33.5072C54.5763 33.3723 55.4367 33.0802 56.121 33.742C56.6823 34.2849 56.7159 35.0144 56.4952 35.7528C56.8116 35.6527 57.1264 35.5421 57.4407 35.4216C58.2948 35.0946 59.2796 36.047 59.0069 36.911C58.4591 38.6523 57.5987 40.2583 56.4316 41.6635C56.2547 41.8762 56.0699 42.0834 55.8775 42.2828C56.4621 42.0406 57.0328 41.7666 57.5834 41.4503C58.1805 41.1064 58.7496 41.7513 58.4964 42.3295C58.4311 42.4793 58.3592 42.6279 58.2813 42.7744C58.4599 42.9736 58.4877 43.2854 58.2759 43.5332C57.109 44.8963 55.8676 46.1909 54.5581 47.4143C55.5769 47.4283 56.5976 47.6651 57.2681 48.4174C58.3325 49.6135 57.8556 51.2297 56.9157 52.3305C55.7339 53.7143 53.9943 54.4608 52.2054 54.5945C51.9198 54.744 51.635 54.8963 51.3551 55.0574C50.9778 55.7387 50.4802 56.3517 49.883 56.8473C49.2117 57.4036 48.3783 57.7456 47.5109 57.8773C47.0394 58.2275 46.2829 58.2572 45.8353 57.8885L45.812 57.8687L45.8106 57.8691C45.6874 58.3969 45.544 58.9197 45.3853 59.4353C44.1553 63.4296 41.7321 66.9607 39.1009 70.1601L39.0169 70.2621C36.67 73.1066 34.162 76.0097 31.1765 78.2086C28.4766 80.1965 25.0926 81.3909 21.7754 80.3284C17.873 79.0787 14.5643 75.8526 12.5235 72.3794C11.784 71.1204 13.7399 69.9442 14.4688 71.2117C15.5213 73.0401 16.8691 74.6532 18.4902 76.0028C20.0061 77.2632 21.8423 78.4162 23.8447 78.625C26.6334 78.9155 29.2561 77.3276 31.3096 75.6046C32.5205 74.5875 33.6283 73.4595 34.7132 72.3117C36.109 70.8367 37.4803 69.3338 38.7576 67.754C41.1391 64.8068 43.1924 61.5157 44.3685 57.8953C44.7441 56.7406 45.0407 55.5341 45.2298 54.3217C45.2115 54.2188 45.2006 54.1092 45.1993 53.9952C45.1847 53.1145 45.339 52.2072 45.4526 51.3258C45.4407 50.7565 45.3966 50.1911 45.3308 49.6259C45.0809 49.0567 44.8642 48.4759 44.6997 47.8816C46.1835 47.773 47.6366 47.415 48.952 46.6654C49.1689 46.5417 49.1939 46.3235 49.1132 46.1485C48.1771 46.5387 47.1359 46.7328 46.0943 46.8395C45.5253 46.9589 44.9449 47.0281 44.3602 47.0577C44.0141 46.9483 43.6752 46.8176 43.3501 46.6846C42.4242 46.3057 41.5683 45.7881 40.765 45.1968C39.0276 43.9185 32.2978 37.386 28.4902 36.4021C27.6971 36.1972 27.0263 36.6417 26.336 37.026C25.7365 37.3608 25.0981 37.56 24.4195 37.6401L24.344 37.6486C23.0277 37.7859 19.9634 38.8238 18.1341 40.2469C15.7722 42.0842 10.814 48.7526 11.2403 49.0671C12.3549 49.8906 12.6741 50.8901 13.2819 52.1081C13.3223 52.1882 13.2183 52.2878 13.1517 52.2115C12.6324 51.6229 12.0079 51.1008 11.391 50.6154C10.8334 50.1758 10.1971 49.8027 9.4839 49.6972C8.38942 49.5356 7.52754 50.0548 6.87349 50.8145C6.6177 51.1117 6.39361 51.4456 6.19933 51.791L6.14354 51.8915C5.54319 52.9873 5.08126 54.3137 5.43323 55.558C5.58274 56.0871 5.91415 56.5702 6.35884 56.8973C6.84536 57.2557 7.29962 57.1963 7.84975 57.3378C8.4832 57.5008 8.71592 58.1045 8.40234 58.5532C8.46355 58.7206 8.51801 58.8915 8.57053 59.0637L8.57039 59.0642L8.57095 59.0651C8.62675 59.1391 8.67274 59.2222 8.70718 59.311C8.76305 59.4574 8.79768 59.6029 8.81064 59.7462C8.95039 59.8626 9.05266 60.032 9.08843 60.259C9.16281 60.7252 9.21571 61.1845 9.24838 61.6411C9.41114 62.2692 9.57154 62.8971 9.72282 63.5285C9.90536 64.2877 10.0693 65.0518 10.2378 65.8144L10.3225 66.1956C10.4142 66.6063 10.5049 67.0164 10.5951 67.4274L10.6227 67.5488C10.7168 67.9561 10.7932 68.2606 10.6035 68.6686C10.4619 68.9707 10.0392 68.9967 9.81552 68.7873C9.47102 68.4637 9.45758 68.0464 9.38866 67.6019L9.18016 66.3103C9.1306 65.9987 9.07869 65.687 9.02769 65.3757C8.75671 65.749 8.15517 65.8397 7.75837 65.645L7.66619 65.599C6.74052 65.1305 5.70606 64.3963 5.36575 63.3757C4.88228 63.5191 4.35946 63.5541 3.80117 63.4408C2.53256 63.1837 1.75264 61.9785 1.8131 60.8293C0.764076 60.7276 -0.235588 60.2745 -1.00656 59.5033C-1.45082 59.0577 -1.27187 58.2973 -0.681385 58.0956L-0.655067 58.0871L-0.648163 58.0846C-0.669968 57.9438 -0.645363 57.7996 -0.579708 57.6639C-0.500034 57.4991 -0.290039 57.3932 -0.232048 57.2304C-0.0109329 56.6093 -1.17307 56.5219 -1.5365 56.4833C-1.6059 56.4759 -1.66502 56.458 -1.71545 56.4327C-2.24554 56.3151 -2.41311 55.4417 -1.90171 55.0772C-0.757664 54.2631 0.377991 53.4337 1.5275 52.6251C1.44626 52.6107 1.36419 52.5934 1.28507 52.5729C0.172596 52.2881 -0.746883 51.1595 0.123066 50.1071C0.32637 49.8595 0.680107 49.8076 0.975075 49.8585C1.55001 49.9569 1.847 50.2765 2.3047 50.325C2.8198 50.381 3.4332 50.3016 3.96698 50.2027C4.53644 50.098 5.07403 49.924 5.58949 49.6981C6.02142 49.1961 6.5276 48.7675 7.11715 48.4834C7.15277 48.4668 7.18839 48.4502 7.22443 48.435C5.36592 46.7522 6.79976 44.802 6.87914 42.4204L6.88421 42.2221C6.92762 40.6237 7.13993 38.9112 8.24188 37.6683C8.43703 37.4487 8.652 37.2545 8.88242 37.0892C8.69939 37.0165 8.51645 36.9415 8.33443 36.867C7.91642 36.6955 7.7948 35.9684 8.15612 35.6808C8.34578 35.5305 8.54021 35.3913 8.73901 35.2617C9.28877 34.9051 9.87518 34.629 10.4965 34.4298C9.84484 34.0495 9.18262 33.6863 8.57042 33.2516C7.99179 32.8415 7.52804 32.1472 7.93786 31.4451C8.3296 30.7763 9.20745 30.5888 9.94169 30.5604C10.8823 30.1351 11.9018 29.9121 12.927 29.8931C12.7917 29.7738 12.6495 29.6623 12.4992 29.5593L12.4234 29.5085C11.9972 29.229 11.6642 28.8872 11.3625 28.4795C11.0928 28.1146 11.3758 27.6118 11.7518 27.4865C12.9682 27.0796 13.9647 27.9759 14.5953 28.9373C14.5765 28.8247 14.5502 28.7116 14.516 28.5986L14.4945 28.5307C14.2806 27.8834 15.2956 27.5897 15.5088 28.2348C15.5761 28.4386 15.623 28.6457 15.652 28.8539L15.6744 28.8377C16.8912 27.9851 18.3071 27.4011 19.7633 27.1096L20.1043 27.0432C22.7249 26.5272 23.6697 26.1196 25.9382 27.6514C26.0745 27.1613 26.3524 26.6782 26.5956 26.2891L26.6286 26.2367C27.5486 24.7767 29.0967 23.2743 30.9413 23.4038C31.4199 23.4385 31.6963 23.9625 31.3541 24.3449C31.1125 24.6162 30.8598 24.8705 30.5903 25.1048C31.0972 24.9428 31.615 24.8159 32.1395 24.7251C34.2774 24.3549 36.8245 24.425 38.5967 25.8309C39.5699 26.6045 40.0428 27.7413 40.6331 28.7979C41.2261 29.8608 42.0511 30.7508 43.0432 31.4528C44.4287 32.4345 46.0074 33.0774 47.6182 33.609C48.8635 33.7219 50.1203 33.7435 51.3758 33.7126C52.1476 33.6936 52.921 33.6345 53.6843 33.5192ZM9.43221 51.9178C9.78947 52.0089 10.14 52.2024 10.4108 52.4533C11.1094 53.1016 11.4913 54.1934 11.0695 55.0745C10.8788 55.4725 10.3649 55.6715 9.9493 55.5726C9.47793 55.4611 9.23575 55.0679 9.17263 54.6162C9.10411 54.1327 9.24398 53.7261 9.10076 53.2426L9.06705 53.1324C8.94019 52.7307 8.71764 52.1792 8.31477 52.0353C8.25555 52.0137 8.25546 51.9172 8.32729 51.918C8.71968 51.9187 9.03426 51.8152 9.43221 51.9178ZM15.8507 50.199C16.0577 50.1606 16.1715 50.4012 16.0121 50.5322L16.0003 50.5413C15.6346 50.806 15.6036 51.3349 15.645 51.747C15.6801 52.1025 15.2111 52.1647 15.0368 51.9245C14.5478 51.2477 15.0918 50.3371 15.8507 50.199ZM24.1615 40.7797C24.1972 40.686 24.3328 40.7134 24.3152 40.8158C24.0227 42.5199 23.4682 43.867 22.5562 45.3386L22.4748 45.469C21.5868 46.8812 20.4836 48.2863 18.9427 49.001C18.5861 49.1657 18.2569 48.7731 18.5156 48.4618C19.5518 47.2162 20.7994 46.1781 21.7762 44.8783C22.7973 43.5196 23.5539 42.3665 24.1615 40.7797ZM16.6935 43.4609C16.9756 43.1179 17.7797 43.0467 17.8661 43.5943C17.8945 43.7798 17.6889 43.8755 17.5421 43.8577C17.4047 43.8402 17.3373 43.7237 17.214 43.6849C17.1141 43.6538 17.0176 43.6738 16.9318 43.7266L16.9136 43.7383C16.7351 43.8574 16.5735 43.6072 16.6935 43.4609ZM18.1246 40.2805C18.5503 40.0054 19.1732 40.0228 19.4554 40.4946C19.5483 40.6504 19.366 40.8553 19.2033 40.7565L19.1068 40.6983C18.8162 40.5249 18.5164 40.3683 18.1643 40.4192C18.0858 40.4304 18.0679 40.3181 18.1246 40.2805ZM24.7239 30.0097C23.8316 28.8272 22.3898 28.6621 21.0111 28.8817C20.8971 28.8999 20.8185 28.9511 20.7701 29.0192C21.5538 29.1218 22.3317 29.334 23.0636 29.5584C23.662 29.7417 24.2457 29.9641 24.8051 30.2323C24.8046 30.1611 24.7811 30.0855 24.7239 30.0097Z\",\n    fill: \"#1C1C1C\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M23.8182 71.1547C23.3349 70.5592 23.0119 69.8306 22.9027 69.0664C22.8648 68.8008 22.9372 68.5819 23.0665 68.4164C23.2119 68.2303 23.4344 68.1113 23.6674 68.0774C23.9012 68.0435 24.1417 68.0955 24.3245 68.2365C24.4834 68.3591 24.6042 68.5491 24.6328 68.8216L24.6398 68.8768C24.702 69.336 24.8696 69.7767 25.1333 70.1462C25.3875 70.5023 25.7313 70.792 26.156 70.9661C26.9649 71.2978 27.7159 71.1736 28.5808 70.9201C28.6887 70.8874 28.7979 70.8525 28.908 70.8166C28.9888 70.7736 29.0734 70.7639 29.1535 70.7783C29.2424 70.7944 29.3266 70.8425 29.3895 70.9123C29.4502 70.9797 29.4901 71.0662 29.4989 71.157C29.5072 71.2433 29.4888 71.3342 29.432 71.4192C29.0629 71.9711 28.4759 72.3225 27.8225 72.4927C27.0968 72.6818 26.2917 72.6465 25.635 72.4287C24.9114 72.1888 24.289 71.7349 23.8182 71.1547ZM30.9691 63.4389C31.4353 64.2478 31.957 65.824 30.6263 66.4656C29.2308 66.9095 28.5403 65.1442 28.1764 64.3175C27.7987 63.6244 26.617 64.2262 26.9183 64.9589C29.6143 70.8122 34.8181 65.6946 31.5971 63.1329C31.2425 62.8508 30.8581 63.2068 30.9691 63.4389ZM24.9782 55.0643C25.5818 54.1471 27.1621 54.7304 26.7866 55.7596C26.4502 56.6816 25.8685 57.3789 25.0655 57.9346C24.2983 58.4655 23.5658 57.6197 23.8616 56.9154C24.2582 55.9713 24.6028 55.6348 24.9782 55.0643ZM36.3312 60.7386C36.6812 60.5834 37.0752 60.5625 37.371 60.8587C38.2953 61.7843 37.1134 63.1696 36.3094 63.7186C35.8727 64.0166 35.1363 63.749 35.029 63.2168C34.8543 62.3492 35.2647 61.0329 36.2211 60.7971C36.2549 60.7764 36.2908 60.7564 36.3312 60.7386ZM28.543 51.5577L28.7336 51.6226C29.3225 51.8246 30.0404 52.102 30.1836 52.7433C30.2596 53.0834 30.0952 53.5479 29.7035 53.6187C29.0144 53.7433 28.569 53.3043 27.9792 53.0233C27.4931 52.7919 26.9975 52.6215 26.4723 52.5024C25.3204 52.2409 24.2238 52.3157 23.0603 52.4199C22.9076 52.4336 22.872 52.2283 22.9825 52.1531C24.0012 51.4604 25.386 51.192 26.6033 51.233C27.253 51.2549 27.9266 51.3469 28.543 51.5577ZM37.634 55.9834L37.7522 56.0836C39.0343 57.1808 40.5842 58.8178 40.4895 60.6171C40.4052 60.8327 40.354 60.8607 40.316 60.8765L40.3034 60.8818C40.2717 60.8957 40.2388 60.9208 40.1366 60.9003C40.1155 60.8813 40.0944 60.8618 40.0733 60.8418C39.8041 60.5869 39.6177 60.337 39.4415 60.0871L39.251 59.8152C39.0296 59.5005 38.8025 59.1897 38.5366 58.9064C37.9692 58.3018 37.3455 57.753 36.6701 57.2723C36.5237 57.1681 36.402 57.0326 36.3328 56.8769C36.2671 56.7291 36.2462 56.5628 36.2936 56.3831C36.355 56.1505 36.4546 56.0035 36.6656 55.8791C36.8242 55.7857 36.9951 55.7544 37.161 55.7736C37.3301 55.7931 37.4948 55.8662 37.634 55.9834Z\",\n    fill: \"#1C1C1C\"\n  }))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgImg);\nexport default __webpack_public_path__ + \"static/media/img.762c12aa3293560ead8d0fe0c5ab66d1.svg\";\nexport { ForwardRef as ReactComponent };","var _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgCurveLine(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 38,\n    height: 217,\n    viewBox: \"0 0 38 217\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector 10\",\n    d: \"M21.5962 2C26.6484 8.65446 36.3698 25.3217 34.8382 38.755C32.9237 55.5466 3.40829 69.7262 5.32281 52.0017C7.23732 34.2772 34.8382 38.755 34.8382 84.0924C34.8382 114.317 3 127.937 3 108.72C3 90.2493 30.8368 92.1307 31.8069 133.348C32.8345 177.006 4.1168 186.895 4.1168 169.357C4.1168 151.819 43.0453 159.282 27.3397 216\",\n    stroke: \"#5557FF\",\n    strokeWidth: 5\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgCurveLine);\nexport default __webpack_public_path__ + \"static/media/curve_line.41fc09e689b02c70523546b9e3d5eecf.svg\";\nexport { ForwardRef as ReactComponent };","import styled from 'styled-components';\r\n\r\nconst StyledH3 = styled.h3`\r\n  color: var(--color-black);\r\n  font: var(--font-text10);\r\n  text-align: center;\r\n  margin: 65px 0 30px 0;\r\n\r\n  @media screen and (min-width: 459.8px) {\r\n    text-align: left;\r\n  }\r\n\r\n  @media screen and (min-width: 1023.8px) {\r\n    font: var(--font-text2);\r\n  }\r\n`;\r\n\r\nconst StyledImg = styled.img`\r\n  position: absolute;\r\n  left: 0px;\r\n  top: 0px;\r\n  width: 61px;\r\n  height: 152px;\r\n  z-index: 1;\r\n\r\n  @media screen and (min-width: 767.8px) {\r\n    transform: scale(1.25);\r\n  }\r\n\r\n  @media screen and (min-width: 1299.8px) {\r\n    width: 122px;\r\n    height: 305px;\r\n    top: 20%;\r\n  }\r\n`;\r\n\r\nconst StyledImgCurveLine = styled.img`\r\n  position: absolute;\r\n  right: -5px;\r\n  top: 61%;\r\n\r\n  @media screen and (min-width: 1299.8px) {\r\n    transform: scale(2.2);\r\n    top: 36%;\r\n  }\r\n`;\r\n\r\nconst StyledArticleWrapper = styled.article`\r\n  position: relative;\r\n`;\r\n\r\nconst StyledSection = styled.section`\r\n  background-color: var(--color-white);\r\n  position: relative;\r\n`;\r\n\r\nconst StyledArticle = styled.article`\r\n  background-color: var(--color-light-gray);\r\n  border-radius: 3px;\r\n  padding: 40px 0 32px 16px;\r\n\r\n  &:not(:nth-child(4)) {\r\n    margin: 0 0 15px 0;\r\n  }\r\n\r\n  @media screen and (min-width: 1023.8px) {\r\n    padding: 44px 20px 44px 20px;\r\n  }\r\n`;\r\n\r\nconst StyledSpanNumber = styled.span`\r\n  font: var(--font-text9);\r\n  color: var(--color-purple);\r\n`;\r\n\r\nconst StyledH4Title = styled.h4`\r\n  display: block;\r\n  font: var(--font-text5-bold);\r\n  color: var(--color-black);\r\n  margin: 0;\r\n  word-wrap: break-word;\r\n\r\n  @media screen and (min-width: 1023.8px) {\r\n    max-width: 100%;\r\n    font: var(--font-text3);\r\n  }\r\n`;\r\n\r\nconst StyledPText = styled.p`\r\n  font: var(--font-text6-regular);\r\n  color: var(--color-black);\r\n  margin: 30px 0 0 0;\r\n\r\n  @media screen and (min-width: 767.8px) {\r\n    margin: 0;\r\n    font: var(--font-text5);\r\n    margin: 40px 0 0 0;\r\n  }\r\n\r\n  @media screen and (min-width: 1023.8px) {\r\n    margin: 0;\r\n  }\r\n`;\r\n\r\nexport {\r\n  StyledH3,\r\n  StyledArticleWrapper,\r\n  StyledImg,\r\n  StyledImgCurveLine,\r\n  StyledArticle,\r\n  StyledSpanNumber,\r\n  StyledH4Title,\r\n  StyledPText,\r\n  StyledSection,\r\n};\r\n","import Grid from '@mui/material/Grid';\r\nimport { useTranslation } from 'react-i18next';\r\nimport {Container} from 'components/Container';\r\nimport img from 'assets/images/img.svg';\r\nimport curve_line from 'assets/images/curve_line.svg';\r\n\r\nimport {\r\n  StyledH3,\r\n  StyledArticleWrapper,\r\n  StyledImg,\r\n  StyledImgCurveLine,\r\n  StyledArticle,\r\n  StyledSpanNumber,\r\n  StyledH4Title,\r\n  StyledPText,\r\n  StyledSection,\r\n} from './BenefitInfo.Styled';\r\n\r\nexport const BenefitInfo = () => {\r\n  const { t } = useTranslation('', {\r\n    keyPrefix: 'components.benefitInfo',\r\n  });\r\n\r\n  const data = [\r\n    {\r\n      title: t('subTitle1'),\r\n      text: t('text1'),\r\n    },\r\n    {\r\n      title: t('subTitle2'),\r\n      text: t('text2'),\r\n    },\r\n    {\r\n      title: t('subTitle3'),\r\n      text: t('text3'),\r\n    },\r\n  ];\r\n  return (\r\n    <StyledSection>\r\n      <StyledImg src={img} alt='image' />\r\n      <Container>\r\n        <Grid container columns={{ xs: 2, md: 6, lg: 12 }}>\r\n          <StyledArticleWrapper>\r\n            <StyledH3>{t('mainTitle')}</StyledH3>\r\n            {data.map((item, index) => {\r\n              const { title, text } = item;\r\n              return (\r\n                <InfoCard\r\n                  title={title}\r\n                  text={text}\r\n                  numberCard={index + 1}\r\n                  key={index + 1}\r\n                />\r\n              );\r\n            })}\r\n            <StyledImgCurveLine src={curve_line} alt='curve_line' />\r\n          </StyledArticleWrapper>\r\n        </Grid>\r\n      </Container>\r\n    </StyledSection>\r\n  );\r\n};\r\n\r\ntype InfoCardProps = {\r\n  numberCard: number;\r\n  title: string;\r\n  text: string;\r\n};\r\n\r\nconst InfoCard = ({ numberCard, title, text }: InfoCardProps) => {\r\n  const fullNumb = numberCard < 10 ? `0${numberCard}` : numberCard;\r\n  return (\r\n    <StyledArticle>\r\n      <Grid\r\n        container\r\n        direction='row'\r\n        columns={{ xs: 2, md: 6, lg: 12 }}\r\n        alignItems='center'\r\n        columnSpacing={{ xs: 2 }}\r\n      >\r\n        <Grid item md={0.7} lg={0.7}>\r\n          <StyledSpanNumber>{fullNumb}</StyledSpanNumber>\r\n        </Grid>\r\n        <Grid item xs md lg={5.45}>\r\n          <StyledH4Title>{title}</StyledH4Title>\r\n        </Grid>\r\n        <Grid item xs={2} md={5.5} lg={5}>\r\n          <StyledPText>{text}</StyledPText>\r\n        </Grid>\r\n      </Grid>\r\n    </StyledArticle>\r\n  );\r\n};\r\n\r\n","var _path, _ellipse, _ellipse2, _path2, _path3, _path4, _path5, _path6;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgTestRule1(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 184,\n    height: 95,\n    viewBox: \"0 0 184 95\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M7.47021 83.8037H171.812\",\n    stroke: \"black\",\n    strokeWidth: 0.5\n  })), _ellipse || (_ellipse = /*#__PURE__*/React.createElement(\"ellipse\", {\n    cx: 11.7949,\n    cy: 83.0133,\n    rx: 11.7949,\n    ry: 11.859,\n    fill: \"#E0E0E0\"\n  })), _ellipse2 || (_ellipse2 = /*#__PURE__*/React.createElement(\"ellipse\", {\n    cx: 92.0002,\n    cy: 83.0133,\n    rx: 11.7949,\n    ry: 11.859,\n    fill: \"#5557FF\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M183 83.0133C183 89.0156 178.162 93.8722 172.205 93.8722C166.248 93.8722 161.41 89.0156 161.41 83.0133C161.41 77.0109 166.248 72.1543 172.205 72.1543C178.162 72.1543 183 77.0109 183 83.0133Z\",\n    fill: \"#E0E0E0\",\n    stroke: \"#5557FF\",\n    strokeWidth: 2\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M110.185 25.6112L100.694 12.9209L95.0945 49.1899L122.632 28.3441L110.185 25.6112Z\",\n    fill: \"#5557FF\"\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M95.3923 48.9635L113.133 26.2501L110.185 25.6125L108.631 23.5475L95.3923 48.9635Z\",\n    fill: \"#5557FF\"\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M110.186 25.6113C109.712 26.8845 109.101 28.1074 108.362 29.2618C107.11 31.4696 105.3 34.4611 103.188 37.7118C101.075 40.9625 99.0744 43.8275 97.6154 45.9061C96.8983 47.0789 96.0539 48.179 95.0949 49.1899C95.6231 47.932 96.284 46.728 97.0681 45.5949C98.4 43.432 100.288 40.5011 102.416 37.2688C104.543 34.0365 106.243 31.415 107.795 28.9637C108.46 27.7684 109.261 26.6446 110.186 25.6113Z\",\n    fill: \"#263238\"\n  })), _path6 || (_path6 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M114.732 22.9639C120.33 17.0502 135.271 7.2112 150.26 15.1648C165.249 23.1184 171.591 44.7161 172.888 54.5208\",\n    stroke: \"black\",\n    strokeWidth: 0.5,\n    strokeLinecap: \"round\",\n    strokeDasharray: \"5 5\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgTestRule1);\nexport default __webpack_public_path__ + \"static/media/testRule1.308a2b987910c7657681834d9665332c.svg\";\nexport { ForwardRef as ReactComponent };","var _path, _path2, _path3, _path4, _path5, _path6, _path7, _path8, _path9, _path10, _path11, _path12, _path13, _path14, _path15, _path16, _path17, _path18, _path19, _path20, _path21, _path22, _path23;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgTestRule2(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 186,\n    height: 98,\n    viewBox: \"0 0 186 98\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1 0V97\",\n    stroke: \"#263238\",\n    strokeWidth: 0.5,\n    strokeMiterlimit: 10\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M17.7271 0V97\",\n    stroke: \"#263238\",\n    strokeWidth: 0.5,\n    strokeMiterlimit: 10\n  })), _path3 || (_path3 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M34.4548 0V97\",\n    stroke: \"#263238\",\n    strokeWidth: 0.5,\n    strokeMiterlimit: 10\n  })), _path4 || (_path4 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M51.1819 0V97\",\n    stroke: \"#263238\",\n    strokeWidth: 0.5,\n    strokeMiterlimit: 10\n  })), _path5 || (_path5 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M67.9099 0V97\",\n    stroke: \"#263238\",\n    strokeWidth: 0.5,\n    strokeMiterlimit: 10\n  })), _path6 || (_path6 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M84.6367 0V97\",\n    stroke: \"#263238\",\n    strokeWidth: 0.5,\n    strokeMiterlimit: 10\n  })), _path7 || (_path7 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M101.363 0V97\",\n    stroke: \"#263238\",\n    strokeWidth: 0.5,\n    strokeMiterlimit: 10\n  })), _path8 || (_path8 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M118.09 0V97\",\n    stroke: \"#263238\",\n    strokeWidth: 0.5,\n    strokeMiterlimit: 10\n  })), _path9 || (_path9 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M134.818 0V97\",\n    stroke: \"#263238\",\n    strokeWidth: 0.5,\n    strokeMiterlimit: 10\n  })), _path10 || (_path10 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M151.545 0V97\",\n    stroke: \"#263238\",\n    strokeWidth: 0.5,\n    strokeMiterlimit: 10\n  })), _path11 || (_path11 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M168.273 0V97\",\n    stroke: \"#263238\",\n    strokeWidth: 0.5,\n    strokeMiterlimit: 10\n  })), _path12 || (_path12 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M185 0V97\",\n    stroke: \"#263238\",\n    strokeWidth: 0.5,\n    strokeMiterlimit: 10\n  })), _path13 || (_path13 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1.83496 9.00586H184.166\",\n    stroke: \"#263238\",\n    strokeWidth: 0.5,\n    strokeMiterlimit: 10\n  })), _path14 || (_path14 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1.83472 22.1709H184.166\",\n    stroke: \"#263238\",\n    strokeWidth: 0.5,\n    strokeMiterlimit: 10\n  })), _path15 || (_path15 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1.83496 35.3359H184.166\",\n    stroke: \"#263238\",\n    strokeWidth: 0.5,\n    strokeMiterlimit: 10\n  })), _path16 || (_path16 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1.83472 48.5H184.166\",\n    stroke: \"#263238\",\n    strokeWidth: 0.5,\n    strokeMiterlimit: 10\n  })), _path17 || (_path17 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1.83472 61.6641H184.166\",\n    stroke: \"#263238\",\n    strokeWidth: 0.5,\n    strokeMiterlimit: 10\n  })), _path18 || (_path18 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1.83496 74.8281H184.166\",\n    stroke: \"#263238\",\n    strokeWidth: 0.5,\n    strokeMiterlimit: 10\n  })), _path19 || (_path19 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1.83496 87.9941H184.166\",\n    stroke: \"#263238\",\n    strokeWidth: 0.5,\n    strokeMiterlimit: 10\n  })), _path20 || (_path20 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M40.1416 35.3874L15.6733 97.8705H66.9206L42.4395 35.3874C42.3614 35.1858 42.2081 35.01 42.0016 34.8853C41.7951 34.7606 41.5461 34.6934 41.2906 34.6934C41.035 34.6934 40.7861 34.7606 40.5796 34.8853C40.3731 35.01 40.2197 35.1858 40.1416 35.3874Z\",\n    fill: \"#E0E0E0\"\n  })), _path21 || (_path21 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M86.7929 14.694L54.2241 97.8702H121.698L89.0908 14.694C89.0127 14.4924 88.8593 14.3166 88.6528 14.1919C88.4463 14.0672 88.1974 14 87.9418 14C87.6863 14 87.4373 14.0672 87.2308 14.1919C87.0243 14.3166 86.871 14.4924 86.7929 14.694Z\",\n    fill: \"#5557FF\"\n  })), _path22 || (_path22 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M129.721 49.6792L110.837 97.8708H150.89L131.967 49.6792C131.879 49.4923 131.724 49.3317 131.524 49.2186C131.323 49.1054 131.086 49.0449 130.844 49.0449C130.601 49.0449 130.365 49.1054 130.164 49.2186C129.964 49.3317 129.809 49.4923 129.721 49.6792Z\",\n    fill: \"#E0E0E0\"\n  })), _path23 || (_path23 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M155.588 66.2243L143.2 97.8699H170.274L157.886 66.2243C157.808 66.0227 157.655 65.8469 157.448 65.7222C157.242 65.5975 156.993 65.5303 156.737 65.5303C156.482 65.5303 156.233 65.5975 156.026 65.7222C155.82 65.8469 155.667 66.0227 155.588 66.2243Z\",\n    fill: \"#E0E0E0\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgTestRule2);\nexport default __webpack_public_path__ + \"static/media/testRule2.3f7f5c1060af5867e44777ee343e7c77.svg\";\nexport { ForwardRef as ReactComponent };","var _rect, _g;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgTestRule3(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 112,\n    height: 104,\n    viewBox: \"0 0 112 104\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"mask\", {\n    id: \"mask0_454_472\",\n    style: {\n      maskType: \"alpha\"\n    },\n    maskUnits: \"userSpaceOnUse\",\n    x: 0,\n    y: 0,\n    width: 112,\n    height: 104\n  }, _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    width: 112,\n    height: 104,\n    fill: \"#D9D9D9\"\n  }))), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    mask: \"url(#mask0_454_472)\"\n  }, /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 56.4205,\n    cy: 55.2281,\n    r: 43.9332,\n    fill: \"#E0E0E0\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M4.00015 52.4686C4.13248 40.9526 8.33512 30.0236 15.9258 21.4559C23.5164 12.8882 34.0494 7.18489 45.8147 5.27184L57.4505 55.7344L4.00015 52.4686Z\",\n    fill: \"#8D8EFF\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M94.4347 77.2506C88.8766 86.8444 79.8967 93.9818 69.2961 97.2313C58.6954 100.481 47.2582 99.6019 37.2785 94.7711L56.4203 55.2272L94.4347 77.2506Z\",\n    fill: \"#B3B3FF\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M36.5882 97.7361C27.4904 93.4266 20.0263 86.2959 15.306 77.4043C10.5858 68.5127 8.86134 58.335 10.3892 48.3847L56.6034 55.4809L36.5882 97.7361Z\",\n    fill: \"#D9D9FF\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M107.994 55.2271C107.994 67.3614 103.716 79.1071 95.911 88.3985L56.4204 55.2271H107.994Z\",\n    fill: \"#5557FF\"\n  }), /*#__PURE__*/React.createElement(\"mask\", {\n    id: \"path-7-inside-1_454_472\",\n    fill: \"white\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M47.4605 9.876C57.3285 7.88498 67.5756 9.13207 76.6781 13.4318C85.7805 17.7316 93.2521 24.8543 97.9819 33.741L56.7078 55.7083L47.4605 9.876Z\"\n  })), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M47.4605 9.876C57.3285 7.88498 67.5756 9.13207 76.6781 13.4318C85.7805 17.7316 93.2521 24.8543 97.9819 33.741L56.7078 55.7083L47.4605 9.876Z\",\n    stroke: \"black\",\n    mask: \"url(#path-7-inside-1_454_472)\"\n  }))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgTestRule3);\nexport default __webpack_public_path__ + \"static/media/testRule3.347477bdb1a5d44fa0608034e8af61cf.svg\";\nexport { ForwardRef as ReactComponent };","var _g;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgTestRule4(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 156,\n    height: 115,\n    viewBox: \"0 0 156 115\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Group 51\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Clock\",\n    opacity: 0.32\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector\",\n    d: \"M97.6423 42.2261C108.128 43.062 114.079 51.5413 113.437 59.0781C112.795 66.615 105.49 74.0375 95.0045 73.2017C84.5188 72.3658 78.5677 63.8865 79.2095 56.3497C79.8513 48.8129 87.1566 41.3903 97.6423 42.2261Z\",\n    fill: \"#5557FF\",\n    stroke: \"#5557FF\",\n    strokeWidth: 67\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector_2\",\n    d: \"M112.561 17.1273C135.505 25.5419 146.998 50.3275 138.333 72.4424C129.669 94.5574 104.082 105.744 81.1385 97.3298C58.195 88.9152 46.7024 64.1295 55.3669 42.0146C64.0314 19.8996 89.6179 8.71279 112.561 17.1273Z\",\n    fill: \"white\",\n    stroke: \"#5557FF\",\n    strokeWidth: 3\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector_3\",\n    d: \"M97.3495 18.8496C97.6605 20.0725 97.7648 21.336 97.6582 22.5911C97.7642 23.8514 97.66 25.12 97.3495 26.3483C97.0593 25.117 96.9607 23.8506 97.0571 22.5911C96.9606 21.3368 97.0592 20.0756 97.3495 18.8496Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector_4\",\n    d: \"M118.376 24.8711C117.701 25.9264 116.862 26.8754 115.89 27.6851C115.053 28.6258 114.072 29.437 112.982 30.0903C113.657 29.035 114.495 28.086 115.468 27.2763C116.305 26.3356 117.285 25.5244 118.376 24.8711Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector_5\",\n    d: \"M130.627 37.8555C129.63 38.6618 128.539 39.3529 127.377 39.9149C126.374 40.6349 125.282 41.2317 124.127 41.6913C125.964 39.951 128.187 38.6391 130.627 37.8555Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector_6\",\n    d: \"M137.874 57.1454C134.364 57.5227 130.822 57.5227 127.312 57.1454C130.821 56.7471 134.365 56.7471 137.874 57.1454Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector_7\",\n    d: \"M64.5932 56.4538C61.2749 56.8517 57.9186 56.8517 54.6003 56.4538C57.9199 56.0766 61.2736 56.0766 64.5932 56.4538Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector_8\",\n    d: \"M69.7767 70.8066C68.6525 72.0454 67.388 73.1581 66.007 74.1237C64.7371 75.2269 63.3416 76.1868 61.8474 76.9848C62.9706 75.7394 64.2413 74.6261 65.6333 73.6678C66.8979 72.5652 68.2879 71.6053 69.7767 70.8066Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector_9\",\n    d: \"M82.5644 81.9055C81.8202 83.4009 80.962 84.8407 79.9971 86.213C79.1975 87.6815 78.285 89.0898 77.2673 90.4261C77.7611 88.8364 78.5066 87.3303 79.4771 85.9614C80.2872 84.4655 81.3282 83.0979 82.5644 81.9055Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector_10\",\n    d: \"M97.3505 96.2264C97.0594 94.5389 96.9613 92.8255 97.058 91.1173C96.9604 89.409 97.0585 87.6955 97.3505 86.0081C97.6629 87.6932 97.7666 89.4084 97.6592 91.1173C97.7655 92.8261 97.6619 94.5412 97.3505 96.2264Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector_11\",\n    d: \"M120.131 89.42C118.52 88.7016 117.048 87.7234 115.776 86.5274C114.378 85.5033 113.179 84.2471 112.234 82.8174C113.603 83.8685 114.915 84.9861 116.166 86.1659C117.55 87.1771 118.874 88.2635 120.131 89.42Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector_12\",\n    d: \"M130.822 78.274C129.554 77.4211 128.398 76.4235 127.377 75.3028C126.202 74.3078 125.169 73.1659 124.306 71.9071C125.593 72.7598 126.767 73.763 127.8 74.894C128.959 75.8845 129.976 77.0214 130.822 78.274Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector_13\",\n    d: \"M69.2893 42.7139C68.1425 41.9961 67.1036 41.1285 66.2021 40.1357C65.1581 39.2747 64.2591 38.2617 63.5374 37.1331C64.6869 37.8535 65.7261 38.7267 66.6246 39.727C67.6647 40.5856 68.5633 41.5929 69.2893 42.7139Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector_14\",\n    d: \"M82.4828 29.2567C81.3463 28.5692 80.3222 27.7214 79.4444 26.7414C78.4278 25.8972 77.5462 24.9118 76.8284 23.8174C77.9649 24.5049 78.989 25.3526 79.8668 26.3327C80.8793 27.1809 81.7604 28.1656 82.4828 29.2567Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector_15\",\n    d: \"M114.792 57.9461C115.376 58.0032 115.96 57.9067 116.528 57.6595C115.953 57.4756 115.369 57.4093 114.788 57.4616C113.665 57.3494 112.039 57.1504 110.04 57.1665C106.025 56.9868 100.498 56.7284 94.3729 56.7777L93.6005 56.784L93.6135 58.2984L93.6143 58.3856L94.3859 58.2922L110.049 58.1661C112.047 58.1197 113.671 57.9551 114.792 57.9461Z\",\n    fill: \"black\"\n  })), /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Clock_2\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector_16\",\n    d: \"M59.9421 42.2261C70.4278 43.062 76.3788 51.5413 75.737 59.0781C75.0952 66.615 67.79 74.0375 57.3043 73.2017C46.8186 72.3658 40.8675 63.8865 41.5093 56.3497C42.1511 48.8129 49.4564 41.3903 59.9421 42.2261Z\",\n    fill: \"#5557FF\",\n    stroke: \"#5557FF\",\n    strokeWidth: 67\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector_17\",\n    d: \"M74.8614 17.1273C97.805 25.5419 109.298 50.3275 100.633 72.4424C91.9686 94.5574 66.382 105.744 43.4385 97.3298C20.495 88.9152 9.00241 64.1295 17.6669 42.0146C26.3314 19.8996 51.9179 8.71279 74.8614 17.1273Z\",\n    fill: \"white\",\n    stroke: \"#5557FF\",\n    strokeWidth: 3\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector_18\",\n    d: \"M59.6496 18.8496C59.9605 20.0725 60.0648 21.336 59.9583 22.5911C60.0643 23.8514 59.96 25.12 59.6496 26.3483C59.3593 25.117 59.2608 23.8506 59.3571 22.5911C59.2607 21.3368 59.3592 20.0756 59.6496 18.8496Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector_19\",\n    d: \"M80.6764 24.871C80.0012 25.9263 79.1628 26.8753 78.1904 27.685C77.3536 28.6257 76.3727 29.4369 75.282 30.0902C75.9573 29.0349 76.7957 28.0859 77.768 27.2762C78.6048 26.3355 79.5857 25.5243 80.6764 24.871Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector_20\",\n    d: \"M92.9262 37.8555C91.9293 38.6618 90.8387 39.3529 89.6765 39.9149C88.6734 40.6349 87.5819 41.2317 86.4268 41.6913C88.2635 39.951 90.4863 38.6391 92.9262 37.8555Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector_21\",\n    d: \"M100.174 57.1454C96.6641 57.5227 93.122 57.5227 89.6123 57.1454C93.1208 56.7471 96.6654 56.7471 100.174 57.1454Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector_22\",\n    d: \"M26.8932 56.4538C23.575 56.8517 20.2186 56.8517 16.9004 56.4538C20.2199 56.0766 23.5737 56.0766 26.8932 56.4538Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector_23\",\n    d: \"M32.0772 70.8066C30.953 72.0454 29.6885 73.1581 28.3076 74.1237C27.0376 75.2269 25.6421 76.1868 24.1479 76.9848C25.2711 75.7394 26.5418 74.6261 27.9339 73.6678C29.1984 72.5652 30.5885 71.6053 32.0772 70.8066Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector_24\",\n    d: \"M44.8644 81.9055C44.1202 83.4009 43.2621 84.8407 42.2971 86.213C41.4975 87.6815 40.5851 89.0898 39.5674 90.4261C40.0612 88.8364 40.8066 87.3303 41.7772 85.9614C42.5872 84.4655 43.6283 83.0979 44.8644 81.9055Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector_25\",\n    d: \"M59.6503 96.2264C59.3592 94.5389 59.2611 92.8255 59.3578 91.1173C59.2602 89.409 59.3583 87.6955 59.6503 86.0081C59.9627 87.6932 60.0664 89.4084 59.959 91.1173C60.0653 92.8261 59.9617 94.5412 59.6503 96.2264Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector_26\",\n    d: \"M82.431 89.42C80.8205 88.7016 79.348 87.7234 78.0763 86.5274C76.678 85.5033 75.4787 84.2471 74.5342 82.8174C75.9026 83.8685 77.215 84.9861 78.4663 86.1659C79.8505 87.1771 81.1742 88.2635 82.431 89.42Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector_27\",\n    d: \"M93.1219 78.274C91.8544 77.4211 90.6978 76.4235 89.6772 75.3028C88.5022 74.3078 87.4695 73.1659 86.6062 71.9071C87.8933 72.7598 89.0667 73.763 90.0997 74.894C91.2591 75.8845 92.2756 77.0214 93.1219 78.274Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector_28\",\n    d: \"M31.5894 42.7139C30.4425 41.9961 29.4036 41.1285 28.5022 40.1357C27.4582 39.2747 26.5591 38.2617 25.8374 37.1331C26.9869 37.8535 28.0262 38.7267 28.9246 39.727C29.9648 40.5856 30.8633 41.5929 31.5894 42.7139Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector_29\",\n    d: \"M44.7824 29.2567C43.6459 28.5692 42.6218 27.7214 41.7439 26.7414C40.7273 25.8972 39.8457 24.9118 39.1279 23.8174C40.2645 24.5049 41.2886 25.3526 42.1664 26.3327C43.1789 27.1809 44.0599 28.1656 44.7824 29.2567Z\",\n    fill: \"black\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector_30\",\n    d: \"M60.1724 35.6255C60.2055 35.0609 60.1563 34.4946 60.0262 33.9434C59.925 34.4984 59.8869 35.0624 59.9125 35.6255C59.8475 36.7102 59.7337 38.2822 59.7337 40.2159C59.62 44.0989 59.4575 49.4439 59.4575 55.3705V56.1178H60.2699H60.3167L60.2699 55.3705V40.2159C60.2537 38.2822 60.1724 36.7102 60.1724 35.6255Z\",\n    fill: \"black\"\n  })))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgTestRule4);\nexport default __webpack_public_path__ + \"static/media/testRule4.7b90c6b3f18e32f8251ce15786b39627.svg\";\nexport { ForwardRef as ReactComponent };","import styled from 'styled-components';\r\n\r\nconst StyledH3 = styled.h3`\r\n  color: var(--color-black);\r\n  margin: 10px 0 0 0;\r\n  font: var(--font-text10);\r\n  text-align: left;\r\n\r\n  @media screen and (min-width: 1023.8px) {\r\n    font: var(--font-text2);\r\n  }\r\n`;\r\n\r\nconst StyledH4 = styled.h4`\r\n  text-align: left;\r\n  font: var(--font-text5);\r\n  color: var(--color-black);\r\n  margin: 45px 0 24px 0;\r\n\r\n  @media screen and (min-width: 767.8px) {\r\n    margin: 0 0 64px 0;\r\n  }\r\n\r\n  @media screen and (min-width: 1023.8px) {\r\n    font: var(--font-text4);\r\n  }\r\n`;\r\nconst StyledSection = styled.section`\r\n  background-color: var(--color-light-gray2);\r\n  position: relative;\r\n\r\n`;\r\n\r\nconst StyledArticleWrapper = styled.article`\r\n  padding: 80px 0;\r\n`;\r\n\r\nconst StyledP = styled.p`\r\n  font: var(--font-text6-regular);\r\n  color: var(--color-dark-gray);\r\n  margin-top: 35px;\r\n\r\n  @media screen and (min-width: 1023.8px) {\r\n    font: var(--font-text5);\r\n  }\r\n`;\r\n\r\nconst StyleImg = styled.img`\r\n  display: block;\r\n  margin: 0 auto;  \r\n`;\r\n\r\nconst StyledArticle = styled.article`\r\n  box-sizing: border-box;  \r\n  background-color: var(--color-white);\r\n  padding: 25px 20px;\r\n  height: 276px;\r\n\r\n  &:not(:last-child) {\r\n    margin: 0 0 15px 0;\r\n  }\r\n\r\n  @media screen and (min-width: 767.8px) {\r\n      height: 289px\r\n  }\r\n`;\r\n\r\n\r\nexport {\r\n  StyledH3,\r\n  StyledH4,\r\n  StyledArticleWrapper,\r\n  StyledArticle,\r\n  StyledP,\r\n  StyleImg,\r\n  StyledSection,\r\n};\r\n","import { useTranslation } from 'react-i18next';\r\nimport Grid from '@mui/material/Grid';\r\nimport {Container} from 'components/Container';\r\nimport testRule1 from 'assets/images/testRule1.svg';\r\nimport testRule2 from 'assets/images/testRule2.svg';\r\nimport testRule3 from 'assets/images/testRule3.svg';\r\nimport testRule4 from 'assets/images/testRule4.svg';\r\n\r\nimport {\r\n  StyledH3,\r\n  StyledH4,\r\n  StyledArticleWrapper,\r\n  StyledArticle,\r\n  StyledP,\r\n  StyleImg,\r\n  StyledSection,\r\n} from './TestRules.Styled';\r\n\r\nexport const TestRules = () => {\r\n  const { t } = useTranslation('', {\r\n    keyPrefix: 'components.testRules'\r\n  });\r\n\r\n  const data = [\r\n    {\r\n      img: testRule1,\r\n      text: t('rule1'),\r\n    },\r\n    {\r\n      img: testRule2,\r\n      text: t('rule2'),\r\n    },\r\n    {\r\n      img: testRule3,\r\n      text: t('rule3'),\r\n    },\r\n    {\r\n      img: testRule4,\r\n      text: t('rule4'),\r\n    },\r\n  ];\r\n  return (\r\n    <StyledSection id='rules'>\r\n      <Container>\r\n        <StyledArticleWrapper>\r\n          <Grid\r\n            container\r\n            columns={{ xs: 2, md: 12, xl: 12 }}\r\n            spacing={{ md: 3 }}\r\n          >\r\n            <Grid item xs={2} md={6} xl={6}>\r\n              <StyledH3>{t('mainTitle')}</StyledH3>\r\n            </Grid>\r\n            <Grid item xs={2} md={6} xl={6}>\r\n              <StyledH4>{t('subTitle')} </StyledH4>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid\r\n            container\r\n            columns={{ xs: 2, md: 12, xl: 12 }}\r\n            spacing={1.875}\r\n            alignItems='center'\r\n          >\r\n            {data.map((info, index) => {\r\n              const { text, img } = info;\r\n              return <Rule text={text} img={img} key={index} />;\r\n            })}\r\n          </Grid>\r\n        </StyledArticleWrapper>\r\n      </Container>\r\n    </StyledSection>\r\n  );\r\n};\r\n\r\ntype TRules = {\r\n  text: string;\r\n  img: string;\r\n};\r\n\r\nconst Rule = ({ text, img }: TRules) => {\r\n  return (\r\n    <Grid item xs={2} md={6} xl={3}>\r\n      <StyledArticle>\r\n        <StyleImg src={img} alt='ruleTest' />\r\n        <StyledP>{text}</StyledP>\r\n      </StyledArticle>\r\n    </Grid>\r\n  );\r\n};\r\n\r\n","var _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgCurveLine2(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 320,\n    height: 177,\n    viewBox: \"0 0 320 177\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M-326.982 154.356C-217.674 108.225 7.66095 16.731 34.5361 19.8C68.1301 23.6362 -259.999 151.972 -212.049 163.405C-164.099 174.838 151.163 13.6677 191.785 16.8662C232.408 20.0647 -95.6223 159.81 -47.6751 164.946C0.272172 170.083 296.522 9.79773 344.472 21.2307C392.422 32.6636 86.2799 166.645 119.967 169.297C153.654 171.95 460.606 21.3558 516.091 25.7245C571.576 30.0932 237.193 155.555 284.647 166.949C332.102 178.343 629.044 9.26306 688.399 15.1276C747.754 20.9922 385.624 163.328 430.209 166.838C474.795 170.349 820.178 0.148406 871.902 7.96467\",\n    stroke: \"#5557FF\",\n    strokeWidth: 15\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgCurveLine2);\nexport default __webpack_public_path__ + \"static/media/curve_line2.15d6fed56b99709672cfc6272d55e7c3.svg\";\nexport { ForwardRef as ReactComponent };","import styled from 'styled-components';\r\n\r\nconst StyledH3 = styled.h3`\r\n  color: var(--color-black);\r\n  font: var(--font-text10);\r\n  margin: 5px 0 0 0;\r\n\r\n  @media screen and (min-width: 1023.8px) {\r\n    font: var(--font-text2);\r\n  }\r\n`;\r\n\r\nconst StyledSection = styled.section`\r\n  background-color: var(--color-light-gray2);\r\n  position: relative;\r\n`;\r\n\r\nconst StyledArticleWrapper = styled.article`\r\n  padding: 0 0 134px 0;\r\n`;\r\n\r\nconst StyledH4 = styled.h4`\r\n  color: var(--color-black);\r\n  font: var(--font-text5);\r\n  margin: 40px 0 24px 0;\r\n\r\n  @media screen and (min-width: 767.8px) {\r\n    margin: 0 0 24px 0;\r\n  }\r\n\r\n  @media screen and (min-width: 1023.8px) {\r\n    font: var(--font-text4);\r\n    margin-bottom: 59px;\r\n  }\r\n`;\r\n\r\nconst StyledH5 = styled.h5`\r\n  color: var(--color-dark-gray);\r\n  font: var(--font-text6-regular);\r\n  text-align: center;\r\n  margin: 0;\r\n  padding: 0;\r\n\r\n  @media screen and (min-width: 1023.8px) {\r\n    font: var(--font-text6-regular);\r\n  }\r\n`;\r\n\r\nconst StyledImg = styled.img`\r\n  position: absolute;\r\n  bottom: 70px;\r\n  left: 0px;\r\n  z-index: 0;\r\n  overflow: visible;\r\n  max-height: 240px;\r\n  width: 100%;\r\n\r\n  @media screen and (min-width: 767.8px) {\r\n    bottom: 30px;\r\n    transform: scaleY(0.8);\r\n  }\r\n\r\n  @media screen and (min-width: 1299.8px) {\r\n    left: -20px;\r\n    bottom: 60px;\r\n  }\r\n`;\r\n\r\n\r\n\r\nconst StyledArticle = styled.article`\r\n  box-sizing: border-box;\r\n  position: relative;\r\n  z-index: 1;\r\n  width: 290px;\r\n  border-radius: 80px;\r\n  border: 2px solid var(--color-purple);\r\n  background: var(--color-white);\r\n  text-align: center;\r\n  padding: 19px 13px;\r\n  height: 60px;\r\n  margin: 0;\r\n\r\n  &:not(:last-child) {\r\n    margin: 0 0 6px 0;\r\n  }\r\n\r\n  &#result3 {\r\n    padding: 19px 2px;\r\n  }\r\n\r\n  @media screen and (min-width: 459.8px) {\r\n    width: 100%;\r\n  }\r\n\r\n  @media screen and (min-width: 1023.8px) {\r\n    font: var(--font-text5);\r\n  }\r\n`;\r\n\r\nexport {\r\n  StyledH4,\r\n  StyledH5,\r\n  StyledH3,\r\n  StyledArticle,\r\n  StyledSection,\r\n  StyledImg,\r\n  StyledArticleWrapper,\r\n};","import Grid from '@mui/material/Grid';\r\nimport { useTranslation } from 'react-i18next';\r\nimport {Container} from 'components/Container';\r\nimport curver_line2 from 'assets/images/curve_line2.svg';\r\n\r\nimport {\r\n  StyledH3,\r\n  StyledH4,\r\n  StyledH5,\r\n  StyledArticle,\r\n  StyledArticleWrapper,\r\n  StyledImg,\r\n  StyledSection,\r\n} from './ResultsInfo.Styled';\r\n\r\nexport const ResultsInfo = () => {\r\n  const { t } = useTranslation('', {\r\n    keyPrefix: 'components.resultsInfo'\r\n  });\r\n\r\n  const texts = [t('result1'), t('result2'), t('result3'), t('result4')];\r\n  return (\r\n    <StyledSection>\r\n      <Container>\r\n        <StyledArticleWrapper>\r\n          <Grid container columns={{ xs: 2, md: 12 }}>\r\n            <Grid item xs={2} md={6.2}>\r\n              <StyledH3>{t('mainTitle')}</StyledH3>\r\n            </Grid>\r\n            <Grid item xs={2} md={5.5}>\r\n              <StyledH4>{t('subTitle')}</StyledH4>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid\r\n            container\r\n            columns={{ xs: 2, md: 12 }}\r\n            rowSpacing={0.75}\r\n            columnSpacing={{ md: 1 }}\r\n          >\r\n            {texts.map((text, index) => {\r\n              return (\r\n                <Result text={text} key={index} id={`result${index + 1}`} />\r\n              );\r\n            })}\r\n          </Grid>\r\n          <StyledImg src={curver_line2} alt='curver_line' />\r\n        </StyledArticleWrapper>\r\n      </Container>\r\n    </StyledSection>\r\n  );\r\n};\r\n\r\nconst Result = ({ text, id }) => {\r\n  return (\r\n    <Grid item xs={2} md={6}>\r\n      <StyledArticle id={id}>\r\n        <StyledH5>{text}</StyledH5>\r\n      </StyledArticle>\r\n    </Grid>\r\n  );\r\n};\r\n\r\n","import CallToAction from 'modules/CallToAction';\r\nimport {Footer} from 'components/Footer';\r\nimport AboutUs from 'components/AboutUs/AboutUs';\r\nimport {BenefitInfo} from 'components/BenefitInfo';\r\nimport {TestRules} from 'components/TestRules';\r\nimport {ResultsInfo} from 'components/ResultsInfo';\r\n\r\nimport { StyledMain } from '../../styles/Main.Styled';\r\n\r\ntype HomepageProps = {\r\n  isChooseProfession: boolean;\r\n  setChooseProfession: (item: boolean) => void;\r\n};\r\n\r\nconst Home = ({\r\n  isChooseProfession,\r\n  setChooseProfession,\r\n}: HomepageProps) => {\r\n  \r\n  return (\r\n    <>\r\n      <StyledMain>\r\n          <CallToAction\r\n            isChooseProfession={isChooseProfession}\r\n            setChooseProfession={setChooseProfession}\r\n          />\r\n          <BenefitInfo />\r\n          <AboutUs />\r\n          <TestRules />\r\n          <ResultsInfo />\r\n      </StyledMain>\r\n      <Footer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;","import Home from './Home';\r\n\r\nexport default Home;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledMain = styled.main`\r\n  flex: 1 1 auto;\r\n  width: 100%;\r\n  background-color: var(--color-white);\r\n`;\r\n"],"names":["Feedback","onClickCloseBtn","style","t","useTranslation","keyPrefix","to","className","onClick","StyledButton","styled","pageName","LinkBtn","text","pageTo","id","isDisabledBtn","matchResult","match","disabled","getDataFromDB","async","Promise","resolve","reject","onValue","ref","db","url","snapshot","value","val","Error","getTotalQuestionsNumb","response","data","Object","entries","length","transformData","e","console","error","StyledFooter","StyledUl","StyledDivProfession","StyledDivName","StyledLink","StyledNav","StyledLi","Footer","teamOfProject","profession","name","link","map","item","index","Grid","xs","md","lg","xl","href","target","Container","container","columns","alignItems","direction","Logo","location","flexDirection","rowSpacing","justifyContent","columnSpacing","StyledImg","src","logo","alt","getQuantityThemes","lang","question","themes","Set","themesDb","values","theme","add","size","isChooseProfession","setChooseProfession","useContext","ContextProfession","setLang","ContextLanguage","quantityThemes","setQuantityThemes","useState","updateQuantityThemes","quantity","useEffect","then","isLoading","setIsLoading","quantityQuestions","setQuantityQuestions","isError","setIsError","view","srcIcon","clock","helpCircle","barChart","color","content","spinner","Spinner","width","height","margin","ErrorMessage","dataHasLoaded","numbQuestions","onError","catch","setProfession","selected","setSelected","dataProfessions","listProfessions","keys","Dropdown","typeFilter","selectedFilter","nameListItems","setFilter","setValueToLocalStorage","srcArrowDown","arrowDownLarge","StyledCallToAction","StyledSection","StyledH1","StyledH2","StyledDiv","idUser","setIdUser","ContextIdUser","pushedRef","push","key","createIdUser","require","StyledP","StyledH3","StyledArticle","font","fontWeight","person_sitting","StyledImgCurveLine","StyledArticleWrapper","StyledSpanNumber","StyledH4Title","StyledPText","BenefitInfo","title","img","InfoCard","numberCard","curve_line","fullNumb","StyledH4","StyleImg","TestRules","testRule1","testRule2","testRule3","testRule4","spacing","info","Rule","StyledH5","ResultsInfo","texts","Result","curver_line2","StyledMain"],"sourceRoot":""}