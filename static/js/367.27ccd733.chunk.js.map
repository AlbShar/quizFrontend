{"version":3,"file":"static/js/367.27ccd733.chunk.js","mappings":"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","sources":["UI/LinkBtn/LinkBtn.Styled.ts","UI/LinkBtn/LinkBtn.tsx","components/Container/Container.styled.ts","components/Container/Container.tsx","config/firebase/firebaseConfig.js","helpers/getIdUser.ts","modules/UserForm/helpers/setAnimateInputAndText.ts","modules/UserForm/UI/InputField/InputField.Style.ts","modules/UserForm/UI/InputField/InputField.tsx","modules/UserForm/helpers/clearAnimateInputAndText.ts","modules/UserForm/api/sendUserInfoDb.ts","modules/UserForm/UI/Button/Button.tsx","modules/UserForm/hooks/useValidateName.ts","modules/UserForm/hooks/useValidateEmail.ts","modules/UserForm/UserForm/UserForm.Styled.ts","modules/UserForm/index.ts","modules/UserForm/UserForm/UserForm.tsx","pages/Contact/Contact.styled.ts","pages/Contact/Contact.tsx","styles/Main.Styled.ts"],"sourcesContent":["import styled from 'styled-components';\r\n\r\nconst StyledButton = styled.button`\r\n  padding: 8px 33px;\r\n  background-color: var(--color-button);\r\n  border: none;\r\n  font: var(--font-button);\r\n  text-transform: uppercase;\r\n  cursor: pointer;\r\n  color: white;\r\n  text-decoration: none;\r\n\r\n  &:disabled {\r\n    filter: grayscale(0.7);\r\n    cursor: not-allowed;\r\n  }\r\n\r\n  @media screen and (min-width: 767.8px) {\r\n    padding: 12px 80px;\r\n  }\r\n`;\r\n\r\nconst StyledButtonQuiz = styled(StyledButton)`\r\n  position: absolute;\r\n  right: 0;\r\n  top: 0;\r\n`;\r\n\r\nconst StyledButtonBack = styled.button`\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 0 5px;\r\n  border: none;\r\n  background-color: transparent;\r\n  gap: 8px;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst StyledArticle = styled.article`\r\n  position: relative;\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  gap: 40px;\r\n  margin-top: 32px;\r\n  max-width: 540px;\r\n  padding: 5px;\r\n\r\n  @media screen and (min-width: 768.8px) {\r\n    max-width: 100%;\r\n  }\r\n`;\r\n\r\nconst StyledImg = styled.img`\r\n  width: 24px;\r\n  height: 24px;\r\n`;\r\n\r\nconst StyledSpan = styled.span`\r\n  font: var(--font-button);\r\n  color: var(--color-back-btn);\r\n  text-transform: uppercase;\r\n`;\r\n\r\nexport {\r\n  StyledButton,\r\n  StyledArticle,\r\n  StyledButtonBack,\r\n  StyledImg,\r\n  StyledSpan,\r\n  StyledButtonQuiz,\r\n};\r\n","import { FC } from 'react';\r\nimport './link.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { MouseEvent } from 'react';\r\n\r\nimport { StyledButton } from './LinkBtn.Styled';\r\n\r\ninterface LinkInt {\r\n  text: string;\r\n  id?: string;\r\n  pageTo: string;\r\n  onClick?: (e: MouseEvent) => void;\r\n  isDisabledBtn?: boolean;\r\n}\r\nconst LinkBtn: FC<LinkInt> = ({\r\n  text,\r\n  pageTo,\r\n  onClick,\r\n  id,\r\n  isDisabledBtn = false,\r\n}) => {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <Link className='btn__link' to={pageTo} onClick={onClick} id={id}>\r\n      <StyledButton disabled={isDisabledBtn}>{t(text)}</StyledButton>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default LinkBtn;\r\n","import styled from 'styled-components';\r\n\r\nconst ContainerStyled = styled.div`\r\n  min-width: 287px;\r\n  max-width: 1200px;\r\n  width: 100%;\r\n  margin: 0 auto;\r\n  padding: 0 5px;\r\n`;\r\n\r\nexport { ContainerStyled };\r\n","import React, { FC } from 'react';\r\n\r\nimport { ContainerStyled } from './Container.styled';\r\n\r\ninterface IContainer {\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst Container: FC<IContainer> = ({ children }) => {\r\n  return <ContainerStyled>{children}</ContainerStyled>;\r\n};\r\n\r\nexport default Container;\r\n","import { initializeApp } from \"firebase/app\";\r\nimport { getDatabase } from \"firebase/database\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: \"quizfrontend-ac9ee.firebaseapp.com\",\r\n    databaseURL:\r\n      \"https://quizfrontend-ac9ee-default-rtdb.europe-west1.firebasedatabase.app\",\r\n    projectId: \"quizfrontend-ac9ee\",\r\n    storageBucket: \"quizfrontend-ac9ee.appspot.com\",\r\n    messagingSenderId: \"598479422146\",\r\n    appId: \"1:598479422146:web:812463d02e2684ad0bf15b\",\r\n  };\r\n  \r\n  const app = initializeApp(firebaseConfig);\r\n  const db = getDatabase(app);\r\n\r\n  export default db;","const getIdUser = <T extends string>(key: T): string => {\r\n  const value = localStorage.getItem(key);\r\n  if (value === null || value === undefined) {\r\n    throw new Error(`Value not found for key '${key}'`);\r\n  }\r\n  try {\r\n    return `${value}`;\r\n  } catch (e: unknown) {\r\n    if (e instanceof Error) {\r\n      throw new Error(`Invalid JSON data for key '${key}': ${e.message}`);\r\n    } else {\r\n      throw new Error(`Unknown error caught: ${e}`);\r\n    }\r\n  }\r\n};\r\n\r\nexport { getIdUser };\r\n","import { FocusEvent, KeyboardEvent } from 'react';\r\n\r\nconst setAnimateInputAndText = (\r\n  // there should not be a comma at the end of line\r\n  //eslint-disable-next-line\r\n  e: FocusEvent<HTMLInputElement> | KeyboardEvent<HTMLInputElement>,\r\n  color: string,\r\n) => {\r\n  (e.target as HTMLElement).style.transition = 'all ease 0.3s';\r\n  (e.target as HTMLElement).style.borderColor = color;\r\n  (\r\n    (e.target as HTMLElement).previousElementSibling as HTMLElement\r\n  ).style.color = color;\r\n};\r\n\r\nexport { setAnimateInputAndText };\r\n","import styled from 'styled-components';\r\n\r\nconst StyledInputField = styled.input`\r\n  position: relative;\r\n  box-sizing: border-box;\r\n  width: 100%;\r\n  max-width: 288px;\r\n  height: 56px;\r\n  border: 1px solid #81868c80;\r\n  padding: 16px 19px;\r\n  font: var(--font-text-bold);\r\n  outline: none;\r\n\r\n  &::placeholder {\r\n    color: #81868c;\r\n    font-size: 16px;\r\n    font-weight: 700;\r\n    line-height: 24px;\r\n    text-align: left;\r\n  }\r\n\r\n  @media screen and (min-width: 459.8px) {\r\n    max-width: 391px;\r\n  }\r\n`;\r\n\r\nexport { StyledInputField };\r\n","import { FC, ChangeEvent, memo, FocusEvent, KeyboardEvent } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { setAnimateInputAndText } from '../../helpers/setAnimateInputAndText';\r\nimport { clearAnimateInputAndText } from '../../helpers/clearAnimateInputAndText';\r\n\r\nimport { StyledInputField } from './InputField.Style';\r\n\r\ninterface InputFieldProps {\r\n  type: string;\r\n  id: string;\r\n  name: string;\r\n  placeholder: string;\r\n  value?: string;\r\n  onChange?: (e: ChangeEvent<HTMLInputElement>) => void;\r\n  setRefs: (elem: HTMLInputElement) => void;\r\n  onError: (\r\n    e: FocusEvent<HTMLInputElement> | KeyboardEvent<HTMLInputElement>,\r\n  ) => void;\r\n  onValidateInput: (\r\n    e: FocusEvent<HTMLInputElement> | KeyboardEvent<HTMLInputElement>,\r\n  ) => void;\r\n  isValueValidate: boolean;\r\n  isFirstRender: boolean;\r\n  keyHint: 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send';\r\n}\r\n\r\nconst InputField: FC<InputFieldProps> = ({\r\n  isFirstRender,\r\n  isValueValidate,\r\n  type,\r\n  id,\r\n  setRefs,\r\n  name,\r\n  placeholder,\r\n  onChange,\r\n  value,\r\n  onError,\r\n  keyHint,\r\n  onValidateInput,\r\n}) => {\r\n  const { t } = useTranslation();\r\n  const autocompleteValue = id === 'email' ? 'username' : 'on';\r\n\r\n  return (\r\n    <StyledInputField\r\n      required\r\n      autoComplete={autocompleteValue}\r\n      enterKeyHint={keyHint}\r\n      ref={setRefs}\r\n      type={type}\r\n      id={id}\r\n      name={name}\r\n      value={value}\r\n      placeholder={t(placeholder) || 'Placeholder'}\r\n      onFocus={(e: FocusEvent<HTMLInputElement>) => {\r\n        if (e.target.type === 'email' || isFirstRender || isValueValidate) {\r\n          setAnimateInputAndText(e, '#6768d7');\r\n        }\r\n      }}\r\n      onBlur={(e: FocusEvent<HTMLInputElement>) => {\r\n        clearAnimateInputAndText(e, '#81868C');\r\n        onValidateInput(e);\r\n      }}\r\n      onKeyDown={(e: KeyboardEvent<HTMLInputElement>) => {\r\n        const key = e.key;\r\n        if (key === 'Tab') {\r\n          onValidateInput(e);\r\n        }\r\n      }}\r\n      onKeyUp={(e: KeyboardEvent<HTMLInputElement>) => {\r\n        const key = e.key;\r\n        if (key === 'Backspace' || key === 'Delete') {\r\n          onError(e);\r\n        }\r\n      }}\r\n      onChange={onChange}\r\n      onInput={onError}\r\n    ></StyledInputField>\r\n  );\r\n};\r\n\r\nexport default memo(InputField);\r\n","import { FocusEvent } from 'react';\r\n\r\nconst clearAnimateInputAndText = (\r\n  // there should not be a comma at the end of line\r\n  //eslint-disable-next-line\r\n  e:\r\n    | FocusEvent<HTMLInputElement, Element>\r\n    | FocusEvent<HTMLSelectElement, Element>,\r\n  colorInitial: string,\r\n) => {\r\n  (e.target as HTMLElement).style.borderColor = colorInitial;\r\n  (\r\n    (e.target as HTMLElement).previousElementSibling as HTMLElement\r\n  ).style.color = colorInitial;\r\n};\r\n\r\nexport { clearAnimateInputAndText };\r\n","import { update } from 'firebase/database';\r\nimport { ref } from 'firebase/database';\r\n\r\nimport db from '../../../config/firebase/firebaseConfig';\r\n\r\ninterface IUserData {\r\n  name: string | 'User';\r\n  email: string | 'No email';\r\n}\r\n\r\nconst sendUserInfoDB = async (\r\n  idUser: string,\r\n  userName: string,\r\n  userEmail: string,\r\n) => {\r\n  try {\r\n    const referenceUserAnswers = ref(db, `users/user${idUser}/userInfo`);\r\n    update(referenceUserAnswers, {\r\n      name: userName,\r\n      email: userEmail,\r\n    } as IUserData);\r\n  } catch (error: unknown) {\r\n    if (error instanceof Error) {\r\n      throw new Error(`${error.message}`);\r\n    } else {\r\n      throw new Error(`Unknown error caught: ${error}`);\r\n    }\r\n  }\r\n};\r\n\r\nexport { sendUserInfoDB };\r\n","import { FC } from 'react';\r\n\r\nimport LinkBtn from '../../../../UI/LinkBtn/LinkBtn';\r\nimport { getIdUser } from '../../../../helpers/getIdUser';\r\nimport { sendUserInfoDB } from '../../api/sendUserInfoDb';\r\n\r\ntype ButtonProps = {\r\n  userName: string;\r\n  userEmail: string;\r\n  isDisabledBtn: boolean;\r\n};\r\n\r\nconst Button: FC<ButtonProps> = ({ userName, userEmail, isDisabledBtn }) => {\r\n  const onClickLinkBtn = () => {\r\n    sendUserInfoDB(getIdUser('idUser'), userName, userEmail);\r\n  };\r\n\r\n  return (\r\n    <LinkBtn\r\n      isDisabledBtn={isDisabledBtn}\r\n      text='Получить_результат'\r\n      pageTo='/results'\r\n      onClick={onClickLinkBtn}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import {\r\n  useState,\r\n  useCallback,\r\n  useMemo,\r\n  FocusEvent,\r\n  KeyboardEvent,\r\n} from 'react';\r\nimport { setAnimateInputAndText } from '../helpers/setAnimateInputAndText';\r\n\r\nconst useValidateName = () => {\r\n  const [valueUserName, setValueUserName] = useState<string>('');\r\n  const [isNameValidation, setIsNameValidation] = useState<boolean>(false);\r\n  const [isFirstRenderName, setIsFirstRenderName] = useState<boolean>(true);\r\n  const warningMessageName = 'Введите корректные данные';\r\n\r\n  const isNameInvalid = useMemo((): boolean => {\r\n    const minValue = 2;\r\n    const maxValue = 30;\r\n    const forbiddenSymbols = /[~!@#$%^&*()+`'\"\\\";:<>/\\\\|]/;\r\n    const isInvalidLength =\r\n      valueUserName.length < minValue || valueUserName.length > maxValue;\r\n    const hasForbiddenSymbols = forbiddenSymbols.test(valueUserName);\r\n\r\n    return isInvalidLength || hasForbiddenSymbols;\r\n  }, [valueUserName]);\r\n\r\n  const hideErrorInputName = (\r\n    e: FocusEvent<HTMLInputElement> | KeyboardEvent<HTMLInputElement>,\r\n  ) => {\r\n    if (!isNameInvalid) {\r\n      setIsNameValidation(true);\r\n      setAnimateInputAndText(e, '#6768d7');\r\n    }\r\n  };\r\n\r\n  const onValidateInputName = useCallback(\r\n    (e: FocusEvent<HTMLInputElement> | KeyboardEvent<HTMLInputElement>) => {\r\n      if (isFirstRenderName || valueUserName !== '') {\r\n        setIsFirstRenderName(false);\r\n        setAnimateInputAndText(e, '#81868C');\r\n      }\r\n\r\n      if (isNameInvalid) {\r\n        setIsNameValidation(false);\r\n        setAnimateInputAndText(e, 'red');\r\n      } else {\r\n        setIsNameValidation(true);\r\n      }\r\n    },\r\n    [isFirstRenderName, valueUserName, isNameInvalid],\r\n  );\r\n\r\n  return {\r\n    valueUserName,\r\n    isFirstRenderName,\r\n    isNameValidation,\r\n    setValueUserName,\r\n    hideErrorInputName,\r\n    onValidateInputName,\r\n    warningMessageName,\r\n  };\r\n};\r\n\r\nexport default useValidateName;\r\n","import {\r\n  useState,\r\n  useCallback,\r\n  useMemo,\r\n  FocusEvent,\r\n  KeyboardEvent,\r\n} from 'react';\r\nimport { setAnimateInputAndText } from '../helpers/setAnimateInputAndText';\r\n\r\nconst useValidateEmail = () => {\r\n  const [valueEmail, setValueEmail] = useState<string>('');\r\n  const [isEmailValidation, setIsEmailValidation] = useState<boolean>(false);\r\n  const [isFirstRenderEmail, setIsFirstRenderEmail] = useState<boolean>(true);\r\n  const warningMessageEmail = 'Введите корректный E-mail';\r\n\r\n  const getLengthDomain = useMemo((): number => {\r\n    const domain: string[] = [];\r\n    const arrayEmail = valueEmail.split('');\r\n    const indexDog = arrayEmail.indexOf('@');\r\n    const indexDot = arrayEmail.indexOf('.');\r\n\r\n    for (let i = indexDog + 1; i < indexDot; i++) {\r\n      domain.push(arrayEmail[i]);\r\n    }\r\n\r\n    return domain.join('').length;\r\n  }, [valueEmail]);\r\n\r\n  const getLengthNameEmail = useMemo((): number => {\r\n    const domain: string[] = [];\r\n    const arrayEmail = valueEmail.split('');\r\n    const indexDog = arrayEmail.indexOf('@');\r\n\r\n    for (let i = 0; i < indexDog; i++) {\r\n      domain.push(arrayEmail[i]);\r\n    }\r\n\r\n    return domain.join('').length;\r\n  }, [valueEmail]);\r\n\r\n  const isEmailInvalid = useMemo((): boolean => {\r\n    const minLengthEmail = 7;\r\n    const maxLengthEmail = 64;\r\n    const minLengthDomain = 1;\r\n    const maxLengthDomain = 31;\r\n    const minLengthUserNameEmail = 1;\r\n    const maxLengthUserNameEmail = 32;\r\n\r\n    // const forbiddenSymbols = /[~!@#$%^&*()+`'\"\\\";:<>/\\\\|]/;\r\n    // const hasForbiddenSymbols = forbiddenSymbols.test(valueUserName);\r\n    const isInvalidLength =\r\n      valueEmail.length < minLengthEmail || valueEmail.length > maxLengthEmail;\r\n    const isInvalidLengthDomain =\r\n      getLengthDomain < minLengthDomain || getLengthDomain > maxLengthDomain;\r\n    const isInvalidLengthUserNameEmail =\r\n      getLengthNameEmail < minLengthUserNameEmail ||\r\n      getLengthNameEmail > maxLengthUserNameEmail;\r\n\r\n    return (\r\n      isInvalidLength ||\r\n      isInvalidLengthUserNameEmail ||\r\n      isInvalidLengthDomain ||\r\n      !valueEmail.includes('@') ||\r\n      !valueEmail.includes('.')\r\n    );\r\n  }, [valueEmail]);\r\n\r\n  const onValidateInputEmail = useCallback(\r\n    (e: FocusEvent<HTMLInputElement> | KeyboardEvent<HTMLInputElement>) => {\r\n      if (isFirstRenderEmail) {\r\n        setIsFirstRenderEmail(false);\r\n      }\r\n\r\n      if (isEmailInvalid) {\r\n        setIsEmailValidation((_) => false);\r\n        setAnimateInputAndText(e, 'red');\r\n      } else {\r\n        setIsEmailValidation((_) => true);\r\n      }\r\n    },\r\n    [valueEmail, isFirstRenderEmail, isEmailInvalid],\r\n  );\r\n\r\n  const hideErrorInputEmail = useCallback(\r\n    (e: FocusEvent<HTMLInputElement> | KeyboardEvent<HTMLInputElement>) => {\r\n      if (!isEmailInvalid) {\r\n        setIsEmailValidation(true);\r\n        setAnimateInputAndText(e, '#6768d7');\r\n      }\r\n    },\r\n    [isEmailValidation, valueEmail],\r\n  );\r\n\r\n  return {\r\n    valueEmail,\r\n    isFirstRenderEmail,\r\n    isEmailValidation,\r\n    warningMessageEmail,\r\n    setValueEmail,\r\n    hideErrorInputEmail,\r\n    onValidateInputEmail,\r\n  };\r\n};\r\n\r\nexport default useValidateEmail;\r\n","import styled from 'styled-components';\r\n\r\nconst StyledSpan = styled.span`\r\n  position: absolute;\r\n  top: -10px;\r\n  left: 16px;\r\n  z-index: 2;\r\n  background-color: white;\r\n  color: #81868c;\r\n`;\r\n\r\nconst StyledPForm = styled.p`\r\n  position: relative;\r\n  &:nth-child(3) {\r\n    @media screen and (min-width: 459.8px) {\r\n      display: inline-block;\r\n    }\r\n  }\r\n`;\r\n\r\nconst StyledFieldset = styled.fieldset`\r\n  border: none;\r\n  padding: 0;\r\n\r\n  margin: 0 0 16px 0;\r\n\r\n  @media screen and (min-width: 459.8px) {\r\n    margin: 0 0 28px 0;\r\n  }\r\n`;\r\n\r\nconst StyledDivWarning = styled.div`\r\n  font: var(--font-little-text-regular);\r\n  color: red;\r\n`;\r\n\r\nexport { StyledSpan, StyledPForm, StyledFieldset, StyledDivWarning };\r\n","import UserForm from './UserForm/UserForm';\r\n\r\nexport default UserForm;\r\n","import {\r\n  useState,\r\n  ChangeEvent,\r\n  FC,\r\n  useEffect,\r\n  FocusEvent,\r\n  KeyboardEvent,\r\n} from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport InputField from '../UI/InputField/InputField';\r\nimport Button from '../UI/Button/Button';\r\nimport useValidateName from '../hooks/useValidateName';\r\nimport useValidateEmail from '../hooks/useValidateEmail';\r\n\r\nimport {\r\n  StyledSpan,\r\n  StyledPForm,\r\n  StyledFieldset,\r\n  StyledDivWarning,\r\n} from './UserForm.Styled';\r\n\r\ntype TDataInputs = {\r\n  htmlFor: 'username' | 'email';\r\n  placeholder: 'Ваше_имя' | 'E-mail';\r\n  type: 'text' | 'email';\r\n  id: 'username' | 'email';\r\n  name: 'userName' | 'userEmail';\r\n  nameField: string;\r\n  value: string;\r\n  isValidation: boolean;\r\n  isFirstRender: boolean;\r\n  onError: (\r\n    e: FocusEvent<HTMLInputElement> | KeyboardEvent<HTMLInputElement>,\r\n  ) => void;\r\n  onValidateInput: (\r\n    e: FocusEvent<HTMLInputElement> | KeyboardEvent<HTMLInputElement>,\r\n  ) => void;\r\n  warningMessage: string;\r\n  isValueValidate: boolean;\r\n  keyHint: 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send';\r\n};\r\n\r\nconst UserForm: FC = () => {\r\n  const { t } = useTranslation();\r\n\r\n  const {\r\n    valueUserName,\r\n    isFirstRenderName,\r\n    isNameValidation,\r\n    setValueUserName,\r\n    hideErrorInputName,\r\n    onValidateInputName,\r\n    warningMessageName,\r\n  } = useValidateName();\r\n  const {\r\n    valueEmail,\r\n    isFirstRenderEmail,\r\n    isEmailValidation,\r\n    setValueEmail,\r\n    hideErrorInputEmail,\r\n    onValidateInputEmail,\r\n    warningMessageEmail,\r\n  } = useValidateEmail();\r\n\r\n  const [isDisabledBtn, setIsDisabledBtn] = useState<boolean>(true);\r\n\r\n  const refsInputs: HTMLInputElement[] = [];\r\n  const dataInputs: TDataInputs[] = [\r\n    {\r\n      htmlFor: 'username',\r\n      placeholder: 'Ваше_имя',\r\n      type: 'text',\r\n      id: 'username',\r\n      name: 'userName',\r\n      nameField: t('Ваше_имя'),\r\n      value: valueUserName,\r\n      isValidation: isNameValidation,\r\n      isFirstRender: isFirstRenderName,\r\n      onError: hideErrorInputName,\r\n      onValidateInput: onValidateInputName,\r\n      warningMessage: warningMessageName,\r\n      isValueValidate: isNameValidation,\r\n      keyHint: 'next',\r\n    },\r\n    {\r\n      htmlFor: 'email',\r\n      placeholder: 'E-mail',\r\n      type: 'email',\r\n      id: 'email',\r\n      name: 'userEmail',\r\n      nameField: 'Email',\r\n      value: valueEmail,\r\n      isValidation: isEmailValidation,\r\n      isFirstRender: isFirstRenderEmail,\r\n      onError: hideErrorInputEmail,\r\n      onValidateInput: onValidateInputEmail,\r\n      warningMessage: warningMessageEmail,\r\n      isValueValidate: isEmailValidation,\r\n      keyHint: 'send',\r\n    },\r\n  ];\r\n\r\n  const onValueInput = (\r\n    e: ChangeEvent<HTMLInputElement | HTMLSelectElement>,\r\n  ) => {\r\n    const target = e.target;\r\n    const newValue = target.value;\r\n    const type = target.type;\r\n    type === 'text'\r\n      ? setValueUserName((_) => newValue)\r\n      : setValueEmail((_) => newValue);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const onFocusNameField = () => {\r\n      refsInputs[0]?.focus();\r\n    };\r\n    onFocusNameField();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setIsDisabledBtn(!(isEmailValidation && isNameValidation));\r\n  }, [isEmailValidation, isNameValidation]);\r\n\r\n  const setRefs = (elem: HTMLInputElement) => {\r\n    refsInputs.push(elem);\r\n  };\r\n\r\n  const inputsCallback = (dataInput: TDataInputs, index: number) => {\r\n    const {\r\n      htmlFor,\r\n      placeholder,\r\n      nameField,\r\n      type,\r\n      id,\r\n      name,\r\n      isValidation,\r\n      value,\r\n      isFirstRender,\r\n      onError,\r\n      onValidateInput,\r\n      warningMessage,\r\n      isValueValidate,\r\n      keyHint,\r\n    } = dataInput;\r\n\r\n    return (\r\n      <StyledPForm key={index + 1}>\r\n        <label htmlFor={htmlFor}>\r\n          <StyledSpan>{nameField}</StyledSpan>\r\n          <InputField\r\n            setRefs={setRefs}\r\n            placeholder={placeholder}\r\n            type={type}\r\n            id={id}\r\n            name={name}\r\n            value={value}\r\n            onChange={onValueInput}\r\n            onError={onError}\r\n            onValidateInput={onValidateInput}\r\n            isValueValidate={isValueValidate}\r\n            isFirstRender={isFirstRender}\r\n            keyHint={keyHint}\r\n          />\r\n          {isFirstRender ? null : isValidation ? null : (\r\n            <StyledDivWarning>{warningMessage}</StyledDivWarning>\r\n          )}\r\n        </label>\r\n      </StyledPForm>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <form>\r\n      <StyledFieldset>{dataInputs.map(inputsCallback)}</StyledFieldset>\r\n      <Button\r\n        userName={valueUserName}\r\n        userEmail={valueEmail}\r\n        isDisabledBtn={isDisabledBtn}\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default UserForm;\r\n","import styled from 'styled-components';\r\n\r\nconst StyledH1 = styled.h1`\r\n  font: var(--font-title4);\r\n  color: black;\r\n  padding: 0;\r\n  margin: 0 0 4px 0;\r\n\r\n  @media screen and (min-width: 459.8px) {\r\n    font: var(--font-title2);\r\n    margin: 0 0 16px 0;\r\n  }\r\n`;\r\n\r\nconst StyledSection = styled.section`\r\n  background-color: white;\r\n  padding: 18px 8px 16px 8px;\r\n\r\n  @media screen and (min-width: 459.8px) {\r\n    padding: 40px;\r\n  }\r\n`;\r\n\r\nconst StyledP = styled.p`\r\n  font: var(--font-little-text-regular);\r\n  color: black;\r\n  padding: 0;\r\n  margin: 0;\r\n  text-align: left;\r\n\r\n  @media screen and (min-width: 459.8px) {\r\n    font: var(--font-text-regular);\r\n    margin: 16px 0;\r\n  }\r\n`;\r\n\r\nexport { StyledH1, StyledSection, StyledP };\r\n","import React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport Container from '../../components/Container/Container';\r\nimport { StyledMain } from '../../styles/Main.Styled';\r\nimport UserForm from '../../modules/UserForm/index';\r\n\r\nimport { StyledH1, StyledSection, StyledP } from './Contact.styled';\r\n\r\nconst Contact = () => {\r\n  const { t } = useTranslation();\r\n  return (\r\n    <StyledMain>\r\n      <Container>\r\n        <StyledSection>\r\n          <article>\r\n            <StyledH1>{t('Прекрасная_работа')}</StyledH1>\r\n            <StyledP>{t('Учли_ваши_результаты')}</StyledP>\r\n          </article>\r\n          <article>\r\n            <UserForm />\r\n          </article>\r\n        </StyledSection>\r\n      </Container>\r\n    </StyledMain>\r\n  );\r\n};\r\n\r\nexport default Contact;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledMain = styled.main`\r\n  flex: 1 1 auto;\r\n`;\r\n"],"names":["StyledButton","styled","text","pageTo","onClick","id","isDisabledBtn","t","useTranslation","className","to","disabled","ContainerStyled","children","firebaseConfig","apiKey","process","REACT_APP_API_KEY","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","app","initializeApp","getDatabase","getIdUser","key","value","localStorage","getItem","undefined","Error","e","message","setAnimateInputAndText","color","target","style","transition","borderColor","previousElementSibling","StyledInputField","InputField","isFirstRender","isValueValidate","type","setRefs","name","placeholder","onChange","onError","keyHint","onValidateInput","autocompleteValue","required","autoComplete","enterKeyHint","ref","onFocus","onBlur","colorInitial","clearAnimateInputAndText","onKeyDown","onKeyUp","onInput","memo","userName","userEmail","LinkBtn","async","idUser","referenceUserAnswers","db","update","email","error","sendUserInfoDB","valueUserName","setValueUserName","useState","isNameValidation","setIsNameValidation","isFirstRenderName","setIsFirstRenderName","isNameInvalid","useMemo","isInvalidLength","length","hasForbiddenSymbols","test","onValidateInputName","useCallback","hideErrorInputName","warningMessageName","valueEmail","setValueEmail","isEmailValidation","setIsEmailValidation","isFirstRenderEmail","setIsFirstRenderEmail","getLengthDomain","domain","arrayEmail","split","indexDog","indexOf","indexDot","i","push","join","getLengthNameEmail","isEmailInvalid","includes","onValidateInputEmail","_","hideErrorInputEmail","warningMessageEmail","StyledSpan","StyledPForm","StyledFieldset","StyledDivWarning","useValidateName","useValidateEmail","setIsDisabledBtn","refsInputs","dataInputs","htmlFor","nameField","isValidation","warningMessage","onValueInput","newValue","useEffect","focus","onFocusNameField","elem","map","dataInput","index","StyledH1","StyledSection","StyledP","Container","StyledMain"],"sourceRoot":""}